{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Awesome-Virome","text":"<p>A curated list of software, tools, and databases useful for virome analysis, including phages, viruses, and their interactions with hosts.</p> <p></p>"},{"location":"#what-is-awesome-virome","title":"What is Awesome-Virome?","text":"<p>Awesome-Virome is a comprehensive collection of resources for studying viral communities in various environments. Whether you're a bioinformatician, a microbiologist, or a researcher in a related field, this repository aims to help you navigate the diverse landscape of tools available for virome analysis.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>Awesome-Virome offers several unique features that enhance its value as a resource for the viral bioinformatics community:</p> <ul> <li>Interactive Visualizations: Dynamic network graph showing tool relationships and connections</li> <li>Citation Analytics: Growth trends and impact metrics for virome analysis tools</li> <li>Enhanced Metadata: Automated metadata enrichment from GitHub, GitLab, and Bitbucket</li> <li>Community-Driven: Standardized issue templates and workflows for contributions</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<ul> <li>Introduction - Learn about virome analysis and this repository</li> <li>Tools Overview - Explore the comprehensive list of tools</li> <li>API Reference - Use the programmatic API</li> <li>Contributing - Help improve the repository</li> </ul>"},{"location":"#popular-tools","title":"Popular Tools","text":"<p>Ranked by GitHub stars:</p> <ol> <li>AlphaFold-Multimer - \u2b50 13320+ stars</li> <li>CovidMD - \u2b50 2365+ stars</li> <li>BLAST+DIAMOND - \u2b50 1114+ stars</li> <li>metaviralSPAdes - \u2b50 797+ stars</li> <li>Prodigal/MetaProdigal - \u2b50 471+ stars</li> </ol>"},{"location":"#visualizing-the-data","title":"Visualizing the Data","text":"<p>We're working on an interactive dashboard to visualize the relationships between tools and their impacts on the field. This feature will be available in a future update.</p> <p></p>"},{"location":"api/endpoints/","title":"API Endpoints","text":"<p>This page details all available endpoints in the Awesome-Virome API, including their parameters, response format, and example usage.</p>"},{"location":"api/endpoints/#tools","title":"Tools","text":"<p>Returns a complete list of all tools in the database with their full metadata.</p> <ul> <li>URL: <code>/api/v1/tools.json</code></li> <li>Method: GET</li> <li>Parameters: None</li> <li>Response Format: JSON</li> </ul> <p>Response Structure: <pre><code>{\n  \"count\": 300,\n  \"last_updated\": \"2025-05-01\",\n  \"tools\": [\n    {\n      \"name\": \"VirSorter2\",\n      \"description\": \"Random forest classifier for virus detection\",\n      \"url\": \"https://bitbucket.org/MAVERICLab/virsorter2/\",\n      \"category\": \"Virus and Phage Identification\",\n      \"subcategory\": \"Metagenome Analysis\",\n      \"language\": \"Python\",\n      \"github_stars\": null,\n      \"package_manager\": \"conda\",\n      \"latest_version\": \"v2.2.4\",\n      \"latest_release_date\": \"2023-04-15\",\n      \"license\": \"GPL-3.0\",\n      \"citation_count\": 342,\n      \"maintenance_status\": \"Active\"\n    },\n    // Additional tools...\n  ]\n}\n</code></pre></p> <p>Example Request: <pre><code>fetch('https://shandley.github.io/awesome-virome/api/v1/tools.json')\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data));\n</code></pre></p>"},{"location":"api/endpoints/#categories","title":"Categories","text":"<p>Returns a list of all tool categories and their subcategories.</p> <ul> <li>URL: <code>/api/v1/categories.json</code></li> <li>Method: GET</li> <li>Parameters: None</li> <li>Response Format: JSON</li> </ul> <p>Response Structure: <pre><code>{\n  \"count\": 8,\n  \"categories\": [\n    {\n      \"name\": \"Virus and Phage Identification\",\n      \"slug\": \"virus-identification\",\n      \"description\": \"Tools for identifying viral sequences in metagenomic data\",\n      \"subcategories\": [\n        \"Metagenome Analysis\",\n        \"Integrated Viruses\",\n        \"RNA Virus Identification\"\n      ],\n      \"tool_count\": 45\n    },\n    // Additional categories...\n  ]\n}\n</code></pre></p> <p>Example Request: <pre><code>import requests\nresponse = requests.get('https://shandley.github.io/awesome-virome/api/v1/categories.json')\ndata = response.json()\nprint(f\"Found {data['count']} categories\")\n</code></pre></p>"},{"location":"api/endpoints/#search","title":"Search","text":"<p>Provides a lightweight index for client-side searching and filtering.</p> <ul> <li>URL: <code>/api/v1/search.json</code></li> <li>Method: GET</li> <li>Parameters: None</li> <li>Response Format: JSON</li> </ul> <p>Response Structure: <pre><code>{\n  \"count\": 300,\n  \"last_updated\": \"2025-05-01\",\n  \"tools\": [\n    {\n      \"name\": \"VirSorter2\",\n      \"category\": \"Virus and Phage Identification\",\n      \"subcategory\": \"Metagenome Analysis\",\n      \"tags\": [\"virus detection\", \"metagenomics\", \"classifier\"],\n      \"language\": \"Python\"\n    },\n    // Additional simplified tool entries...\n  ]\n}\n</code></pre></p> <p>Example Request: <pre><code>// Client-side filtering example\nfetch('https://shandley.github.io/awesome-virome/api/v1/search.json')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    const pythonTools = data.tools.filter(tool =&gt; tool.language === 'Python');\n    console.log(`Found ${pythonTools.length} Python tools`);\n  });\n</code></pre></p>"},{"location":"api/endpoints/#stats","title":"Stats","text":"<p>Provides aggregate statistics about the tool collection.</p> <ul> <li>URL: <code>/api/v1/stats.json</code></li> <li>Method: GET</li> <li>Parameters: None</li> <li>Response Format: JSON</li> </ul> <p>Response Structure: <pre><code>{\n  \"total_tools\": 300,\n  \"tools_by_category\": {\n    \"Virus and Phage Identification\": 45,\n    \"Host Prediction\": 20,\n    \"Genome Analysis\": 35,\n    // Additional categories...\n  },\n  \"tools_by_language\": {\n    \"Python\": 150,\n    \"R\": 50,\n    \"C++\": 30,\n    // Additional languages...\n  },\n  \"tools_by_maintenance\": {\n    \"Active\": 200,\n    \"Inactive\": 80,\n    \"Unknown\": 20\n  },\n  \"tools_by_package_manager\": {\n    \"conda\": 120,\n    \"pip\": 80,\n    \"other\": 100\n  },\n  \"average_citation_count\": 105.3,\n  \"last_updated\": \"2025-05-01\"\n}\n</code></pre></p> <p>Example Request: <pre><code>import requests\nimport matplotlib.pyplot as plt\n\nresponse = requests.get('https://shandley.github.io/awesome-virome/api/v1/stats.json')\ndata = response.json()\n\n# Visualize tools by category\ncategories = list(data['tools_by_category'].keys())\ncounts = list(data['tools_by_category'].values())\n\nplt.figure(figsize=(10, 6))\nplt.bar(categories, counts)\nplt.title('Tools by Category')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n</code></pre></p>"},{"location":"api/endpoints/#category-specific","title":"Category-Specific","text":"<p>Returns tools filtered by a specific category.</p> <ul> <li>URL: <code>/api/v1/categories/{category_slug}.json</code></li> <li>Method: GET</li> <li>Path Parameters:</li> <li><code>category_slug</code>: The slug of the category to filter by (e.g., <code>virus-identification</code>)</li> <li>Response Format: JSON</li> </ul> <p>Response Structure: <pre><code>{\n  \"category\": \"Virus and Phage Identification\",\n  \"description\": \"Tools for identifying viral sequences in metagenomic data\",\n  \"subcategories\": [\n    \"Metagenome Analysis\",\n    \"Integrated Viruses\",\n    \"RNA Virus Identification\"\n  ],\n  \"count\": 45,\n  \"tools\": [\n    {\n      \"name\": \"VirSorter2\",\n      \"description\": \"Random forest classifier for virus detection\",\n      \"url\": \"https://bitbucket.org/MAVERICLab/virsorter2/\",\n      \"subcategory\": \"Metagenome Analysis\",\n      \"language\": \"Python\",\n      \"github_stars\": null,\n      \"package_manager\": \"conda\",\n      \"latest_version\": \"v2.2.4\",\n      \"latest_release_date\": \"2023-04-15\",\n      \"license\": \"GPL-3.0\",\n      \"citation_count\": 342,\n      \"maintenance_status\": \"Active\"\n    },\n    // Additional tools in this category...\n  ]\n}\n</code></pre></p> <p>Example Request: <pre><code>// Get all host prediction tools\nfetch('https://shandley.github.io/awesome-virome/api/v1/categories/host-prediction.json')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log(`Found ${data.count} host prediction tools`);\n    // Display tools in a table\n    const tableData = data.tools.map(tool =&gt; ({\n      name: tool.name,\n      description: tool.description,\n      language: tool.language || 'Unknown',\n      stars: tool.github_stars || 'N/A'\n    }));\n    console.table(tableData);\n  });\n</code></pre></p>"},{"location":"api/endpoints/#metadata","title":"Metadata","text":"<p>Returns detailed information about the API itself.</p> <ul> <li>URL: <code>/api/v1/metadata.json</code></li> <li>Method: GET</li> <li>Parameters: None</li> <li>Response Format: JSON</li> </ul> <p>Response Structure: <pre><code>{\n  \"name\": \"Awesome-Virome API\",\n  \"version\": \"v1\",\n  \"documentation_url\": \"https://shandley.github.io/awesome-virome/docs/api\",\n  \"description\": \"REST API for accessing the Awesome-Virome database of virome analysis tools\",\n  \"last_updated\": \"2025-05-01\",\n  \"contact\": \"https://github.com/shandley/awesome-virome/issues\",\n  \"endpoints\": [\n    \"/api/v1/tools.json\",\n    \"/api/v1/categories.json\",\n    \"/api/v1/search.json\",\n    \"/api/v1/stats.json\",\n    \"/api/v1/categories/{category_slug}.json\",\n    \"/api/v1/metadata.json\"\n  ],\n  \"total_tools\": 300,\n  \"repository_url\": \"https://github.com/shandley/awesome-virome\"\n}\n</code></pre></p> <p>Example Request: <pre><code>import requests\n\nresponse = requests.get('https://shandley.github.io/awesome-virome/api/v1/metadata.json')\ndata = response.json()\nprint(f\"API Version: {data['version']}\")\nprint(f\"Last Updated: {data['last_updated']}\")\nprint(f\"Available Endpoints: {', '.join(data['endpoints'])}\")\n</code></pre></p>"},{"location":"api/endpoints/#error-handling","title":"Error Handling","text":"<p>If an error occurs, the API will return a JSON object with an error message:</p> <pre><code>{\n  \"error\": \"Category not found\",\n  \"status\": 404,\n  \"message\": \"The category 'invalid-category' does not exist\"\n}\n</code></pre> <p>Note that since the API is hosted on GitHub Pages, only HTTP status 200 (OK) and 404 (Not Found) are possible. Error details are included in the response body.</p>"},{"location":"api/endpoints/#cross-origin-resource-sharing","title":"Cross-Origin Resource Sharing","text":"<p>All API endpoints support CORS (Cross-Origin Resource Sharing), allowing them to be accessed from web applications hosted on different domains.</p>"},{"location":"api/endpoints/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Examples page for more detailed usage examples</li> <li>View the API Overview for general information about the API</li> <li>See the Tools Overview to understand the data model better</li> </ul>"},{"location":"api/examples/","title":"API Usage Examples","text":"<p>This page provides practical examples of how to use the Awesome-Virome API in different programming languages and for various use cases.</p>"},{"location":"api/examples/#basic-examples","title":"Basic Examples","text":""},{"location":"api/examples/#javascript-browser","title":"JavaScript (Browser)","text":"<p>Fetch all tools and display them in a table:</p> <pre><code>async function fetchAndDisplayTools() {\n  try {\n    const response = await fetch('https://shandley.github.io/awesome-virome/api/v1/tools.json');\n    const data = await response.json();\n\n    const toolsTable = document.getElementById('tools-table');\n    const tbody = toolsTable.querySelector('tbody');\n\n    data.tools.forEach(tool =&gt; {\n      const row = document.createElement('tr');\n      row.innerHTML = `\n        &lt;td&gt;&lt;a href=\"${tool.url}\" target=\"_blank\"&gt;${tool.name}&lt;/a&gt;&lt;/td&gt;\n        &lt;td&gt;${tool.description}&lt;/td&gt;\n        &lt;td&gt;${tool.category}&lt;/td&gt;\n        &lt;td&gt;${tool.language || 'N/A'}&lt;/td&gt;\n        &lt;td&gt;${tool.maintenance_status || 'Unknown'}&lt;/td&gt;\n      `;\n      tbody.appendChild(row);\n    });\n  } catch (error) {\n    console.error('Error fetching tools:', error);\n  }\n}\n\n// Call the function when the page loads\ndocument.addEventListener('DOMContentLoaded', fetchAndDisplayTools);\n</code></pre>"},{"location":"api/examples/#python","title":"Python","text":"<p>Find tools by category and save to CSV:</p> <pre><code>import requests\nimport pandas as pd\n\ndef get_tools_by_category(category_slug):\n    url = f'https://shandley.github.io/awesome-virome/api/v1/categories/{category_slug}.json'\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        return data\n    else:\n        print(f\"Error fetching category: {response.status_code}\")\n        return None\n\n# Get all host prediction tools\nhost_prediction_data = get_tools_by_category('host-prediction')\n\nif host_prediction_data:\n    # Convert to DataFrame\n    tools_df = pd.DataFrame(host_prediction_data['tools'])\n\n    # Save to CSV\n    tools_df.to_csv('host_prediction_tools.csv', index=False)\n\n    print(f\"Saved {len(tools_df)} host prediction tools to CSV\")\n\n    # Basic analysis\n    if 'language' in tools_df.columns:\n        print(\"\\nTools by Language:\")\n        print(tools_df['language'].value_counts())\n\n    if 'maintenance_status' in tools_df.columns:\n        print(\"\\nTools by Maintenance Status:\")\n        print(tools_df['maintenance_status'].value_counts())\n</code></pre>"},{"location":"api/examples/#r","title":"R","text":"<p>Create a visualization of tools by category:</p> <pre><code>library(httr)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Fetch statistics\nstats_url &lt;- \"https://shandley.github.io/awesome-virome/api/v1/stats.json\"\nstats_response &lt;- GET(stats_url)\nstats_data &lt;- fromJSON(content(stats_response, \"text\", encoding = \"UTF-8\"))\n\n# Extract category data for visualization\ncategories_df &lt;- data.frame(\n  Category = names(stats_data$tools_by_category),\n  Count = unlist(stats_data$tools_by_category),\n  stringsAsFactors = FALSE\n)\n\n# Sort by count descending\ncategories_df &lt;- categories_df %&gt;% arrange(desc(Count))\n\n# Create bar chart\nggplot(categories_df, aes(x = reorder(Category, -Count), y = Count)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  theme_minimal() +\n  labs(title = \"Virome Analysis Tools by Category\",\n       x = \"Category\",\n       y = \"Number of Tools\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Save the plot\nggsave(\"tools_by_category.png\", width = 10, height = 6)\n</code></pre>"},{"location":"api/examples/#advanced-examples","title":"Advanced Examples","text":""},{"location":"api/examples/#tool-recommendation-system","title":"Tool Recommendation System","text":"<p>This JavaScript example creates a simple tool recommendation system based on user requirements:</p> <pre><code>async function recommendTools(requirements) {\n  try {\n    // Fetch all tools\n    const response = await fetch('https://shandley.github.io/awesome-virome/api/v1/tools.json');\n    const data = await response.json();\n\n    // Score each tool based on requirements\n    const scoredTools = data.tools.map(tool =&gt; {\n      let score = 0;\n\n      // Category match\n      if (requirements.category &amp;&amp; tool.category === requirements.category) {\n        score += 3;\n      }\n\n      // Language match\n      if (requirements.language &amp;&amp; tool.language === requirements.language) {\n        score += 2;\n      }\n\n      // Maintenance status (prefer active tools)\n      if (tool.maintenance_status === 'Active') {\n        score += 1;\n      }\n\n      // Citation count (normalized 0-2 points)\n      if (tool.citation_count) {\n        const normalizedCitations = Math.min(tool.citation_count / 500, 1) * 2;\n        score += normalizedCitations;\n      }\n\n      // GitHub stars (normalized 0-2 points)\n      if (tool.github_stars) {\n        const normalizedStars = Math.min(tool.github_stars / 1000, 1) * 2;\n        score += normalizedStars;\n      }\n\n      return {\n        ...tool,\n        score\n      };\n    });\n\n    // Return top 5 recommendations\n    const recommendations = scoredTools\n      .sort((a, b) =&gt; b.score - a.score)\n      .slice(0, 5);\n\n    return recommendations;\n  } catch (error) {\n    console.error('Error fetching tools for recommendation:', error);\n    return [];\n  }\n}\n\n// Example usage\nconst userRequirements = {\n  category: 'Host Prediction',\n  language: 'Python'\n};\n\nrecommendTools(userRequirements)\n  .then(recommendations =&gt; {\n    console.log('Top recommendations:');\n    recommendations.forEach((tool, index) =&gt; {\n      console.log(`${index + 1}. ${tool.name} (Score: ${tool.score.toFixed(1)})`);\n      console.log(`   Description: ${tool.description}`);\n      console.log(`   URL: ${tool.url}`);\n      console.log('');\n    });\n  });\n</code></pre>"},{"location":"api/examples/#python-data-visualization","title":"Python Data Visualization","text":"<p>This Python script creates simple visualizations for tool data:</p> <pre><code>import requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Fetch all tools\ndef fetch_tools():\n    url = 'https://shandley.github.io/awesome-virome/api/v1/tools.json'\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()['tools']\n    else:\n        print(f\"Error fetching tools: {response.status_code}\")\n        return []\n\ntools = fetch_tools()\ndf = pd.DataFrame(tools)\n\n# Set up the plotting environment\nplt.style.use('ggplot')\nplt.figure(figsize=(12, 8))\n\n# Create a bar chart of tools by category\ncategory_counts = df['category'].value_counts()\nplt.subplot(2, 1, 1)\nsns.barplot(x=category_counts.index, y=category_counts.values)\nplt.title('Tools by Category')\nplt.xticks(rotation=45, ha='right')\nplt.ylabel('Number of Tools')\nplt.tight_layout()\n\n# Create a pie chart of tool programming languages\nplt.subplot(2, 1, 2)\nlanguage_counts = df['language'].value_counts()\nplt.pie(language_counts, labels=language_counts.index, autopct='%1.1f%%')\nplt.title('Tools by Programming Language')\nplt.axis('equal')\nplt.tight_layout()\n\n# Save the figure\nplt.savefig('awesome_virome_stats.png')\nplt.close()\n\nprint(f\"Visualization saved as awesome_virome_stats.png\")\n\n# Print some basic statistics\nprint(\"\\nBasic Statistics:\")\nprint(f\"Total number of tools: {len(df)}\")\n\nif 'maintenance_status' in df.columns:\n    print(\"\\nTools by Maintenance Status:\")\n    print(df['maintenance_status'].value_counts())\n\nif 'category' in df.columns:\n    print(\"\\nTop Categories:\")\n    print(category_counts.head(5))\n\nif 'citation_count' in df.columns:\n    print(\"\\nMost Cited Tools:\")\n    most_cited = df.sort_values('citation_count', ascending=False).head(5)\n    for _, tool in most_cited.iterrows():\n        print(f\"- {tool['name']}: {tool['citation_count']} citations\")\n</code></pre>"},{"location":"api/examples/#command-line-tool-examples","title":"Command-Line Tool Examples","text":""},{"location":"api/examples/#shell-script-for-category-summary","title":"Shell Script for Category Summary","text":"<p>This Bash script summarizes tools by category:</p> <pre><code>#!/bin/bash\n\n# Function to fetch and display category information\nfetch_category() {\n  local category_slug=$1\n  echo \"Fetching information for category: $category_slug\"\n\n  # Fetch category data\n  response=$(curl -s \"https://shandley.github.io/awesome-virome/api/v1/categories/$category_slug.json\")\n\n  # Extract and display information\n  category=$(echo $response | jq -r '.category')\n  description=$(echo $response | jq -r '.description')\n  count=$(echo $response | jq -r '.count')\n\n  echo \"===================================\"\n  echo \"Category: $category\"\n  echo \"Description: $description\"\n  echo \"Number of tools: $count\"\n  echo \"===================================\"\n\n  # Show top 5 tools\n  echo \"Top tools in this category:\"\n  echo $response | jq -r '.tools[0:5] | .[] | \"- \\(.name): \\(.description)\"'\n  echo \"\"\n}\n\n# Fetch categories\necho \"Fetching available categories...\"\ncategories=$(curl -s \"https://shandley.github.io/awesome-virome/api/v1/categories.json\")\n\n# Display categories\necho \"Available categories:\"\necho $categories | jq -r '.categories[] | .slug'\necho \"\"\n\n# Process each category\necho $categories | jq -r '.categories[] | .slug' | while read -r category_slug; do\n  fetch_category \"$category_slug\"\ndone\n</code></pre>"},{"location":"api/examples/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference for detailed endpoint documentation</li> <li>Check out the API Overview for general information</li> <li>Visit the Tools section to learn about the available tools</li> </ul>"},{"location":"api/overview/","title":"Awesome-Virome API","text":"<p>Awesome-Virome provides a REST API that allows programmatic access to the curated database of virome analysis tools. This enables developers and researchers to build applications, workflows, or custom analyses on top of the dataset.</p>"},{"location":"api/overview/#api-features","title":"API Features","text":"<ul> <li>Base URL: <code>https://shandley.github.io/awesome-virome/api/v1/</code></li> <li>Format: All endpoints return JSON</li> <li>Authentication: No authentication required</li> <li>CORS-Enabled: Accessible from browser applications</li> <li>Cache-Friendly: Responses include appropriate cache headers</li> </ul>"},{"location":"api/overview/#getting-started","title":"Getting Started","text":"<p>Here's a simple example of how to fetch the complete list of tools using JavaScript:</p> <pre><code>fetch('https://shandley.github.io/awesome-virome/api/v1/tools.json')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log(`Found ${data.count} tools`);\n    // Process the tools data\n  });\n</code></pre> <p>Or using Python:</p> <pre><code>import requests\n\nresponse = requests.get('https://shandley.github.io/awesome-virome/api/v1/tools.json')\ndata = response.json()\nprint(f\"Found {data['count']} tools\")\n# Process the tools data\n</code></pre>"},{"location":"api/overview/#available-endpoints","title":"Available Endpoints","text":"Endpoint Description Example <code>/api/v1/tools.json</code> Complete list of all tools with metadata View <code>/api/v1/categories.json</code> List of all tool categories View <code>/api/v1/search.json</code> Lightweight index for client-side filtering View <code>/api/v1/stats.json</code> Aggregate statistics about the tools collection View <code>/api/v1/categories/{category_slug}.json</code> Tools filtered by category Example"},{"location":"api/overview/#data-structure","title":"Data Structure","text":"<p>The API returns data with a consistent structure across endpoints. Here's an example of a tool entry:</p> <pre><code>{\n  \"name\": \"VirSorter2\",\n  \"description\": \"Random forest classifier for virus detection\",\n  \"url\": \"https://bitbucket.org/MAVERICLab/virsorter2/\",\n  \"category\": \"Virus and Phage Identification\",\n  \"subcategory\": \"Metagenome Analysis\",\n  \"language\": \"Python\",\n  \"github_stars\": null,\n  \"package_manager\": \"conda\",\n  \"latest_version\": \"v2.2.4\",\n  \"latest_release_date\": \"2023-04-15\",\n  \"license\": \"GPL-3.0\",\n  \"citation_count\": 342,\n  \"maintenance_status\": \"Active\"\n}\n</code></pre>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<p>The API is served from GitHub Pages and doesn't have explicit rate limits. However, we recommend:</p> <ul> <li>Implementing caching in your applications</li> <li>Limiting requests to a reasonable frequency</li> <li>Downloading the full dataset for heavy processing rather than making many small requests</li> </ul>"},{"location":"api/overview/#use-cases","title":"Use Cases","text":"<p>The API enables many interesting use cases:</p> <ul> <li>Tool Discovery Applications: Build custom interfaces for discovering tools</li> <li>Scientific Workflows: Integrate tool metadata into computational pipelines</li> <li>Academic Research: Analyze trends in virome analysis tool development</li> <li>Recommendation Systems: Create intelligent tool recommendation systems based on user needs</li> <li>Custom Dashboards: Build specialized visualizations for specific types of tools</li> </ul>"},{"location":"api/overview/#versioning","title":"Versioning","text":"<p>The API uses a versioned URL structure (currently <code>v1</code>). This ensures that future changes to the API won't break existing applications. If we introduce breaking changes, we'll create a new version (e.g., <code>v2</code>) while maintaining the old version for backward compatibility.</p>"},{"location":"api/overview/#api-changelog","title":"API Changelog","text":""},{"location":"api/overview/#v1-current","title":"v1 (Current)","text":"<ul> <li>Initial release with core endpoints</li> <li>Support for all tool categories</li> <li>Basic statistics and search index</li> <li>Complete metadata for all tools</li> </ul>"},{"location":"api/overview/#need-help","title":"Need Help?","text":"<p>If you have questions about the API or encounter any issues, please:</p> <ol> <li>Check the complete API documentation</li> <li>Look at the example code</li> <li>Open an issue on GitHub if you find a bug or have a feature request</li> </ol>"},{"location":"contributing/guidelines/","title":"Contributing to Awesome-Virome","text":"<p>Thank you for considering contributing to Awesome-Virome! This document provides guidelines and instructions for contributing to this curated list of virome analysis tools.</p>"},{"location":"contributing/guidelines/#ways-to-contribute","title":"Ways to Contribute","text":"<p>There are several ways to contribute to Awesome-Virome:</p> <ol> <li>Add New Tools: Submit entries for tools not yet included in the list</li> <li>Update Information: Help keep tool descriptions and links up to date</li> <li>Report Issues: Let us know about broken links or outdated information</li> <li>Improve Documentation: Suggest enhancements to the documentation</li> <li>Fix Bugs: Help resolve issues with the website or dashboard</li> </ol>"},{"location":"contributing/guidelines/#contribution-process","title":"Contribution Process","text":""},{"location":"contributing/guidelines/#option-1-submit-an-issue","title":"Option 1: Submit an Issue","text":"<p>The easiest way to contribute is by submitting an issue:</p> <ol> <li>Go to the Issues page and click \"New Issue\"</li> <li>Select the appropriate template:</li> <li>Tool Addition: For suggesting new tools</li> <li>Tool Update: For updating existing tool information</li> <li>Bug Report: For reporting issues with the repository</li> <li>Feature Request: For suggesting new features</li> <li>Fill out all required fields</li> <li>Submit the issue</li> </ol> <p>Our team will review your submission and incorporate valid contributions.</p>"},{"location":"contributing/guidelines/#option-2-submit-a-pull-request","title":"Option 2: Submit a Pull Request","text":"<p>For more direct contributions:</p> <ol> <li>Fork the repository</li> <li>Create a new branch for your addition (<code>git checkout -b add-new-tool</code>)</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/guidelines/#guidelines-for-tool-entries","title":"Guidelines for Tool Entries","text":"<p>Each tool entry should follow this format:</p> <pre><code>- [Tool Name](link-to-tool) - Brief description of the tool. [package-manager] [language]\n</code></pre> <p>Where: - Tool Name: The name of the software, tool, or database - link-to-tool: A URL to the tool's website, GitHub repository, or paper - Brief description: Explains what the tool does in 1-2 sentences - package-manager: Indicates how the tool can be installed (conda, pip, etc.) - language: Indicates the programming language used (optional)</p> <p>Example:</p> <pre><code>- [ViralMSA](https://github.com/niemasd/ViralMSA) - Python script for viral multiple sequence alignment using read mappers. [source] [Python]\n</code></pre>"},{"location":"contributing/guidelines/#detailed-requirements","title":"Detailed Requirements","text":""},{"location":"contributing/guidelines/#required-information","title":"Required Information","text":"<p>Every tool submission must include:</p> <ol> <li>Tool Name: The official name of the tool</li> <li>URL: A link to the tool's repository, website, or publication</li> <li>Description: A clear, concise description of what the tool does</li> <li>Category: The appropriate category for the tool</li> </ol>"},{"location":"contributing/guidelines/#optional-but-recommended","title":"Optional But Recommended","text":"<p>For higher quality entries, include:</p> <ol> <li>Version Information: The latest release version, if available</li> <li>Installation Method: How to install the tool (conda, pip, docker, etc.)</li> <li>Programming Language: The primary language the tool is written in</li> <li>License Information: The license under which the tool is distributed</li> <li>Citation Information: DOI or publication reference</li> <li>GitHub Stars: For GitHub repositories (automatically collected)</li> <li>Maintenance Status: Whether the tool is actively maintained</li> </ol>"},{"location":"contributing/guidelines/#quality-requirements","title":"Quality Requirements","text":"<p>Your submission will be evaluated against these key criteria:</p> <ol> <li>Relevance: The tool must be relevant to virome analysis</li> <li>Accessibility: The URL must be accessible and correct</li> <li>Clarity: The description must be clear and informative</li> <li>Categorization: The tool must be placed in the correct category</li> </ol>"},{"location":"contributing/guidelines/#automated-validation","title":"Automated Validation","text":"<p>All submissions undergo automated validation:</p> <ol> <li>URLs are checked for accessibility</li> <li>Descriptions are analyzed for clarity and relevance</li> <li>Submissions are checked for duplicates</li> <li>DOIs and citations are validated when provided</li> </ol> <p>A quality score (0-100) is assigned based on these checks. Submissions scoring below 70 require improvements before acceptance.</p>"},{"location":"contributing/guidelines/#enhanced-metadata-collection","title":"Enhanced Metadata Collection","text":"<p>For tools hosted on GitHub, GitLab, or Bitbucket, we automatically collect:</p> <ul> <li>Repository statistics (stars, forks, open issues)</li> <li>License information</li> <li>Programming languages</li> <li>Repository topics/tags</li> <li>Release information</li> <li>Creation and update dates</li> </ul> <p>This metadata is updated weekly/monthly and used in our visualizations.</p>"},{"location":"contributing/guidelines/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct:</p> <ul> <li>Be respectful and inclusive</li> <li>Focus on the technical merits of submissions</li> <li>Provide constructive feedback</li> <li>Maintain a positive and helpful environment</li> </ul>"},{"location":"contributing/guidelines/#attribution","title":"Attribution","text":"<p>We appreciate all contributions to Awesome-Virome. Contributors are recognized in the following ways:</p> <ul> <li>Listed in the Contributors section of the repository</li> <li>Acknowledged in release notes for significant contributions</li> <li>Credited in the changelog</li> </ul>"},{"location":"contributing/guidelines/#questions","title":"Questions?","text":"<p>If you have questions about contributing, please:</p> <ol> <li>Check the FAQ</li> <li>Ask in GitHub Discussions</li> <li>Open an issue labeled \"question\"</li> </ol> <p>Thank you for your contributions to the virome analysis community!</p>"},{"location":"contributing/updating-docs/","title":"Updating Documentation","text":"<p>This guide explains how to update the Awesome-Virome documentation.</p>"},{"location":"contributing/updating-docs/#prerequisites","title":"Prerequisites","text":"<ol> <li>Python 3.7+ installed</li> <li>Git installed</li> <li>Clone of the repository</li> </ol>"},{"location":"contributing/updating-docs/#setting-up-the-environment","title":"Setting Up the Environment","text":"<pre><code># Navigate to the mkdocs directory\ncd mkdocs\n\n# Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"contributing/updating-docs/#making-documentation-changes","title":"Making Documentation Changes","text":"<ol> <li>Edit Markdown files in the <code>docs/</code> directory</li> <li>Add new files as needed (remember to update navigation in <code>mkdocs.yml</code>)</li> <li>Test your changes locally:</li> </ol> <pre><code>mkdocs serve\n</code></pre> <ol> <li>View your changes at http://127.0.0.1:8000/</li> </ol>"},{"location":"contributing/updating-docs/#creating-new-versions","title":"Creating New Versions","text":"<p>We use mike for versioning:</p> <pre><code># Deploy a new version (e.g., 1.1.0)\nmike deploy 1.1.0\n\n# Update the 'latest' alias\nmike alias 1.1.0 latest\n\n# Set the default version\nmike set-default 1.1.0\n</code></pre>"},{"location":"contributing/updating-docs/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Commit your changes:</li> </ol> <pre><code>git add .\ngit commit -m \"Update documentation: [brief description]\"\n</code></pre> <ol> <li>Push to your fork:</li> </ol> <pre><code>git push origin your-branch-name\n</code></pre> <ol> <li>Create a pull request</li> </ol>"},{"location":"contributing/updating-docs/#documentation-structure","title":"Documentation Structure","text":"<ul> <li><code>docs/index.md</code> - Home page</li> <li><code>docs/intro/</code> - Introduction and getting started </li> <li><code>docs/tools/</code> - Tool documentation</li> <li><code>docs/api/</code> - API documentation</li> <li><code>docs/contributing/</code> - Contribution guidelines</li> </ul>"},{"location":"contributing/updating-docs/#style-guidelines","title":"Style Guidelines","text":"<ul> <li>Use Markdown headers appropriately (# for title, ## for sections)</li> <li>Include code examples when relevant</li> <li>Use relative links when linking to other documentation pages</li> <li>Use tables for presenting comparative information</li> <li>Include screenshots when helpful</li> </ul>"},{"location":"contributing/validation/","title":"Submission Validation Process","text":"<p>To maintain high quality data in the Awesome-Virome collection, all tool submissions undergo a comprehensive validation process. This page explains how submissions are validated and provides guidelines to help your submission pass validation.</p>"},{"location":"contributing/validation/#validation-overview","title":"Validation Overview","text":"<p>The validation process includes:</p> <ol> <li>Automated Validation: Initial checks performed by our validation system</li> <li>Manual Review: Human review of submissions that pass automated validation</li> <li>Feedback Process: Communication about issues or improvements needed</li> <li>Final Approval: Acceptance and integration into the collection</li> </ol>"},{"location":"contributing/validation/#automated-validation","title":"Automated Validation","text":""},{"location":"contributing/validation/#what-gets-validated","title":"What Gets Validated","text":"<p>Our automated system checks:</p> <ul> <li>Required Fields: Ensuring all required information is provided</li> <li>URL Accessibility: Verifying that the tool URL is accessible</li> <li>DOI/Citation Validity: Validating any provided DOIs or citations</li> <li>Description Quality: Analyzing the clarity and informativeness of descriptions</li> <li>Duplicate Detection: Checking for existing entries with the same name or URL</li> <li>Category Correctness: Verifying appropriate categorization</li> </ul>"},{"location":"contributing/validation/#validation-scoring","title":"Validation Scoring","text":"<p>Each submission receives a quality score (0-100) based on:</p> Component Weight Description Completeness 30% Presence of all required and recommended fields URL Validity 20% Accessibility and correctness of the provided URL Description Quality 25% Clarity, relevance, and informativeness Metadata Accuracy 15% Correctness of provided metadata (version, language, etc.) Citation Validity 10% Validity of provided DOIs or citations <p>Submissions must achieve a score of at least 70 to proceed to manual review.</p>"},{"location":"contributing/validation/#validation-process","title":"Validation Process","text":""},{"location":"contributing/validation/#step-1-initial-submission","title":"Step 1: Initial Submission","text":"<p>When you submit a new tool (via issue or pull request), the validation process begins automatically.</p>"},{"location":"contributing/validation/#step-2-automated-checks","title":"Step 2: Automated Checks","text":"<p>Our validation system performs the following checks:</p> <ol> <li>URL Check: The tool URL is tested to ensure it's accessible</li> <li>Required Fields Check: Verifies all required fields are provided</li> <li>Duplicate Check: Searches for existing entries with similar names or URLs</li> <li>DOI Validation: If a DOI is provided, it's checked for validity</li> <li>Description Analysis: Evaluates the description for clarity and relevance</li> <li>Repository Analysis: For GitHub/GitLab/Bitbucket repos, additional metadata is collected</li> </ol>"},{"location":"contributing/validation/#step-3-validation-report","title":"Step 3: Validation Report","text":"<p>After validation completes, you'll receive a comment with:</p> <ul> <li>Overall validation score</li> <li>Pass/fail status for each validation check</li> <li>Specific errors or warnings that need addressing</li> <li>Suggestions for improving your submission</li> </ul> <p>Example validation report:</p> <pre><code>## Validation Report for ToolName\n\nOverall Score: 85/100 \u2705\n\n### Validation Results:\n- Required Fields: \u2705 All required fields present\n- URL Validity: \u2705 URL is accessible\n- Duplicate Check: \u2705 No duplicates found\n- Description Quality: \u26a0\ufe0f Description could be more detailed\n- Repository Analysis: \u2705 GitHub metadata successfully collected\n\n### Suggestions:\n- Add more specific details about what the tool does\n- Consider including installation instructions\n- Add package manager information if available\n\nThis submission has passed validation and will be reviewed by a maintainer.\n</code></pre>"},{"location":"contributing/validation/#step-4-addressing-feedback","title":"Step 4: Addressing Feedback","text":"<p>If your submission receives a failing score or has errors:</p> <ol> <li>Review the validation report carefully</li> <li>Make the necessary changes to your submission</li> <li>The validation will run again automatically after your changes</li> </ol>"},{"location":"contributing/validation/#step-5-manual-review","title":"Step 5: Manual Review","text":"<p>Submissions that pass automated validation undergo manual review by a maintainer, who checks:</p> <ul> <li>Relevance to virome analysis</li> <li>Appropriate categorization</li> <li>Description accuracy and clarity</li> <li>Overall quality and usefulness</li> </ul>"},{"location":"contributing/validation/#step-6-final-decision","title":"Step 6: Final Decision","text":"<p>After manual review, your submission will either be:</p> <ul> <li>Approved: Integrated into the collection</li> <li>Requested Changes: Sent back with specific improvement requests</li> <li>Rejected: Declined with a clear explanation of why</li> </ul>"},{"location":"contributing/validation/#common-validation-issues","title":"Common Validation Issues","text":""},{"location":"contributing/validation/#url-validation-failures","title":"URL Validation Failures","text":"<p>Issue: The provided URL is not accessible or returns an error.</p> <p>Solution: - Verify the URL is correct and not missing components - Ensure the repository or website is public - Check if the tool has moved to a new location - For archived tools, provide an archive URL (e.g., Internet Archive)</p>"},{"location":"contributing/validation/#description-quality-issues","title":"Description Quality Issues","text":"<p>Issue: The description is too vague, too short, or lacks relevant information.</p> <p>Solution: - Ensure the description is at least 100 characters - Include specific functionality the tool provides - Mention what type of data it works with - Include unique features or advantages</p>"},{"location":"contributing/validation/#duplicate-detection","title":"Duplicate Detection","text":"<p>Issue: A tool with the same or very similar name already exists.</p> <p>Solution: - Check if you're submitting an updated version of an existing tool - Clarify the name if it's different from an existing tool - Add version information if it's a new version - Consider updating the existing entry instead</p>"},{"location":"contributing/validation/#category-mismatches","title":"Category Mismatches","text":"<p>Issue: The tool is placed in an inappropriate category.</p> <p>Solution: - Review the category definitions in the README - Consider the primary functionality of the tool - Place tools with multiple functions in the most relevant category - Suggest a new category if none of the existing ones fit</p>"},{"location":"contributing/validation/#example-of-a-good-submission","title":"Example of a Good Submission","text":"<p>Here's an example of a submission that would pass validation:</p> <pre><code>## Tool Information\n\n- **Name**: ViralMSA\n- **URL**: https://github.com/niemasd/ViralMSA\n- **Description**: A Python tool for viral multiple sequence alignment using various read mappers. It's optimized for viral genome analysis and supports multiple reference genomes.\n- **Category**: Sequence Analysis\n- **Subcategory**: Multiple Sequence Alignment\n- **Installation**: pip install viralmsa\n- **Language**: Python\n- **Version**: v1.1.2 (2023-02-15)\n- **License**: GNU GPL v3.0\n- **Paper DOI**: 10.1093/bioinformatics/btaa743\n</code></pre> <p>This submission includes all required fields, provides comprehensive information, and correctly categorizes the tool.</p>"},{"location":"contributing/validation/#validation-tools","title":"Validation Tools","text":"<p>For contributors who want to validate submissions before submitting:</p> <ul> <li>Our validation script is available in the repository at <code>scripts/tool_validator.py</code></li> <li>You can run it locally to check your submission before creating an issue or PR</li> <li>Example usage: <code>python scripts/tool_validator.py --name \"ToolName\" --url \"https://example.com/tool\" --description \"Tool description\" --category \"Category\"</code></li> </ul>"},{"location":"contributing/validation/#questions-about-validation","title":"Questions About Validation","text":"<p>If you have questions about the validation process:</p> <ul> <li>Check the validation FAQ</li> <li>Ask in GitHub Discussions</li> <li>Contact the maintainers through the repository</li> </ul> <p>We appreciate your contributions to Awesome-Virome and are committed to maintaining a high-quality collection of virome analysis tools.</p>"},{"location":"intro/","title":"Introduction to Awesome-Virome","text":"<p>Welcome to the official documentation for Awesome-Virome, a curated list of software, tools, and databases useful for virome analysis, including phages, viruses, and their interactions with hosts.</p>"},{"location":"intro/#what-is-virome-analysis","title":"What is Virome Analysis?","text":"<p>Virome analysis involves studying the collection of viruses (including bacteriophages) in a specific environment such as the human gut, soil, or oceans. These analyses typically include:</p> <ol> <li>Identifying viral sequences in metagenomic data</li> <li>Classifying viruses and predicting their hosts</li> <li>Assembling and annotating viral genomes</li> <li>Analyzing viral diversity and evolution</li> <li>Studying virus-host interactions and functional potential</li> </ol>"},{"location":"intro/#how-to-use-this-documentation","title":"How to Use This Documentation","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Getting Started: Basic information about virome analysis and how to use this repository</li> <li>Tools: Detailed information about the tools included in Awesome-Virome</li> <li>API Reference: Documentation for the programmatic API</li> <li>Contributing: Guidelines for contributing to Awesome-Virome</li> </ul> <p>You can navigate through the documentation using the navigation bar. If you're looking for a specific tool or topic, you can use the search function at the top of the page.</p>"},{"location":"intro/#key-features","title":"Key Features","text":"<p>Awesome-Virome offers several unique features that enhance its value as a resource for the viral bioinformatics community:</p>"},{"location":"intro/#interactive-visualizations","title":"Interactive Visualizations","text":"<ul> <li>Dynamic network graph showing tool relationships and connections</li> <li>Citation analytics with growth trends and impact metrics</li> <li>Tool categorization treemap for understanding the ecosystem</li> <li>Timeline visualization showing field development over time</li> </ul>"},{"location":"intro/#enhanced-metadata-collection","title":"Enhanced Metadata Collection","text":"<ul> <li>Automated metadata enrichment from GitHub, GitLab and Bitbucket</li> <li>Detailed repository statistics including stars, forks, and languages</li> <li>License information and release history tracking</li> <li>Programming language distribution analysis</li> </ul>"},{"location":"intro/#community-contributions","title":"Community Contributions","text":"<ul> <li>Standardized issue templates for tool additions and updates</li> <li>Automated workflows for data validation and site health checks</li> <li>Detailed contribution guidelines for consistent data entry</li> <li>Regular updates to ensure tool information remains current</li> </ul>"},{"location":"intro/#data-access-options","title":"Data Access Options","text":"<ul> <li>Web interface for browsing and searching tools</li> <li>Interactive dashboard for visual exploration</li> <li>RESTful API for programmatic access</li> <li>Markdown files for simple text-based access</li> </ul>"},{"location":"intro/#popular-packages","title":"Popular Packages","text":"<p>Ranked by GitHub stars:</p> <ol> <li>AlphaFold-Multimer - \u2b50 13320 stars</li> <li>CovidMD - \u2b50 2365 stars</li> <li>BLAST+DIAMOND - \u2b50 1114 stars</li> <li>coronaSPAdes - \u2b50 797 stars</li> <li>coronaSPAdes/metaviralSPAdes - \u2b50 797 stars</li> </ol>"},{"location":"intro/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the Typical Workflows page to learn how to use the tools in Awesome-Virome</li> <li>Explore the Interactive Dashboard to visualize the tool ecosystem</li> <li>Browse the Tools section to find tools for your specific needs</li> </ul>"},{"location":"intro/versioning/","title":"Documentation Versioning","text":"<p>Awesome-Virome documentation uses versioning to maintain documentation for different versions of the project. This page explains how versioning works and how to navigate between different versions.</p>"},{"location":"intro/versioning/#why-version-documentation","title":"Why Version Documentation?","text":"<p>Documentation versioning provides several benefits:</p> <ol> <li>Historical accuracy: Users can access documentation that corresponds to the specific version of the project they're using</li> <li>Backward compatibility: Changes or new features don't break documentation for users on older versions</li> <li>Upgrade planning: Users can see what's changed between versions before upgrading</li> <li>Feature exploration: Users can preview upcoming features in the latest version</li> </ol>"},{"location":"intro/versioning/#how-versioning-works","title":"How Versioning Works","text":"<p>The Awesome-Virome documentation is organized into versioned snapshots:</p> <ul> <li>Latest (Unreleased): Contains the most up-to-date documentation, including features not yet released</li> <li>Versioned Releases: Snapshots of documentation corresponding to specific project releases (e.g., 1.0.0)</li> </ul>"},{"location":"intro/versioning/#navigating-between-versions","title":"Navigating Between Versions","text":"<p>You can easily switch between documentation versions using the version selector in the header. The version selector shows all available versions of the documentation.</p>"},{"location":"intro/versioning/#current-versions","title":"Current Versions","text":"Version Release Date Description Latest Unreleased Most up-to-date documentation, including unreleased features 1.0.0 May 3, 2025 Initial version of the comprehensive documentation"},{"location":"intro/versioning/#version-specific-features","title":"Version-Specific Features","text":"<p>Each version may have different documentation features:</p>"},{"location":"intro/versioning/#latest-unreleased","title":"Latest (Unreleased)","text":"<ul> <li>Complete Tool Selection Guide</li> <li>Updated API endpoints</li> <li>Additional workflow examples</li> </ul>"},{"location":"intro/versioning/#100","title":"1.0.0","text":"<ul> <li>Initial comprehensive documentation</li> <li>Core tool references</li> <li>Basic API documentation</li> <li>Contribution guidelines</li> </ul>"},{"location":"intro/versioning/#contributing-to-documentation","title":"Contributing to Documentation","text":"<p>When contributing to the documentation, your changes will be applied to the latest (unreleased) version. When a new version is released, a snapshot of the current state will be created as a new versioned documentation set.</p> <p>See the contribution guidelines for more information on how to contribute to the documentation.</p>"},{"location":"intro/workflows/","title":"Typical Virome Analysis Workflows","text":"<p>This page outlines common workflows for virome analysis, showcasing how different tools from the Awesome-Virome collection can be combined to achieve specific research goals.</p>"},{"location":"intro/workflows/#basic-virome-analysis-workflow","title":"Basic Virome Analysis Workflow","text":"<p>For general metagenomic virome analysis, this basic workflow provides a solid foundation:</p> Raw Sequencing Data \u2192 Quality Control \u2192 Assembly \u2192 Viral Contig Identification Functional Annotation \u2190 Host Prediction \u2190 Taxonomic Classification \u2190 Quality Assessment"},{"location":"intro/workflows/#step-by-step-guide","title":"Step-by-Step Guide","text":"<ol> <li>Quality Control of Metagenomic Reads <ul> <li>Tools: Standard bioinformatics QC tools (Trimmomatic, FastQC, etc.)</li> <li>Purpose: Remove low-quality reads, adapters, and contaminants</li> </ul> </li> <li>Assembly of Contigs <ul> <li>Tools: SPAdes, MEGAHIT</li> <li>Purpose: Assemble short reads into longer contiguous sequences (contigs)</li> </ul> </li> <li>Identification of Viral Contigs <ul> <li>Tools: VirSorter2, VIBRANT, geNomad</li> <li>Purpose: Identify which contigs are of viral origin</li> </ul> </li> <li>Quality Assessment <ul> <li>Tools: CheckV</li> <li>Purpose: Assess the completeness and quality of viral genomes</li> </ul> </li> <li>Taxonomic Classification <ul> <li>Tools: vConTACT2, PhaGCN</li> <li>Purpose: Assign taxonomy to viral sequences</li> </ul> </li> <li>Host Prediction <ul> <li>Tools: iPHoP, CHERRY</li> <li>Purpose: Predict the bacterial hosts of phages</li> </ul> </li> <li>Functional Annotation <ul> <li>Tools: Pharokka, DRAMv</li> <li>Purpose: Annotate genes and predict functions</li> </ul> </li> </ol>"},{"location":"intro/workflows/#rna-virus-discovery-workflow","title":"RNA Virus Discovery Workflow","text":"<p>For specifically focusing on RNA viruses in your samples:</p> Raw RNA-Seq Data \u2192 Quality Control \u2192 Assembly \u2192 RdRp Search Phylogenetic Analysis \u2190 Genome Annotation \u2190 RNA Virus Verification"},{"location":"intro/workflows/#key-tools-for-rna-virus-analysis","title":"Key Tools for RNA Virus Analysis","text":"<ol> <li>RNA Virus Detection <ul> <li>Tools: palmID, RdRp-scan, metaviralSPAdes-RNA</li> <li>Purpose: Identify RNA virus sequences by detecting conserved RdRp domains</li> </ul> </li> <li>RNA Virus Annotation <ul> <li>Tools: VirMine-RNA</li> <li>Purpose: Functional annotation specific to RNA viral genomes</li> </ul> </li> </ol>"},{"location":"intro/workflows/#prophage-identification-workflow","title":"Prophage Identification Workflow","text":"<p>For identifying integrated prophages in bacterial genomes:</p> Bacterial Genome \u2192 Prophage Detection \u2192 Prophage Excision Host-Prophage Interaction Analysis \u2190 Prophage Annotation \u2190 Prophage Verification"},{"location":"intro/workflows/#key-tools-for-prophage-analysis","title":"Key Tools for Prophage Analysis","text":"<ol> <li>Prophage Detection <ul> <li>Tools: PhiSpy, Phigaro, PHASTER</li> <li>Purpose: Identify integrated viral sequences within bacterial genomes</li> </ul> </li> <li>Prophage Analysis <ul> <li>Tools: viralintegration, hafeZ</li> <li>Purpose: Analyze integration sites and characterize prophage regions</li> </ul> </li> </ol>"},{"location":"intro/workflows/#advanced-workflows","title":"Advanced Workflows","text":"<p>These more specialized workflows address specific research questions:</p>"},{"location":"intro/workflows/#viral-quasispecies-analysis","title":"Viral Quasispecies Analysis","text":"<p>For analyzing viral population diversity within a sample:</p> <ol> <li>Strain Reconstruction <ul> <li>Tools: VStrains, COBRA</li> <li>Purpose: Reconstruct individual viral strains from complex metagenomic samples</li> </ul> </li> <li>Quasispecies Analysis <ul> <li>Tools: ShoRAH, CliqueSNV</li> <li>Purpose: Analyze genetic variation and population dynamics within viral communities</li> </ul> </li> </ol>"},{"location":"intro/workflows/#virome-host-interaction-analysis","title":"Virome-Host Interaction Analysis","text":"<p>For studying how viruses interact with their hosts:</p> <ol> <li>CRISPR Analysis <ul> <li>Tools: SpacePHARER, CrisprOpenDB</li> <li>Purpose: Identify CRISPR spacers and predict virus-host relationships</li> </ul> </li> <li>Protein-Protein Interactions <ul> <li>Tools: DeepVHPPI</li> <li>Purpose: Predict interactions between viral and host proteins</li> </ul> </li> </ol>"},{"location":"intro/workflows/#recommended-tools-by-category","title":"Recommended Tools by Category","text":"<p>For newcomers to virome analysis, here are some recommended starting points:</p> <ol> <li>Viral identification <ul> <li>Tools: VirSorter2, VIBRANT, geNomad</li> <li>Difficulty: Beginner to Intermediate</li> <li>Computational requirements: Moderate</li> </ul> </li> <li>Host prediction <ul> <li>Tools: iPHoP, CHERRY</li> <li>Difficulty: Intermediate</li> <li>Computational requirements: Moderate to High</li> </ul> </li> <li>Genome annotation <ul> <li>Tools: Pharokka, DRAMv</li> <li>Difficulty: Beginner</li> <li>Computational requirements: Low to Moderate</li> </ul> </li> <li>Taxonomy assignment <ul> <li>Tools: vConTACT2, PhaGCN</li> <li>Difficulty: Intermediate</li> <li>Computational requirements: Moderate</li> </ul> </li> <li>Quality control <ul> <li>Tools: CheckV</li> <li>Difficulty: Beginner</li> <li>Computational requirements: Low</li> </ul> </li> </ol>"},{"location":"intro/workflows/#next-steps","title":"Next Steps","text":"<ol> <li>Explore Tools <ul> <li>Visit the Tools Overview section for detailed information about each tool</li> <li>Check the Selection Guide to find the best tools for your specific needs</li> </ul> </li> <li>Learn About Data Access <ul> <li>Review the API Reference to learn how to access the Awesome-Virome database programmatically</li> <li>See API Examples for code snippets in Python, R, and JavaScript</li> </ul> </li> <li>Join the Community <ul> <li>Contribute to the project by following our Contribution Guidelines</li> <li>Explore the GitHub repository for the latest updates</li> </ul> </li> </ol>"},{"location":"tools/host-prediction/","title":"Host Prediction Tools","text":"<p>Host prediction tools help determine the bacterial hosts of viral sequences, particularly phages. This is crucial for understanding phage-host interactions, designing phage therapy, and interpreting the role of phages in microbial communities.</p>"},{"location":"tools/host-prediction/#key-host-prediction-tools","title":"Key Host Prediction Tools","text":""},{"location":"tools/host-prediction/#iphop","title":"iPHoP","text":"<p>iPHoP (Integrated Prediction of Host and Phage) is a state-of-the-art tool for predicting phage-host interactions at various taxonomic levels.</p> <ul> <li>Version: v1.3.3, 2023</li> <li>Installation: <code>conda install -c bioconda iphop</code></li> <li>GitHub Stars: Hosted on Bitbucket</li> <li>Key Features:</li> <li>Integrates multiple prediction methods</li> <li>Assigns confidence scores to predictions</li> <li>Works at multiple taxonomic levels</li> <li>Pre-trained with a comprehensive database</li> <li>Optimized for metagenomic data</li> </ul> <p>Usage Example: <pre><code>iphop predict --fa_file input_phages.fasta --out_dir iphop_results\n</code></pre></p>"},{"location":"tools/host-prediction/#cherry","title":"CHERRY","text":"<p>CHERRY (v1.0, 2022) uses deep learning for phage host prediction.</p> <ul> <li>GitHub Stars: \u2b50 24</li> <li>Installation: <code>git clone https://github.com/KennthShang/CHERRY.git</code></li> <li>Key Features:</li> <li>Uses deep learning (CNN and LSTM)</li> <li>Pre-trained with thousands of phage-host pairs</li> <li>Works well with novel phages</li> <li>Can make predictions at different taxonomic levels</li> </ul> <p>How It Works: CHERRY uses a combination of convolutional neural networks and LSTM to learn sequence patterns indicative of phage-host interactions.</p>"},{"location":"tools/host-prediction/#virhostmatcher-net","title":"VirHostMatcher-Net","text":"<p>VirHostMatcher-Net is a network-based virus-host prediction tool.</p> <ul> <li>GitHub Stars: \u2b50 21</li> <li>Key Features:</li> <li>Uses both oligonucleotide frequencies and protein alignment</li> <li>Incorporates network-based information</li> <li>Achieves high accuracy at genus level</li> <li>Works well with novel viruses</li> </ul>"},{"location":"tools/host-prediction/#wish","title":"WIsH","text":"<p>WIsH (Who Is the Host) predicts phage-host interactions using genome homology.</p> <ul> <li>Key Features:</li> <li>Uses Markov models of genomic composition</li> <li>Fast and lightweight</li> <li>Good performance on well-characterized host taxa</li> <li>Works well with complete genomes</li> </ul>"},{"location":"tools/host-prediction/#additional-host-prediction-tools","title":"Additional Host Prediction Tools","text":""},{"location":"tools/host-prediction/#host-prediction-based-on-sequence-similarity","title":"Host Prediction Based on Sequence Similarity","text":"<ul> <li>HostPhinder: K-mer based phage host prediction</li> <li>PHP: Phage host prediction tool</li> <li>PHPGCA: Similarity graphs for phage-host prediction</li> </ul>"},{"location":"tools/host-prediction/#host-prediction-based-on-crispr-spacers","title":"Host Prediction Based on CRISPR Spacers","text":"<ul> <li>CrisprOpenDB: CRISPR spacer database for phage-host prediction</li> <li>SpacePHARER: CRISPR spacer phage-host pair finder</li> </ul>"},{"location":"tools/host-prediction/#host-prediction-based-on-machine-learning","title":"Host Prediction Based on Machine Learning","text":"<ul> <li>DeepHost: CNN for phage host prediction</li> <li>HostG: Graph convolutional network for phage host prediction</li> <li>PhageHostLearn: Machine learning for phage-host prediction</li> </ul>"},{"location":"tools/host-prediction/#comparison-table","title":"Comparison Table","text":"Tool Method Taxonomic Level Strengths Limitations iPHoP Integrated Kingdom to Strain Combines multiple methods, high accuracy Resource intensive CHERRY Deep Learning Genus, Species Works well with novel phages Needs substantial computing power VirHostMatcher-Net Network-based Genus Good accuracy at genus level Limited to specific host taxa WIsH Markov Models Species Fast, lightweight Better with complete genomes HostPhinder K-mer Species Simple, efficient Limited to known hosts CrisprOpenDB CRISPR spacers Strain High specificity Limited coverage"},{"location":"tools/host-prediction/#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Based on published benchmarks and community experience:</p> <ul> <li>Genus level prediction:</li> <li>VirHostMatcher-Net: ~75-80% accuracy</li> <li>iPHoP: ~70-75% accuracy</li> <li> <p>CHERRY: ~65-70% accuracy</p> </li> <li> <p>Species level prediction:</p> </li> <li>iPHoP: ~60-65% accuracy</li> <li>CHERRY: ~55-60% accuracy</li> <li>WIsH: ~50-55% accuracy</li> </ul> <p>Note: Actual performance varies based on input data quality, completeness, and taxonomic coverage of reference databases.</p>"},{"location":"tools/host-prediction/#recommended-workflow","title":"Recommended Workflow","text":"<p>For optimal host prediction results, we recommend a multi-tool approach:</p> <ol> <li>Start with iPHoP:</li> <li>Comprehensive predictions with confidence scores</li> <li> <p>Good starting point for most analyses</p> </li> <li> <p>Complement with specialized tools:</p> </li> <li>For well-studied hosts: WIsH and HostPhinder</li> <li>For novel phages: CHERRY and VirHostMatcher-Net</li> <li> <p>If CRISPR data is available: CrisprOpenDB and SpacePHARER</p> </li> <li> <p>Consensus approach:</p> </li> <li>Take predictions agreed upon by multiple methods</li> <li>Weight predictions by confidence scores when available</li> <li>Consider biological context (e.g., environment of isolation)</li> </ol>"},{"location":"tools/host-prediction/#future-directions","title":"Future Directions","text":"<p>The field of phage host prediction is rapidly evolving:</p> <ul> <li>Integration of metagenomic co-occurrence data</li> <li>Improved deep learning models</li> <li>Single-cell and spatial information integration</li> <li>Expanded reference databases</li> </ul>"},{"location":"tools/host-prediction/#further-reading","title":"Further Reading","text":"<ul> <li>Benchmarking phage-host prediction tools</li> <li>Computational approaches for phage host prediction</li> <li>Challenges in phage-host prediction</li> </ul>"},{"location":"tools/overview/","title":"Virome Analysis Tools","text":"<p>Awesome-Virome contains a comprehensive collection of tools for various aspects of virome analysis. This page provides an overview of the tool categories and helps you navigate to the specific tools you need.</p>"},{"location":"tools/overview/#tool-categories","title":"Tool Categories","text":"<p>The tools are organized into the following main categories:</p> Category Description Key Tools Virus and Phage Identification Tools for identifying viral sequences in metagenomic data VirSorter2, VIBRANT, geNomad Host Prediction Tools for predicting the bacterial hosts of phages iPHoP, CHERRY, WIsH Genome Analysis Tools for assembling, annotating, and analyzing viral genomes Pharokka, DRAMv, MetaProdigal Taxonomy Tools for taxonomic classification of viral sequences vConTACT2, PhaGCN, VIPtree Databases Reference databases for viral sequences NCBI RefSeq, ICTV VMR, pVOGs Functional Analysis Tools for functional annotation and analysis BACPHLIP, PHACTS, PHROGs Sequence Analysis Tools for sequence alignment and translation ViralMSA, pygenetic_code Specialized Analysis Tools for specific types of analysis DeepVHPPI, vAMPirus, SpacePHARER"},{"location":"tools/overview/#virus-and-phage-identification","title":"Virus and Phage Identification","text":"<p>Tools for identifying viral sequences in metagenomic data:</p>"},{"location":"tools/overview/#metagenome-analysis","title":"Metagenome Analysis","text":"<ul> <li>VirSorter2 - Random forest classifier for virus detection</li> <li>VIBRANT - Virus identification by combining boundary detection with annotation</li> <li>geNomad - Tool for identifying viral sequences, including proviruses</li> <li>DeepVirFinder - Neural network approach for viral contig identification</li> </ul>"},{"location":"tools/overview/#integrated-viruses","title":"Integrated Viruses","text":"<ul> <li>PhiSpy - Prophage identification combining similarity and composition-based approaches</li> <li>Phigaro - Prophage prediction tool</li> <li>viralintegration - Nextflow pipeline for detecting viral integration sites</li> </ul>"},{"location":"tools/overview/#rna-virus-identification","title":"RNA Virus Identification","text":"<ul> <li>palmID - RNA virus RdRp search tool with R interface</li> <li>RdRp-scan - Search against the RdRp database</li> <li>metaviralSPAdes-RNA - RNA virus detection module</li> </ul>"},{"location":"tools/overview/#host-prediction","title":"Host Prediction","text":"<p>Tools for predicting the bacterial hosts of phages:</p> <ul> <li>iPHoP - Integrated approach for phage host prediction</li> <li>CHERRY - Deep learning for phage host prediction</li> <li>VirHostMatcher-Net - Network-based virus-host prediction</li> <li>WIsH - Phage-host prediction using genome homology</li> </ul>"},{"location":"tools/overview/#genome-analysis","title":"Genome Analysis","text":"<p>Tools for assembling, annotating, and analyzing viral genomes:</p>"},{"location":"tools/overview/#genome-annotation","title":"Genome Annotation","text":"<ul> <li>Pharokka - Rapid phage annotation tool</li> <li>DRAMv - Distilling and refining annotation of metabolism for phages</li> </ul>"},{"location":"tools/overview/#genome-assembly","title":"Genome Assembly","text":"<ul> <li>metaviralSPAdes - Assembler for viruses from metagenomic data</li> <li>coronaSPAdes - HMM-synteny guided assembly for all viruses</li> </ul>"},{"location":"tools/overview/#genome-completeness","title":"Genome Completeness","text":"<ul> <li>CheckV - Quality assessment for viral genomes</li> <li>viralComplete - Tool for checking viral genome completeness</li> </ul>"},{"location":"tools/overview/#taxonomy","title":"Taxonomy","text":"<p>Tools for taxonomic classification of viral sequences:</p> <ul> <li>vConTACT2 - Viral taxonomy based on protein clusters</li> <li>PhaGCN - Graph convolutional network for phage taxonomy</li> <li>VIPtree - Viral proteomic tree-based classification</li> <li>ViPTree - Viral genome-based phylogenetic tree construction</li> </ul>"},{"location":"tools/overview/#databases","title":"Databases","text":"<p>Reference databases for viral sequences:</p> <ul> <li>NCBI Viral RefSeq - Reference viral genomes</li> <li>ICTV VMR - ICTV Virus Metadata Resource</li> <li>pVOGs - Prokaryotic Virus Orthologous Groups</li> <li>IMG/VR - Integrated database of viral sequences from metagenomes</li> <li>PhagesDB - Database of mycobacteriophage genomics</li> </ul>"},{"location":"tools/overview/#functional-analysis","title":"Functional Analysis","text":"<p>Tools for functional annotation and analysis:</p> <ul> <li>BACPHLIP - Bacteriophage lifestyle prediction</li> <li>PHACTS - Phage Classification Tool Set</li> <li>PHROGs - Phage Orthologous Groups annotation</li> <li>pVOGS - Database for virus orthologous groups</li> <li>PhageTerm - Phage termini and packaging identification</li> </ul>"},{"location":"tools/overview/#sequence-analysis","title":"Sequence Analysis","text":"<p>Tools for sequence alignment and translation:</p> <ul> <li>ViralMSA - Reference-guided multiple sequence alignment for viral genomes</li> <li>pygenetic_code - Python package for genetic code manipulation</li> <li>VIGOR - Viral genome annotation</li> <li>VGAS - Viral genome annotation system</li> <li>VADR - Viral Annotation DefineR for sequence annotation</li> </ul>"},{"location":"tools/overview/#specialized-analysis","title":"Specialized Analysis","text":"<p>Tools for specific types of analysis:</p> <ul> <li>DeepVHPPI - Prediction of virus-host protein-protein interactions</li> <li>vAMPirus - Processing viral amplicon data</li> <li>SpacePHARER - CRISPR-Cas target prediction</li> <li>HoloVir - Viral diversity in metagenomic datasets</li> <li>VirSorter - Mining viral signals from microbial genomes</li> </ul>"},{"location":"tools/overview/#top-packages-by-category","title":"Top Packages by Category","text":"<p>Here are the most starred packages in key categories:</p>"},{"location":"tools/overview/#virus-and-phage-identification_1","title":"Virus and Phage Identification","text":"<ol> <li>BLAST+DIAMOND - \u2b50 1114 stars</li> <li>geNomad - \u2b50 219 stars</li> <li>VIBRANT - \u2b50 159 stars</li> </ol>"},{"location":"tools/overview/#host-prediction_1","title":"Host Prediction","text":"<ol> <li>CHERRY - \u2b50 24 stars</li> <li>VirHostMatcher-Net - \u2b50 21 stars</li> <li>DeepHost - \u2b50 17 stars</li> </ol>"},{"location":"tools/overview/#genome-analysis_1","title":"Genome Analysis","text":"<ol> <li>metaviralSPAdes - \u2b50 797 stars</li> <li>Prodigal/MetaProdigal - \u2b50 471 stars</li> <li>Pharokka - \u2b50 158 stars</li> </ol>"},{"location":"tools/overview/#tool-selection-guide","title":"Tool Selection Guide","text":"<p>Not sure which tool to use? Check out our Selection Guide to find the right tools for your specific research needs.</p>"},{"location":"tools/selection-guide/","title":"Tool Selection Guide","text":"<p>This guide helps you choose the right tools for your virome analysis workflow based on your specific research questions and sample types.</p>"},{"location":"tools/selection-guide/#key-decision-factors","title":"Key Decision Factors","text":"<p>When selecting tools for virome analysis, consider these key factors:</p> <ol> <li>Research Objective - What is your primary research question?</li> <li>Sample Type - What environment does your sample come from?</li> <li>Computational Resources - What computing resources do you have available?</li> <li>Specific Requirements - Do you have special needs like sensitivity, runtime, or database dependencies?</li> </ol>"},{"location":"tools/selection-guide/#decision-flowchart","title":"Decision Flowchart","text":"graph TD     A[Start] --&gt; B{What is your primary objective?}     B --&gt;|Virus Detection| C[Identification Tools]     B --&gt;|Host Prediction| D[Host Prediction Tools]     B --&gt;|Genome Assembly| E[Assembly Tools]     B --&gt;|Annotation| F[Annotation Tools]     B --&gt;|Taxonomy| G[Taxonomy Tools]      C --&gt; C1{Sample type?}     C1 --&gt;|Metagenome| C2[VirSorter2, VIBRANT, DeepVirFinder]     C1 --&gt;|Transcriptome| C3[RNA-Virus-Flow, VirMine-RNA]     C1 --&gt;|Single cell| C4[scVIRseq, scViroCap]      D --&gt; D1{Host domain?}     D1 --&gt;|Bacteria| D2[WIsH, iPHoP, PHIST]     D1 --&gt;|Eukaryotes| D3[DeepHost, VirHostMatcher-Net]      D1 --&gt;|Any| D4[VirHostMatcher, Host Prediction]"},{"location":"tools/selection-guide/#tool-selection-by-category","title":"Tool Selection by Category","text":""},{"location":"tools/selection-guide/#virus-identification","title":"Virus Identification","text":"Tool Strengths Limitations Best For VirSorter2 Sensitive, handles diverse viral sequences Computationally intensive Metagenomes with unknown viruses VIBRANT Integrated annotation, good visualization Limited to specific viral groups Phage-focused studies DeepVirFinder Works well on short contigs Requires GPU for best performance Fragmented assemblies Seeker Ultra-fast, works on reads Lower accuracy than contig-based tools Quick screening"},{"location":"tools/selection-guide/#host-prediction","title":"Host Prediction","text":"Tool Strengths Limitations Best For WIsH Fast, accurate for bacteria Requires reference genomes Phage-host studies iPHoP Multi-method approach Computationally intensive When accuracy is critical PHIST Simple k-mer based May miss distant relationships Quick screening VirHostMatcher-Net Works across domains Requires training Cross-domain studies"},{"location":"tools/selection-guide/#genome-assembly","title":"Genome Assembly","text":"Tool Strengths Limitations Best For metaviralSPAdes Specifically for viral metagenomes Memory intensive Complex viral communities metaPhage Optimized for phages Limited to phages Bacteriophage studies PHAMB Good for retrieving viral contigs Requires good depth Well-sequenced samples"},{"location":"tools/selection-guide/#computational-requirements","title":"Computational Requirements","text":"Resource Level Recommended Tools Low (Laptop) Seeker, PHIST, VirHostMatcher Medium (Workstation) VirSorter2, VIBRANT, WIsH High (Server/Cluster) metaviralSPAdes, iPHoP, PHAMB Cloud-optimized IDseq, CZ ID, Jovian"},{"location":"tools/selection-guide/#recent-additions-2024-2025","title":"Recent Additions (2024-2025)","text":"<p>These tools have been added recently and show promising results:</p> <ul> <li>DePhT - Novel approach to detect prophages with high accuracy</li> <li>GraViTy - Graph-based virus taxonomy assignment tool</li> <li>ViroProfiler - Integrated workflow for comprehensive virome profiling</li> <li>ViralWasm - Web Assembly tools for client-side viral analysis</li> <li>CHERRY - AI-based identification and classification of animal viruses</li> </ul>"},{"location":"tools/selection-guide/#version-compatibility","title":"Version Compatibility","text":"Tool Python Version Dependencies VirSorter2 3.6+ scikit-learn, Tensorflow VIBRANT 3.5+ scikit-learn, prodigal iPHoP 3.7+ mash, pytorch, diamond MetaviralSPAdes Any C++17 compiler Pharokka 3.8+ BLAST+, mash, prodigal"},{"location":"tools/selection-guide/#further-resources","title":"Further Resources","text":"<ul> <li>Check the GitHub repository for the most up-to-date tools and resources</li> <li>Explore our Tools Overview for a complete listing of all available tools</li> <li>Visit the Virus Identification and Host Prediction pages for more detailed information</li> </ul>"},{"location":"tools/virus-identification/","title":"Virus and Phage Identification Tools","text":"<p>This section details tools for identifying viral sequences in metagenomic data, including tools for general metagenome analysis, integrated viruses (prophages), and RNA virus identification.</p>"},{"location":"tools/virus-identification/#metagenome-analysis","title":"Metagenome Analysis","text":"<p>Tools for identifying viral sequences in mixed metagenomic data:</p>"},{"location":"tools/virus-identification/#virsorter2","title":"VirSorter2","text":"<p>VirSorter2 is a multi-classifier, scalable pipeline for identifying viral sequences from diverse environments.</p> <ul> <li>Version: v2.2.4, 2023</li> <li>Installation: <code>conda install -c bioconda virsorter=2</code></li> <li>Language: Python</li> <li>Key Features:</li> <li>Random forest classifiers trained on diverse viral genomes</li> <li>Can detect novel viral sequences with limited homology to reference databases</li> <li>Scalable to large metagenomic datasets</li> <li>Improved sensitivity compared to the original VirSorter</li> </ul> <p>Usage Example: <pre><code>virsorter run -w output_dir -i input_contigs.fa --min-length 1000 --include-groups dsDNAphage,ssDNA,RNA -j 4 all\n</code></pre></p>"},{"location":"tools/virus-identification/#vibrant","title":"VIBRANT","text":"<p>VIBRANT (Virus Identification By iteRative ANnoTation) identifies viral contigs from metagenomic data.</p> <ul> <li>GitHub Stars: \u2b50 159</li> <li>Key Features:</li> <li>Combines boundary detection with annotation</li> <li>Identifies viruses without reliance on sequence similarity</li> <li>Includes metabolic and auxiliary gene annotation</li> <li>Can extract sequences directly from metagenomic assemblies</li> </ul> <p>How It Works: VIBRANT uses multiple neural networks to scan for viral signatures, identifies viral protein boundaries, and performs annotation for identified viral sequences.</p>"},{"location":"tools/virus-identification/#genomad","title":"geNomad","text":"<p>geNomad (v1.6.0, 2023) is a tool for identifying viral sequences, including integrated proviruses.</p> <ul> <li>GitHub Stars: \u2b50 219</li> <li>Key Features:</li> <li>Joint classification of viral and plasmid sequences</li> <li>Annotation of viral genes with protein families</li> <li>Extraction of genomic features</li> <li>Integrates both marker and gene content-based approaches</li> </ul>"},{"location":"tools/virus-identification/#deepvirfinder","title":"DeepVirFinder","text":"<p>DeepVirFinder uses deep learning to identify viral sequences in metagenomic data.</p> <ul> <li>Key Features:</li> <li>Neural network approach</li> <li>Trained on both prokaryotic and viral genomes</li> <li>Performs well on short contigs</li> <li>Works on novel viruses with limited similarity to references</li> </ul>"},{"location":"tools/virus-identification/#integrated-viruses","title":"Integrated Viruses","text":"<p>Tools specifically designed to identify prophages (viruses integrated into bacterial genomes):</p>"},{"location":"tools/virus-identification/#phispy","title":"PhiSpy","text":"<p>PhiSpy (v4.2.23, 2023) identifies prophages in bacterial genomes using a combination of similarity and composition-based approaches.</p> <ul> <li>Installation: <code>pip install phispy</code> or <code>conda install -c bioconda phispy</code></li> <li>Key Features:</li> <li>Identifies prophages in both complete and draft genomes</li> <li>Uses multiple measurements: GC skew, coding density, strand switching</li> <li>Combines similarity and composition-based features</li> <li>Outputs prophage coordinates and sequences</li> </ul> <p>Usage Example: <pre><code>PhiSpy.py -o output_dir -t data/trainers/Generic_taxonomy.pt input_genome.fasta\n</code></pre></p>"},{"location":"tools/virus-identification/#phigaro","title":"Phigaro","text":"<p>Phigaro is a tool for prophage prediction that performs well on both complete and draft genomes.</p> <ul> <li>Key Features:</li> <li>High-throughput prophage prediction</li> <li>Works with both complete genomes and metagenomic contigs</li> <li>Identifies partial prophages</li> <li>Outputs prophage coordinates and gene annotations</li> </ul>"},{"location":"tools/virus-identification/#viralintegration","title":"viralintegration","text":"<p>viralintegration is a Nextflow pipeline for detecting viral integration sites in host genomes.</p> <ul> <li>Key Features:</li> <li>Identifies viral integration in both germline and somatic contexts</li> <li>Works with both DNA and RNA sequencing data</li> <li>Supports multiple alignment strategies</li> <li>Part of the nf-core collection of pipelines</li> </ul>"},{"location":"tools/virus-identification/#rna-virus-identification","title":"RNA Virus Identification","text":"<p>Tools specifically for identifying RNA viruses:</p>"},{"location":"tools/virus-identification/#palmid","title":"palmID","text":"<p>palmID is an RNA virus RdRp (RNA-dependent RNA polymerase) search tool with an R interface.</p> <ul> <li>Key Features:</li> <li>Identifies RNA viruses through their RdRp sequences</li> <li>Interactive visualization of phylogenetic placement</li> <li>Integrates with Serratus for large-scale analysis</li> <li>Web interface for easy use</li> </ul>"},{"location":"tools/virus-identification/#rdrp-scan","title":"RdRp-scan","text":"<p>RdRp-scan is a tool for searching sequences against the RdRp database to identify RNA viruses.</p> <ul> <li>Key Features:</li> <li>Sensitive detection of viral RdRp sequences</li> <li>Works with divergent viral sequences</li> <li>Can be integrated into RNA virus discovery pipelines</li> <li>Command-line tool for high-throughput analysis</li> </ul>"},{"location":"tools/virus-identification/#metaviralspades-rna","title":"metaviralSPAdes-RNA","text":"<p>metaviralSPAdes-RNA is a module of the SPAdes assembler specifically designed for RNA virus detection and assembly.</p> <ul> <li>Key Features:</li> <li>Specialized assembly of RNA virus genomes</li> <li>Works with both short and long reads</li> <li>Optimized for metagenomic RNA sequencing data</li> <li>Part of the widely-used SPAdes assembler</li> </ul>"},{"location":"tools/virus-identification/#comparison-table","title":"Comparison Table","text":"Tool Type Method Best For Installation VirSorter2 Metagenome Random Forest Large metagenomic datasets <code>conda install -c bioconda virsorter=2</code> VIBRANT Metagenome Neural Networks Detailed annotation <code>conda install -c bioconda vibrant</code> geNomad Metagenome Hybrid Both viruses and plasmids <code>conda install -c bioconda genomad</code> DeepVirFinder Metagenome Deep Learning Short contigs <code>pip install deepvirfinder</code> PhiSpy Integrated Hybrid Complete bacterial genomes <code>pip install phispy</code> Phigaro Integrated HMM Draft genomes Custom installation viralintegration Integrated Alignment Integration sites Nextflow pipeline palmID RNA RdRp Search RNA virus discovery Web interface RdRp-scan RNA HMM Divergent RNA viruses <code>git clone</code> metaviralSPAdes-RNA RNA Assembly RNA virus assembly Part of SPAdes"},{"location":"tools/virus-identification/#recommended-workflows","title":"Recommended Workflows","text":"<p>For comprehensive viral discovery in metagenomic samples, consider using multiple tools with different approaches:</p> <ol> <li>Basic Workflow:</li> <li>Run VirSorter2 for general viral detection</li> <li>Check for prophages with PhiSpy</li> <li> <p>If working with RNA, add RdRp-scan</p> </li> <li> <p>Advanced Workflow:</p> </li> <li>Run multiple tools: VirSorter2, VIBRANT, geNomad</li> <li>Compare results and take consensus predictions</li> <li>Perform quality assessment with CheckV</li> <li> <p>Annotate with specialized tools like Pharokka</p> </li> <li> <p>RNA Virus Workflow:</p> </li> <li>Assemble with metaviralSPAdes-RNA</li> <li>Screen for RdRp with palmID or RdRp-scan</li> <li>Validate with sequence-based methods</li> </ol>"},{"location":"tools/virus-identification/#further-reading","title":"Further Reading","text":"<ul> <li>Benchmarking of viral prediction tools</li> <li>Challenges in viral metagenomics</li> <li>Best practices for virus identification</li> </ul>"}]}