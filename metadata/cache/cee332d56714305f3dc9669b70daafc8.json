{
  "cache_date": "2025-08-01T09:54:38.876528",
  "data": "<p align=\"center\">\n  <img src=\"hafeZ_logo.jpg\" width=\"40%\">\n</p>\n\n# hafeZ\nA tool for identifying inducible prophage elements through read mapping\n\n\"*I caught the happy virus last night when I was out singing beneath the stars.*\"\n-Hafez\n\n# Installation\n\n## Bioconda\n\n```\nmamba create -n hafeZ -c conda-forge -c bioconda -c defaults hafez\n```\n\n## Source\n\nIf installing from source, hafeZ requires the following dependencies to also be installed:\n\n### Python dependencies\n\n- pandas\n- numpy\n- matplotlib\n- scipy\n- Biopython\n- pyrodigal\n- pysam\n\n### Other dependencies\n\n- minimap2\n- samtools\n- mosdepth\n- hmmer3\n- blast\n- hhsuite\n\n# Quick start\n\n## Help\n\nTo access the help menu use the `-h` option:\n\n```\nhafeZ.py -h\n```\n\n\n## Initial setup\n\nAs hafeZ uses the pVOGs database this must first be retrieved and formatted before use. This can be done using the following command:\n\n```\nhafeZ.py -G hafeZ_db/ -T phrogs\n```\n\n```diff\n- NOTE: Although both pvogs and phrogs are valid options for the -T/--db_type flag DO NOT USE pVOGS as currently the website hosting the database is down and will therefore not download the database.\n\n- So, currently only use phrogs\n```\n\n## illumina reads\n\nhafeZ accepts illumina reads in both .fastq and .fastq.gz format. To use hafeZ with illumina reads:\n\n```\nhafeZ.py -f assembly.fasta -r1 read_1.fastq.gz -r2 read_2.fastq.gz -o output_folder -D hageZ_db -T phrogs\n```\n\n## Test dataset\n\nA test dataset can be obtained and ran using the following:\n\n```\nmkdir test\nwget -P test/ ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR455/005/ERR4552545/ERR4552545_1.fastq.gz\nwget -P test/ ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR455/005/ERR4552545/ERR4552545_2.fastq.gz\nwget -P test/ https://www.ebi.ac.uk/ena/browser/api/fasta/CP015406.2?download=true\nmv test/CP015406.2?download=true test/CP015406.2.fasta\n./hafeZ.py -r1 test/ERR4552545_1.fastq.gz -r2 test/ERR4552545_2.fastq.gz -o test/output -O -f test/CP015406.2.fasta -t 8 -D hafeZ_db/ -Z -T phrogs\n```\n\n## Outputs\n\nIf a putative active prophage is found hafeZ produces six main ouputs:\n\n- hafeZ_all_roi_seqs.fasta = file containing the DNA sequences of all the regions of interest identified\n- hafeZ_summary_all_rois.tsv  = file containing a summary of info related to each region of interest\n- hafeZ_hmm_hits.tsv = file containing a list of all region if interest orfs and a description of the pvogs/phrogs they hit\n- hafeZ_prophage_for_xxx.png = image of zscores per base within contigs where a region of interest was identified with the region highlights (one file per contig containing a region of interest)\n- hafeZ_orfs_aa_XXX.faa = fasta file containing amino acid sequence of each orf within the roi\n- hafeZ_orfs_dna_XXX.fasta = fasta file containing the dna sequence of each orf within the roi\n\nN.B. if the -Z option is used an additional input, zscores_for_contigXXX.png, will also be generated which shows the Z-scores of each contig examined (i.e. if input genome contains 100 contigs there will be 100 zscore .png files output. This can be useful if the user wants to manuallly inspect for any potential rois that may be missed under default paramaters. )\n\nIf no putative active prophages are found hafeZ will output only an empty hafeZ_summary_all_rois.tsv file. \n\n## Caveat\n\nhafeZ is currently only optimised to use paired end illumina reads as inputs. Future updates will allow use of single end illumina reads, nanopore reads, and pacbio reads, but these have not optimised yet.\n\n# Citation\n\nIf you publish results from hafeZ please cite the following:\n\nhafeZ: Active prophage identification through read mapping (bioRxiv)\nhttps://doi.org/10.1101/2021.07.21.453177\n\nhttps://github.com/Chrisjrt/hafeZ\n"
}