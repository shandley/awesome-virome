{
  "cache_date": "2025-03-17T02:07:30.936899",
  "data": "# Detection and Extraction of Phages Tool (DEPhT)\n\nDEPhT is a new tool for identifying prophages in bacteria, and was developed with a particular interest in being \nable to rapidly scan hundreds to thousands of genomes and accurately extract complete (likely active) prophages \nfrom them.\n\nIn brief DEPhT works by using genome architecture (rather than homology) to identify genomic regions likely to \ncontain a prophage. Any regions with phage-like architecture (characterized as regions with high gene density \nand few transcription direction changes) are then further scrutinized using two passes of homology detection. \nThe first pass identifies genes on putative prophages that are homologs of (species/clade/genus-level) conserved \nbacterial genes, and uses any such genes to disrupt the prophage prediction. The second pass (disabled in the \n'fast' runmode) identifies genes on putative prophages that are homologs of conserved, functionally annotated \nphage genes. Finally, prophage regions that got through the previous filters are subjected to a BLASTN-based \nattL/attR detection scheme that gives DEPhT better boundary detection than any tool we are aware of.\n\n# Please cite\n\nGauthier CH, Abad L, Venbakkam AK, Malnak J, Russell DA, Hatfull GF. DEPhT: a novel approach for efficient prophage discovery and precise extraction. \nNucleic Acids Research, Volume 50, Issue 13, 22 July 2022, Page e75, doi: [10.1093/nar/gkac273](https://doi.org/10.1093/nar/gkac273). PMID: 35451479.\n\n# Installation\n\nDEPhT runs natively on macOS and Linux operating systems, and in theory should work on Windows using \n[WSL](https://docs.microsoft.com/en-us/windows/wsl/install).\n\n## Conda install\n\nDEPhT has several dependencies, and as a result by far the easiest way to install it is to use \n[Anaconda](https://www.anaconda.com/products/individual) or the lightweight \n[Miniconda](https://docs.conda.io/en/latest/miniconda.html) with this single command:\n\n    conda create -n depht -c laa89 -c bioconda -c conda-forge depht -y\n\nIt may take up to a couple of minutes to complete.\n\n## Manual install\n\nFor users that would prefer to manage their own dependencies, you'll need to install each of the following:\n- [BLAST](https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/) 2.9 or higher\n- [HHsuite3](https://github.com/soedinglab/hh-suite)\n- [MMseqs2](https://github.com/soedinglab/mmseqs2) 13.45111\n- [Prodigal](https://github.com/hyattpd/Prodigal)\n- [Aragorn](http://www.ansikte.se/ARAGORN/Downloads/)\n- [Python](https://www.python.org/downloads/) 3.7 or higher\n- [DEPhT](https://pypi.org/project/depht/) 1.2.0 or higher\n- [ClustalO](http://www.clustal.org/omega/#Download)            (for model-training)\n\nAll Python dependencies will be installed automatically when using pip to install the DEPhT package.\n   \n# Setup\n\nDEPhT requires at least one genus-specific model to be installed before it will be able to run. At present, there \nare a few models available in [our repository at the Open Science Framework](https://osf.io/zt4n3). New models can\nalso be trained locally ([instructions below](#training-new-models)).\n\nWe now provide a helper script to facilitate installation of models we have trained and made available at OSF.io.\n\n    usage: depht_fetch_model [-h] [-f] [-v] {Mycobacterium,Gordonia}\n\n    Helper script to facilitate downloading models from OSF.io.\n    \n    positional arguments:\n      {Mycobacterium,Gordonia}\n                            choose a model to download\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -f, --force           overwrite existing model files if they exist [default: False]\n      -v, --verbose         print verbose output to stdout [default: False]\n\nTo download the Mycobacterium model, for example, run:\n\n    depht_fetch_model Mycobacterium -v\n\nWhich should produce output similar to the following:\n\n    Downloading model files from https://osf.io/download/aw4up/...\n    Unzipping model files to ~/.depht/models/Mycobacterium...\n    Removing zip file at ~/.depht/models/Mycobacterium.zip...\n    Done.\n\nOverwriting an existing model can be done by supplying the `-f`/`--force` argument.\n\nModels trained using `depht_train` will be put in `~/.depht/models` by default. We are generally amenable to providing guidance\nor assistance in the construction of new models - the easiest way to accomplish this is by [creating an issue](https://github.com/chg60/DEPhT/issues). Note that per Figure 8 of Gauthier et. al 2022, some genera are likely better suited than others for DEPhT model creation.\n\n\n# Running DEPhT\n\n## Basics\n\nAfter installation and setup, check that DEPhT can be run on the command line. NOTE: If you installed using conda, \nyou'll need to activate your environment first (e.g., `conda activate depht`). Typing `depht` at the commandline \nshould display something similar to the following (number of CPUs and models available will vary):\n\n    usage: depht [-h] [--model] [-c] [-n] [-m {fast,normal,strict}] [-s] [-d] [-v] [-t] [-p] [-l]\n                 infile [infile ...] outdir\n\n    DEPhT scans bacterial genomes looking for prophages. Regions identified as prophage \n    candidates are further scrutinized, and attachment sites identified as accurately as \n    possible before prophage extraction and generating the final report.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --model {Mycobacterium}\n                            which local model should be used [default: Mycobacterium]\n      -c , --cpus           number of CPU cores to use [default: 4]\n      -n, --no-draw         don't draw genome diagram for identified prophage(s)\n      -m {fast,normal,sensitive}, --mode {fast,normal,sensitive}\n                            select a runmode that favors speed or accuracy\n      -s , --att_sens       sensitivity parameter for att site detection.\n      -d, --dump-data       dump all support data to outdir\n      -v, --verbose         print progress messages as the program runs\n      -t , --tmp-dir        temporary directory to use for file I/O [default: ~/.depht/tmp]\n      -p , --products       minimum number of phage homologs to report a prophage\n      -l , --length         select a minimum length for prophages [default: 20000]\n\nIn order to run DEPhT, you will need to provide two arguments:\n1. One or more genome sequences in either FASTA or Genbank flatfile format\n2. A desired output directory \n\nDEPhT will infer the input file type(s) when it parses the files, *not using the file extensions*. As far as we are \naware, this makes DEPhT somewhat unusual among prophage-detection tools, as in a single run you can provide a set \nof files with multiple file formats. FASTA files will be treated as un-annotated and the sequences parsed from these \ninput files will be auto-annotated prior to prophage detection. Genbank flatfiles will be treated as annotated genomes, \nand will therefore bypass the auto-annotation step and run ~20-30 seconds faster than their FASTA counterparts.\n\nRun DEPhT on a single FASTA file like this (use your own file paths/extensions):\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory\n\nRun DEPhT on a directory of FASTA files like this:\n\n    depht /path/to/my/directory/*.fasta /path/to/my/output/directory\n\nA large set of mixed FASTA (here using .fasta extension) and Genbank (here using .gbk extension) flatfiles can be run like this:\n\n    depht /path/to/my/directory/*.fasta /path/to/my/directory/*.gbk /path/to/my/output/directory\n\nIn theory, you're limited only by the number of files your Terminal will let you expand by using `*`.\n\nFor Mac users who are uncomfortable with entering paths at the commandline, modern versions of macOS let you drag files \nfrom a Finder window into the Terminal and will automatically populate the path in the Terminal for you. Some Linux \ndistributions may also support this kind of action.\n\nIn the event that a prophage region is discovered, or if the `-d` argument is specified, DEPhT will create a \ndirectory at the specified output directory for each of the input sequences. For those sequences that have predicted \nprophages, DEPhT will write an .html file with a visualization of the discovered prophage region(s). It will also \noutput a FASTA (sequence) file and a Genbank (annotation) file for each extracted prophage sequence. See \n[below](#output) for more details DEPhT's output files.\n\nProgress updates during DEPhT's runtime can be toggled with `-v`.\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -v\n\nDEPhT will use all locally available CPU cores by default. You can limit the number of allowed CPU cores with the \n`-c`/`--cpus` argument:\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -c 4\n\n\n## Other Options\n\nWhat follows is a description of DEPhT's optional arguments. These are described in isolation, but can be mixed and \nmatched using different values to specifically tune the behavior of DEPhT to suit your needs. Default parameters \nwere all set to optimize performance in _Mycobacterium_ genomes.\n\n### Model Selection\n\nDEPhT was originally designed for the precise and efficient discovery and extraction of *Mycobacterium* prophages, \nbut can be adapted for other genera with the `--model` flag.  See [above](#setup) for instructions to download \nmodels that we have already trained, and [below](#general-information) for the list of currently available models.\n\nIf you have more than one model installed locally, you will need to tell DEPhT which model you'd like to use. \nOtherwise, it will choose one more-or-less at random, which may result in unexpectedly low-quality outputs.\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory --model Pseudomonas\n\n### Runmode Selection\n\nDEPhT has multiple runmodes, intended to serve as a dial tuning the trade-off between runtime and accuracy. The `-m` \nargument lets you select one of the available runmodes:\n\n- fast: DEPhT discovers prophage regions as fast as possible using gene size and transcription direction changes. \n  Regions are trimmed using the identified shell genome content of the selected genera, and an effort is made to \n  identify attL/attR, but are likely not as accurate as in the other runmodes.\n- normal: DEPhT discovers prophage regions as in fast mode, then tries to differentiate between active and defective \n  prophages by identifying homologs of phage genes essential for viability.\n- sensitive: DEPhT discovers prophage regions as in normal mode, and then tries to further differentiate between active \n  and defective prophages by identifying homologs of phage genes with a consensus annotated function.\n\nDEPhT will run in normal mode by default (e.g. if `-m` is not given), but if one is interested in getting an \nestimate of the number of prophages as quickly as possible, they may run DEPhT like this:\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -m fast\n\nAlternatively, if one wants only the most likely prophages, with as many detailed functional annotations as possible,\nthey might run:\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -m sensitive\n\n### Product Threshold\n\nIn normal and sensitive runmodes, DEPhT attempts to differentiate between active and defective prophages based on the \nnumber of identified prophage homologs in a region. This number of phage products can be raised or lowered by using \nthe `-p` argument. In normal mode, the default value is 5; in sensitive mode, it is 10. If one feels that the \ndefault value is too high and would rather use 2 for example, this can be done by running:\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -p 2\n\n### Attachment Site Tuning\n\nDEPhT employs a multi-feature scoring algorithm and a library of reference sequences to determine the best possible \nattachment site core (or if there is no appropriate sequence). The runtime of this component is heavily influenced by \nthe runtime of the BLASTN algorithm, so runtime scales with the amount of sequence that is searched. However, the \nprecision of extraction may benefit from searching a larger sequence space, particularly in genera where few \nhigh-quality reference sequences are available. The sequence space that is searched for an attachment site core \ncan be controlled by using the `-s` flag, which acts as a multiplier against 5000 bp. By default, DEPhT uses `-s 7`, \nwhich corresponds to a search space of up to 7 x 5,000 = 35,000 bp at the left and right ends of each identified \nprophage. This can be raised to 50,000 bp by setting `-s` to 10, at the expense of some additional runtime:\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -s 10\n\n### Prophage Size\n\nDEPhT mandates a minimum length for prophage regions reported for output quality assurance. This minimum length \nthreshold can be lowered or raised with the `-l` flag, and is set at 20,000 base pairs by default - just over half \nthe length of the shortest known Mycobacterium prophage. Reduce this threshold to 10,000 bases like this:\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -l 10000\n\n### Temporary Directory\n\nDEPhT (and its dependencies) use many temporary data files. These files are stored in a temporary directory, \nand removed once DEPhT finishes running. By default, DEPhT will use `~/.depht/tmp`, but can use any other \ndirectory that your user account has read/write permissions in, by using the `-t` argument:\n\n    depht /path/to/my/sequence.fasta /path/to/my/output/directory -t /path/to/temporary/directory\n\n\n# Output\n\nDEPhT's output consists of three main files:\n1. An `.html` file with a visualization of the discovered prophage regions\n2. A `.csv` spreadsheet with the primary data used to discern prophage regions - one file per contig\n3. A `.gbk` Genbank flatfile with DEPhT's annotation of the inputted sequence - one file per contig\n\nDEPhT's graphical `.html` output displays a circular input genome map and linear phage region genome map with \n[DnaFeaturesViewer](https://github.com/Edinburgh-Genome-Foundry/DnaFeaturesViewer) as well as the coordinates of the \nregions discovered in a colored table with [pretty-html-table](https://github.com/sbi-rviot/ph_table).\n\n![DEPhT's graphical output for prophages identified in *M. abscessus* strain GD43A]\n(/resources/images/result_visualization_example.png)\n\nIn each of these genome maps and coordinate tables, prophage and/or protein-coding sequence features are colored \ngreen for forward-oriented features and colored red for reverse-oriented features. Above those prophage features in \nthe circular genome map is annotated the prophage region name as given by DEPhT. Above those protein-coding features \nin the linear genome map(s) is annotated phage products as identified by DEPhT.\n\nDEPhT's data `.csv` output contains data for each protein-coding feature in the inputted sequence file.\n\n![DEPhT's data output for prophages identified in *M. abscessus* strain GD43A]\n(/resources/images/data_spreadsheet_example.png)\n\nThe columns in this output are the following:\n- Gene ID: A protein-coding feature ID assigned by DEPhT\n- Start: The start coordinate of a feature in the input sequence\n- End: The end coordinate of a feature in the input sequence\n- Prediction: Probability that this gene is part of a prophage, from the Gene Size/TDC Classifier\n- Bacterial Homology: 1 if DEPhT identifies this gene as part of the bacterial accessory genome, else 0\n- Phage Homology: HHSearch probability for genes with high-confidence hits to phage HMMs, else 0\n\n\n# Training New Models\n\nModels can be trained using the `depht_train` package, installed as part of DEPhT.\n    \nWhat follows will describe the workflow for training new models, as well as explain the thought process.\n    \n## Selection of Training Genomes\n\nThis is by far the highest hurdle for training new models. The better the training genomes are selected, the better\nthe model will perform. We *highly* recommend only training against completely sequenced bacteria and manually\nannotated phages.\n\nThere's an important tradeoff you'll need to make when training models: volume of data versus quality of data. A\nrelatively small dataset (~100 phages and 30-45 bacteria) can yield incredibly high-quality models if the genomes are\nchosen well and especially if the phage genomes are well-annotated. Assuming all the training data is high-quality,\nincreasing the amount of training data will likely improve the quality of predictions made by DEPhT, with the caveat\nthat larger models will necessarily increase the DEPhT runtime, which will be most noticeable in the fast runmode.\n\nOk so let's suppose you want to train a new model for Mycobacteria. A good start would be to head to \n[PATRIC](https://www.patricbrc.org/view/Taxonomy/2#view_tab=taxontree) and navigate to the Mycobacteriaceae.\n\n### Retrieve Bacterial Genomes\n\nIn the taxonomy tree, the steps to get here are: \n\nTerrabacteria group >> Actinobacteria >> Actinomycetia >> Corynebacteriales >> Mycobacteriaceae\n\nThe red box below shows where to click to get to the home page for the family or genus of interest.\n\n![patric mycobacteriaceae](/resources/images/patric_mycobacteriaceae.png)\n\nFrom there, navigate to the \"Genomes\" tab to see all the available genomes in the chosen taxon. Click \"Filters\", and\na good choice might be to select only those genomes where \"Genome Status\" is \"Complete\", and \"Reference Genome\" is\neither \"Representative\" or \"Reference\", and \"Genome Quality\" is \"Good\". Hit \"Apply\" to apply those filters. You can \ndownload FASTA files for these genomes by selecting all the genomes in the table, and clicking the \"DWNLD\" button.\n\n![patric download](/resources/images/patric_download.png) \n\nClick \"More Options\", and in the popup dialog box, check the box next to \"Genomic Sequences in FASTA (\\*.fna)\" \nbefore pressing \"Download\". \n\n![patric dialog box](/resources/images/patric_download_options.png)\n\nOf course, you are free to add any additional genomes you'd like to better \npopulate the spectrum of diversity in the genus. In our case, we added several _Mycobacterium abscessus_ strains to \nfill in the so-called _Mycobacterium abscessus_ complex (MAC).\n\n### Check Bacteria for Prophages\n\nIdeally, you'll run these genomes through PHASTER or some other prophage prediction tool to get the approximate\ncoordinates of any complete prophages in these strains, and recording them in a CSV file that you'll pass to the \ntraining module. The coordinates don't have to be perfect, though the better they are the better the resultant model \nwill perform. This step will give the model an idea what integrated prophages are supposed to look architecturally, as \nopposed to only knowing what extracted phages/prophages look like.\n\n![example csv](/resources/images/prophage_csv.png)\n\n### Retrieve Phage Genomes\n\nLastly, you'll need to retrieve functionally annotated phages from Genbank or elsewhere. Like the bacteria, it's\nimportant that these phages represent the spectrum of diversity of phages infecting hosts in the genus. Ideally there\nwill also be groups of at least somewhat-related phages in this dataset. Phage annotations need to be in GenBank flatfile\nformat.\n\n## Running the Training Pipeline\n\nDEPhT models are comprised of four main components, which can be built from curated phage and bacterial sequences.\nIn the `depht_train` package, several pipelines exist to convert and process sequence data as well as store these data\nin formatted files and databases recognized by DEPhT.  The overall workflow is illustrated below.\n\n![depht train workflow](/resources/images/github_training_schema.png)\n\nThis training workflow is available in the `depht_train` package as a single pipeline. The only required arguments are:\n1. a name for the new model\n2. path to a directory containing functionally annotated phage genomes for the genus of interest (GenBank flatfiles)\n3. path to a directory containing bacterial genomes for the genus of interest (FASTA nucleotide or GenBank flatfiles)\n\nRun the pipeline like this:\n\n    depht_train create_model model_name /path/to/annotated/phage/genomes /path/to/bacterial/genomes\n    \nIf you're trying to create a new model with the same name as an existing one, `depht_train` will not overwrite the\nexisting model by default, but it will then force you to pick a new name. If you'd like to overwrite the existing model,\nyou can do so with the `-f`/`--force` argument:\n\n    depht_train create_model model_name /path/to/annotated/phage/genomes /path/to/bacterial/genomes -f\n    \nIf one or more of your bacterial genomes has one or more known (or probable) prophage(s) in it, you can provide a CSV file\nformatted [as above](#check-bacteria-for-prophages), using the `--prophage-coords` argument:\n\n    depht_train create_model model_name /path/to/annotated/phage/genomes /path/to/bacterial/genomes --prophage-coords /path/to/prophage_coords.csv\n\nWhen much is known about the taxonomy of a set of bacteria provided for the creation of a DEPhT model, formal clades or\ntaxa assigned to the bacteria may be much more informative and biologically relevant than an auto-generated cluster\nschema. To assert a certain clade/cluster schema on the inputted bacterial sequences for the purposes of defining shell genome\ncontent, you can create a CSV table mapping the given bacteria to a clade name or identifier. The table should be formatted\nwith a 'Name' and 'Cluster' header like the following:\n\n![bacterial clusters table example](/resources/images/bacterial_clusters_table.png)\n\nThis CSV file can be provided to the `create_model` pipeline using the `--bacteria-clusters` argument:\n\n    depht_train create_model model_name /path/to/annotated/phage/genomes /path/to/bacterial/genomes \n    --bacteria-clusters /path/to/bacteria_clusters.csv\n \nTraining a model consists of several computationally expensive steps, and as such the amount of time it takes to train\na model is highly variable, but generally influenced in these ways:\n1. more genomes --> longer training time (and likely `depht` runtime)\n2. more CPU cores --> shorter training time (and likely `depht` runtime)\n\nMost new models will likely take somewhere between 15 minutes and an hour to train.\n\n# Examples\n\nWe have some example genomes and expected outputs to make it easy for end-users to verify that DEPhT (and the Mycobacterium model)\nare installed correctly. These genomes and their expected outputs can be found in the GitHub repository in resources > examples.\n\n# General Information\n\n- Current version is 1.2.0\n- Most recent stable version is 1.1.8\n- We currently have models available for these bacterial genera:\n    - [Mycobacterium](https://osf.io/aw4up/download)\n    - [Gordonia](https://osf.io/djwsb/download)\n    - [Pseudomonas](https://osf.io/5puze/download)\n- If you'd like to contact us about expanding this set, please email either chg60@pitt.edu or laa89@pitt.edu\n"
}