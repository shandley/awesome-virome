{
  "cache_date": "2025-08-01T09:36:02.885119",
  "data": "# VirMiner\nSource code for the key steps (including quality control of metagenomic raw reads and phage contig indentification) of VirMiner, which is available at [http://sbb.hku.hk/VirMiner/](http://sbb.hku.hk/VirMiner/).  \nThe souce code was integrated into two parts: VirMiner PipelineForQC and VirMiner PipelineForVirContigIndentification\n\n## VirMiner pipelineForQC\nHere we provide the command-line perl scripts to quality control for metagenomic data, which was used in VirMiner. It can be used to process raw reads of metagenomic samples in FASTQ format by removing the adapters, low quality reads, bases or PCR duplicates.\n\n### Requirements:\n#### install perl  \nLinux/macOS: A version of Perl is already installed  \nWindows: You may need to install one of the versions available at [perl.org](http://www.perl.org/get.html).  \nAfter installation, run in linux system or terminal apps, such as Terminal on macOS, and Command Prompt on Windows.  \n\n### How to Run\ncommand-line perl scripts: `./scripts/PipelineForQC/fqc.pl`  \nRun `perl ./scripts/PipelineForQC/fqc.pl -h `to see the parameters of this command line. \n\n```\n$ perl ./scripts/PipelineForQC/fqc.pl -h\n\nUsage for single: $0 $command -i s_1_IDX1_1.fastq -o s_1_IDX1\n      for Paired: $0 $command -f s_1_IDX1_1.fastq -r s_1_IDX1_2.fastq -p -o s_1_IDX1\n\n      $command\t<str>\t: adpter,quality,adp_qual and duplication\n\nOptions:\n\t-i\t<str>\t: Fastq file (Single)\n\t-f\t<str>\t: Forward fastq file (Paired-End)\n\t-r\t<str>\t: Reverse fastq file (Paired-End)\n\t-a\t<str>\t: Adapter sequence (Default: GATCGGAAGA)\n\t-c\t<Ns>\t: Discard sequences lower than N quality. (Default: 20)\n\t-q\t<Ns>\t: Quality format 33/64 (Default: 33)\n\t-l\t<Ns>\t: Discard sequences shorter than N nucleotides. (Default: 30)\n\t-o\t<str>\t: Output prefix\n\t-p       \t: Paired-End Model (Default: Single)\n\t-v       \t: Prints version of the program\n\t-h       \t: Prints this usage summary\n```\n\nA sample \"run\" command:  \ninput metagenomic raw reads in pair-end FASTQ format (test_1.fastq, test_2.fastq):  \n`perl fqc.pl all -p -f test_1.fastq -r test_2.fastq -o test_qc`  \nOutput clean reads after quality control : `test_qc_1.fastq` and `test_qc_2.fastq`.  \n\ninput metagenomic raw reads in single FASTQ format (test_fastq):  \n`perl fqc.pl all -i test.fastq -o test_qc`  \nOutput clean reads after quality control : `test_qc.fastq`.  \n\n## VirMiner PipelineForVirContigIdentification\n \nBefore running this pipeline to identify phage contigs, you need to prepare input files: 1) fasta file of assembled contigs; 2) the clean reads in pair-end FASTQ format (refers to the output file of VirMiner pipelineForQC).\n \n\n### Requirements:  \n1.[rpsblast](http://nebc.nox.ac.uk/bioinformatics/docs/rpsblast.html) (version 2.2.26)  \n2.[Diamond](http://ab.inf.uni-tuebingen.de/software/diamond/)  \n3.[KOBAS](http://kobas.cbi.pku.edu.cn/kobas3/download/) (version 2.0) (**Note: This software is required for KO annotation. Please follow \"install.txt\" in \"kobas-2.1.1.tar.gz\" to install kobas and copy \"/your/path/to/kobas/scripts/annotate.py\" to \"/your/path/to/PipelineForVirContigIdentification/bin\" folder.**)  \n4.[hmmsearch](http://hmmer.org/)  \n5.[bwa](http://bio-bwa.sourceforge.net/) (version 0.7.12)  \n6.[BLASTP](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download) (version 2.2.26)  \n7.[R package randomForest](https://cran.r-project.org/web/packages/randomForest/index.html)  \n8.[GeneMark](http://exon.gatech.edu/GeneMark/license_download.cgi)\n\n\n### Database\n1.CDD  \n2.updated POG database (uPOGs)  \n3.viral hallmark  \n4.viral protein family  \n5.KO  \n6.pre-built_random_forest_model  \nYou can download the files of databases from here (http://sbb.hku.hk/VirMiner/databases/).   \n\n\n### Test data\nYou can download the test samples (including P5E0_test, P5E7_test etc.) from VirMiner website ([http://147.8.185.62/VirMiner/tasks/exampleData/quality_control/](http://147.8.185.62/VirMiner/tasks/exampleData/quality_control/)) then place them in `VirMiner/data/quality_control/`. For your better understanding, I will take P5E0_test as an example below to show how to run the scripts. \n\n### The working directory  \nFirstly, create a folder named \"VirMiner\" under you own directory using the comand line:\n```\nmkdir VirMiner\n```\n#### The directory for depositing scripts and databases  \nCreate a folder named \"bin\" under VirMiner folder using the comand line:\n```\nmkdir VirMiner/bin\n```\nThen put all the scripts of PipelineForVirContigIdentification in the \"bin\" folder, it should be like this:  \n![alt text](https://github.com/TingtZHENG/VirMiner/blob/master/pic/bin_folder.png)\nThen make a new folder named \"database\" under the VirMiner folder (`VirMiner/database`) using the command line:\n```\nmkdir VirMiner/database\n```\nPlacing these files of databases in `/VirMiner/database/`, you should have these files in your database folder:  \n![alt text](https://github.com/TingtZHENG/VirMiner/blob/master/pic/database_folder.png)  \n\n#### The working directory for depositing your own data  \nCreate a folder named \"data\" under VirMiner folder for deposing your data using the comand line:\n```\nmkdir VirMiner/data\n```\nCreate the following folders under data folder to deposit the output files for each step using the comand line:\n```\nmkdir VirMiner/data/quality_control  \nmkdir VirMiner/data/genome_assembly\nmkdir VirMiner/data/gene_prediction\nmkdir VirMiner/data/functional_annotation\nmkdir VirMiner/data/POG_2016_annotation\nmkdir VirMiner/data/average_depth_relative_abundance\nmkdir VirMiner/data/viral_contig_identification\n```\n\n### Input and Output files  \n#### Input files  \nOption 1. Clean reads in pair-end FASTQ format and the assembled contigs in FASTA format (PLEASE NOTE THAT AVOID SPACES IN YOUR CONTIG IDs):  \nFirstly you need to change the pair-end FASTQ file names and make it ended with \"_qc_1.fastq\" or \"_qc_2.fastq\",for example, \"P5E0_test_qc_1.fastq\" and \"P5E0_test_qc_2.fastq\". Then place them in `VirMiner/data/quality_control/`. It should be like this:\n![alt text](https://github.com/TingtZHENG/VirMiner/blob/master/pic/quality_control_folder.png)\nSecondly, create a folder named \"sample_name.assembly.idba\" under genome_assembly folder.\n```\nmkdir VirMiner/data/genome_assembly/sample_name.assembly.idba\n```\nFor example, if you have a sample named \"P5E0\", the command could be used like this:  \n`mkdir VirMiner/data/genome_assembly/P5E0_test.assembly.idba`\nThen rename your contig file to \"contig.fa\" and put it in the directory: `VirMiner/data/genome_assembly/sample_name.assembly.idba`, it should be like this:\n![alt text](https://github.com/TingtZHENG/VirMiner/blob/master/pic/genome_assembly_folder.png)\nOption 2. Clean reads in pair-end FASTQ format only:  \nFirstly you need to change the pair-end FASTQ file names and make it ended with \"_qc_1.fastq\" or \"_qc_2.fastq\",for example, \"P5E0_test_qc_1.fastq\" and \"P5E0_test_qc_2.fastq\". Then place them in `VirMiner/data/quality_control/`  \nin this case, you can choose IDBA_UD to do genome assembly using the command_line (if your pair-end FASTQ file named \"P5E0_test_qc_1.fastq\" and \"P5E0_test_qc_2.fastq\"):  \n```\n/your/path/to/VirMiner/bin/fq2fa --merge /your/path/to/VirMiner/data/quality_control/P5E0_test_qc_1.fastq /your/path/to/VirMiner/data/quality_control/P5E0_test_qc_2.fastq /your/path/to/VirMiner/data/quality_control/P5E0_test_qc.fa\n/your/path/to/VirMiner/idba_ud --min_contig 300 --mink 20 --maxk 101 --step 10 -r /your/path/to/VirMiner/data/quality_control/P5E0_test_qc.fa -o /your/path/to/VirMiner/data/genome_assembly/P5E0_test.assembly.idba --pre_correction\n```\nNotice: you may change the setting of --maxk to your raw read length.  \n\n#### Main output files  \nIn the folder `VirMiner/data/gene_prediction`:  \n1) The predicted gene in GFF format, which showed information of the start and end of predicted genes in contigs.  \n2) The protein sequences of predicted genes.  \n3) The number of predicted genes on each contig.  \n\nIn the folder `VirMiner/data/functional_annotation`:  \n1) Genes annotated to KO groups.  \n2) Genes annotated to Pfam groups.  \n3) Genes annotated to viral protein families.  \n4) Genes identified as viral hallmark genes.  \n5) The number and the percentage of predicted genes annotated to KO groups on each contig.  \n6) The number and the percentage of predicted genes annotated to Pfam groups on each contig.  \n7) The number and the percentage of predicted genes annotated to viral protein families on each contig.  \n8) The number of identified viral hallmark genes on each contig.  \n\nIn the folder `VirMiner/data/POG_2016_annotation`:  \n1) Genes annotated to general POGs.  \n2) Genes annotated to POGs with high VQ (VQ >0.8) that could be considered as virus-specific.  \n\nIn the folder `VirMiner/data/average_depth_relative_abundance`:  \n1) The mapped reads count for each contig.  \n2) The average depth for each contig.  \n\nIn the folder `VirMiner/data/viral_contig_identification`:  \n1) The metrics table including functional information like KO, pfam, viral hallmark, viral protein families etc. and other metrics characterizing each contig such as average depth, which is used for phage contigs identification.  \n2) The extracted of all the above metrics for predicted phage contigs.  \n3) The sequence of predicted phage contigs in FASTA format. \n \n\n### How to Run\n1 If you have clean reads in pair-end FASTQ format only as your input file:  \nAs mentioned above, firstly you can choose IDBA_UD to do genome assembly.\n\nA sample \"run\" command:  \nAssume you have prepared these input files: `/your/path/to/VirMiner/data/quality_control/P5E0_test_qc_1.fastq` and `/your/path/to/VirMiner/data/quality_control/P5E0_test_qc_2.fastq` \n```\n/your/path/to/VirMiner/bin/fq2fa --merge /your/path/to/VirMiner/data/quality_control/P5E0_test_qc_1.fastq /your/path/to/VirMiner/data/quality_control/P5E0_test_qc_2.fastq /your/path/to/VirMiner/data/quality_control/P5E0_test_qc.fa\n/your/path/to/VirMiner/idba_ud --min_contig 300 --mink 20 --maxk 101 --step 10 -r /your/path/to/VirMiner/data/quality_control/P5E0_test_qc.fa -o /your/path/to/VirMiner/data/genome_assembly/P5E0_test.assembly.idba --pre_correction\ncd /your/path/to/VirMiner/data  \nsh /your/path/to/VirMiner/bin/Pipeline_For_Viral_Contig_Indentification.sh P5E0_test  \n```\n\n2 If you already have clean reads in pair-end FASTQ format and the assembled contigs in FASTA format as your input files:  \nA sample \"run\" command:  \nAssume you have prepared these input files: `/your/path/to/VirMiner/data/genome_assembly/P5E0_test.assembly.idba/contig.fa`,`/your/path/to/VirMiner/data/quality_control/P5E0_test_qc_1.fastq` and `/your/path/to/VirMiner/data/quality_control/P5E0_test_qc_2.fastq` \n```\ncd /your/path/to/VirMiner/data  \nsh /your/path/to/VirMiner/bin/Pipeline_For_Viral_Contig_Indentification.V2.sh P5E0_test  \n```\n\n"
}