{
  "cache_date": "2025-03-17T02:07:42.951315",
  "data": "```\n                  .                                                         \n               ,'/ \\`.                                                               \n              |\\/___\\/|                                                     \n              \\'\\   /`/          \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n               `.\\ /,'           \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557                   \n                  |              \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \n                  |         \u2588\u2588   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n                 |=|        \u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\n            /\\  ,|=|.  /\\    \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\n        ,'`.  \\/ |=| \\/  ,'`.                                                 \n      ,'    `.|\\ `-' /|,'    `.                                              \n    ,'   .-._ \\ `---' / _,-.   `.                                            \n       ,'    `-`-._,-'-'   `.       \n      '  \n```\n\n\n\nJaeger : an accurate and fast deep-learning tool to detect bacteriophage sequences\n===============\n![GitHub](https://img.shields.io/github/license/Yasas1994/jaeger) ![GitHub last commit (branch)](https://img.shields.io/github/last-commit/Yasas1994/jaeger/main?color=8a35da) ![Conda](https://img.shields.io/conda/v/bioconda/jaeger-bio) ![Conda](https://img.shields.io/conda/dn/bioconda/jaeger-bio) [![PyPI version](https://badge.fury.io/py/jaeger-bio.svg)](https://badge.fury.io/py/jaeger-bio) [![Downloads](https://static.pepy.tech/badge/jaeger-bio)](https://pepy.tech/project/jaeger-bio) [![DOI](https://zenodo.org/badge/379281156.svg)](https://zenodo.org/doi/10.5281/zenodo.13336194)\n\n\n\nJaeger is a tool that utilizes homology-free machine learning to identify phage genome sequences that are hidden within metagenomes. It is capable of detecting both phages and prophages within metagenomic assemblies.\n\n---\n#### Citing Jaeger\n---\n\nIf you use Jaeger in your work, please consider citing its preprint: \n\n* <b>Jaeger: an accurate and fast deep-learning tool to detect bacteriophage sequences</b>\nYasas Wijesekara, Ling-Yi Wu, Rick Beeloo, Piotr Rozwalak, Ernestina Hauptfeld, Swapnil P. Doijad, Bas E. Dutilh, Lars Kaderali bioRxiv 2024.09.24.612722\n\nTo cite the code itself:\n\n* <b>Jaeger: an accurate and fast deep-learning tool to detect bacteriophage sequences</b> [![DOI](https://zenodo.org/badge/379281156.svg)](https://zenodo.org/doi/10.5281/zenodo.13336194)\n\n---\n\n\n\n- [Installing Jaeger](#installation)\n  - [Bioconda](#option-1--bioconda)\n  - [PyPi](#option-2--installing-from-pypi)\n  - [git (dev-version)](#option-3--installing-from-git)\n- [Troubleshooting](#troubleshooting)\n- [Running Jaeger](#running-jaeger)\n- [What is in the output](#what-is-in-the-output)\n- [Predicting prophages](#predicting-prophages-with-jaeger)\n\n--- \n#### Installing Jaeger\n---\n\n##### option 1 : bioconda\n\nThe performance of the Jaeger workflow can be significantly increased by utilizing GPUs. To enable GPU support, the CUDA Toolkit and cuDNN library must be accessible to conda.\n\n````\n# setup bioconda\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\nconda config --set channel_priority strict\n\n# create conda environment and install jaeger\nmamba create -n jaeger -c nvidia -c conda-forge cuda-nvcc \"python>=3.9,<3.12\" pip jaeger-bio\n\n\n# activate environment\nconda activate jaeger\n````\nTest the installation with test data\n```\njaeger test\n```\n\n\n##### option 2 : Installing from pypi\n\n\n\n```\n# create a conda environment and activate  \nmamba create -n jaeger -c nvidia -c conda-forge cuda-nvcc \"python>=3.9,<3.12\" pip\nconda activate jaeger\n\n# OR create a virtual environment using venv\npython3 -m venv jaeger\nsource jaeger/bin/activate    \n\n# to install jaeger with GPU support\npip install jaeger-bio[gpu]\n\n# to install without GPU support\npip install jaeger-bio[cpu]\n\n# to install on a Mac(arm)\npip install jaeger-bio[darwin-arm]\n\n\n```\n\n##### option 3 : Installing from git\n\n```\n# clone the jaeger repository\ngit clone https://github.com/MGXlab/Jaeger.git\ncd Jaeger\n\n# create a conda environment and activate  \nmamba create -n jaeger -c nvidia -c conda-forge cuda-nvcc \"python>=3.9,<3.12\" pip\nconda activate jaeger\n\n# OR create a virtual environment using venv\npython3 -m venv jaeger\nsource jaeger/bin/activate    \n\n# install jaeger\n\n# to install with GPU support\npip install \".[gpu]\"\n\n# to install without GPU support\npip install \".[cpu]\"\n\n# to install on a Mac(arm)\npip install \".[darwin-arm]\"\n\n```\n\n\n---\n##### Troubleshooting\n---\n\nIf you have a NVIDIA GPU on the system, and jaeger fails to detect it, try these steps.\n\n1. If you are on a HPC check whether cuda-toolkit is available as a module. (Skip this step if you are trying this out on your PC)\n\n```\nmodule avail\n```\n\n```\nangsd/0.937         boost/1.71.0        clang/14.0.4  fastp/0.23.1   gcc/13.2.0     julia/1.9.2         modeller/9.23      proj/7.0.1          structure/2.3.4     vcftools/0.1.16  \nautodockvina/1.1.2  boost/1.79.0        clang/17.0.5  fastqc/0.11.9  hdf5/1.12.1    kalign/1.04         mrbayes/3.2.7      r/4.1.1             superlu-dist/8.1.2  \nbamutil/1.0.15      bowtie/2.4.2        colmap/3.8    fgsl/1.5.0     hdf5/1.14.0    likwid/5.2.0        openmpi/4.1.1      r/4.3.1             superlu-dist/8.2.0  \nbaypass/2.2         bwa/0.7.17          cuda/11.4     fsl/6.0.2      hhsuite/3.3.0  likwid/5.2.1        openpmix/3.1.5     samtools/1.12       superlu/4.3         \nbcftools/1.15       cdhit/4.8.1         cuda/11.7     gams/36.2.0    I-TASSER/5.1   mathematica/13.2.1  petsc-real/3.18.1  singularity/3.10.0  transdecoder/5.7.0  \nbedtools/2.30.0     ceres-solver/2.1.0  cuda/12.0.0   gcc/12.2.0 \n```\n\nIf so, load it\n```\nmodule load cuda/12.0.0\n```\n\n2. Next, check whether the [NVIDIA GPU driver](https://www.nvidia.com/Download/index.aspx) is properly configured.\n\n````\nnvidia-smi\n````\n\nAbove command returns the following output if everything is properly set-up. You can also determine the cuda version from it. For example here it is 11.7 (for step 3)\n````\nMon Apr  8 14:26:43 2024       \n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 535.171.04             Driver Version: 535.171.04   CUDA Version: 12.2     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  NVIDIA GeForce GTX 1660 Ti     Off | 00000000:01:00.0 Off |                  N/A |\n| N/A   47C    P8               2W /  80W |      6MiB /  6144MiB |      0%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n                                                                                         \n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n|    0   N/A  N/A      2196      G   /usr/lib/xorg/Xorg                            4MiB |\n+---------------------------------------------------------------------------------------+\n````\n\nCheck whether Jaeger detects the GPU now.\n\nIf that fails you will have to manually configure the conda environment as shown in step 3.\n\n3. * cuda-toolkit for cuda>=11.1 can be found here https://anaconda.org/nvidia/cuda-toolkit \n\nFollowing example shows the installation process for cuda=11.3.0. Simply change the version number on the second \"nvidia/label/cuda-11.x.x\" command to install a different version\n \n````\nlibcudnn_cnn_infer.so.8\n\n# create a conda environment\nconda create -n jaeger -c conda-forge -c bioconda -c defaults \"python>=3.9,<3.12\" pip\n\n# cudatoolkit and cudnn\nconda install -n jaeger -c \"nvidia/label/cuda-11.3.0\" cudatoolkit=11\nconda install -n jaeger -c conda-forge cudnn\n\n# install jaeger\nconda install -n jaeger -c conda-forge -c bioconda -c defaults jaeger-bio\n\n# activate environment\nconda activate jaeger\n````\nMore information on properly setting setting up tensorflow can be found [here](https://www.tensorflow.org/install/pip)\n\n---\n#### Running Jaeger\n---\n##### CPU/GPU mode\nOnce the environment is properly set up, using Jaeger is straightforward. The program can accept both compressed and uncompressed .fasta files containing the contigs as input. It will output a table containing the predictions and various statistics calculated during runtime. \n\n```\njaeger run -i input_file.fasta -o output_dir --batch 128\n```\n##### multi-GPU mode\n\nWe provide a new program that allows users to automatically run multiple instances of Jaeger on several GPUs allowing maximum utilization of state-of-the-art hardware. This program accepts a file with a list of paths to all input FASTA files. **--ngpu** flag can be used to set the number of GPUs at your disposal. **--maxworkers** flag can be used to set the number of samples that should be processed parallaly per GPU. All other arguments remains similar to 'Jaeger' program.\n\n\n```\n# to generate a list of fasta files in a dir\nls ./files/*.fna | xargs realpath > input_file_list\n\n# to process eight samples in parallel on two GPUs \njaeger_parallel -i input_file_list -o output_dir --batch 128 --maxworkers 4 --ngpu 2\n```\n\n##### Selecting the batch parameter \n\nYou can control the number of parallel computations using this parameter. By default it is set to 96. If you run into OOM errors, please consider setting the --bactch option to a lower value. for example 96 is good enough for a graphics card with 4 Gb of memory.\n\n---\n#### What is in the output?\n---\nAll predictions are summarized in a table located at ```output_dir/<input_file>_default.jaeger.tsv```\n\n```\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 contig_id                         \u2506 length \u2506 prediction \u2506 entropy \u2506 \u2026 \u2506 Archaea_var \u2506 window_summary \u2506 terminal_repeats \u2506 repeat_length \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 NODE_1109_length_9622_cov_23.163\u2026 \u2506 9622   \u2506 Phage      \u2506 0.43    \u2506 \u2026 \u2506 0.143       \u2506 1V1n2V         \u2506 null             \u2506 null          \u2502\n\u2502 NODE_1181_length_9275_cov_26.864\u2026 \u2506 9275   \u2506 Phage      \u2506 0.327   \u2506 \u2026 \u2506 0.504       \u2506 4V             \u2506 null             \u2506 null          \u2502\n\u2502 NODE_123_length_36569_cov_24.228\u2026 \u2506 36569  \u2506 Phage      \u2506 0.503   \u2506 \u2026 \u2506 1.554       \u2506 9V1n7V         \u2506 null             \u2506 null          \u2502\n\u2502 NODE_149_length_32942_cov_23.754\u2026 \u2506 32942  \u2506 Phage      \u2506 0.458   \u2506 \u2026 \u2506 3.229       \u2506 3V1n1n11V      \u2506 null             \u2506 null          \u2502\n\u2502 NODE_231_length_24276_cov_21.832\u2026 \u2506 24276  \u2506 Phage      \u2506 0.502   \u2506 \u2026 \u2506 1.467       \u2506 1V1n3V1n5V     \u2506 null             \u2506 null          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n```\n\nThis table provides information about various contigs in a metagenomic assembly. Each row represents a single contig, and the columns provide information about the contig's ID, length, the number of windows identified as prokaryotic, viral, eukaryotic, and archaeal, the prediction of the contig (Phage or Non-phage), the score of the contig for each category (bacterial, viral, eukaryotic and archaeal), and a summary of the windows. The table can be used to identify potential phage sequences in the metagenomic assembly based on the prediction column. The score columns can be used to further evaluate the confidence of the prediction and the window summary column can be used to understand the count of windows that contributed to the final prediction.\n\n---\n\n#### Options\n---\n\n````\njaeger run --help\n````\n````\n\n## Jaeger 1.1.30 (yet AnothEr phaGe idEntifier) Deep-learning based bacteriophage discovery \nhttps://github.com/Yasas1994/Jaeger.git\nusage: jaeger run  -i INPUT -o OUTPUT\n\noptions:\n  -h, --help            show this help message and exit\n  -i INPUT, --input INPUT\n                        path to input file\n  -o OUTPUT, --output OUTPUT\n                        path to output directory\n  --fsize [FSIZE]       length of the sliding window (value must be 2^n). default:2048\n  --stride [STRIDE]     stride of the sliding window. default:2048 (stride==fsize)\n  -m {default,experimental_1,experimental_2}, --model {default,experimental_1,experimental_2}\n                        select a deep-learning model to use. default:default\n  -p, --prophage        extract and report prophage-like regions. default:False\n  -s [SENSITIVITY], --sensitivity [SENSITIVITY]\n                        sensitivity of the prophage extraction algorithm (between 0 - 4). default: 1.5\n  --lc [LC]             minimum contig length to run prophage extraction algorithm. default: 500000 bp\n  --rc [RC]             minium reliability score required to accept predictions. default: 0.2\n  --pc [PC]             minium phage score required to accept predictions. default: 3\n  --batch [BATCH]       parallel batch size, set to a lower value if your gpu runs out of memory. default:96\n  --workers [WORKERS]   number of threads to use. default:4\n  --getalllogits        writes window-wise scores to a .npy file\n  --getsequences        writes the putative phage sequences to a .fasta file\n  --cpu                 ignore available gpus and explicitly run jaeger on cpu. default: False\n  --physicalid [PHYSICALID]\n                        sets the default gpu device id (for multi-gpu systems). default: 0\n  --getalllabels        get predicted labels for Non-Viral contigs. default: False\n  -v, --verbose         Verbosity level : -vvv warning, -vv info, -v debug, (default info)\n\nMisc. Options:\n  -f, --overwrite       Overwrite existing files\n\n\n````\n---\n#### Python Library\n---\nJaeger can be integrated into python scripts using the jaegeraa python library as follows.\ncurrently the predict function accepts 4 different input types.\n1) Nucleotide sequence -> str\n2) List of Nucleotide sequences -> list(str,str,..)\n3) python file object -> (io.TextIOWrapper)\n4) python generator object that yields Nucleotide sequences as str (types.GeneratorType)\n5) Biopython Seq object\n\n```python\nfrom jaegeraa.api import Predictions\n\nmodel=Predictor()\npredictions=model.predict(input,stride=2048,fragsize=2048,batch=100)\nmodel.predict()\n\n```\n\nreturns a dictionary of lists in the following format\n\n```python\n{'contig_id': ['seq_0', 'seq_1'],\n 'length': [19000, 10503],\n '#num_prok_windows': [0, 0],\n '#num_vir_windows': [9, 0],\n '#num_fun_windows': [0, 5],\n '#num_arch_windows': [0, 0],\n 'prediction': ['Phage', 'Non-phage'],\n 'bac_score': [-1.9552012549506292, -1.9441368103027343],\n 'vir_score': [6.6312947273254395, -3.097817325592041],\n 'fun_score': [-5.712721400790745, -0.6870137214660644],\n 'arch_score': [-2.4369852013058133, -0.8941479325294495],\n 'window_summary': ['9V', '5n']}\n \n```\nThis dictionary can be easily converted to a pandas dataframe using DataFrame.from_dict() method\n```python\nimport pandas as pd\ndf = DataFrame.from_dict(predictions)\n```\n---\n#### Notes\n---\n* The program expects the input file to be in .fasta format.\n* The program uses a sliding window approach to scan the input sequences, so the stride argument determines how far the window will move after each scan.\n* The batch argument determines how many sequences will be processed in parallel.\n* The program is compatible with both CPU and GPU. By default, it will run on the GPU, but if the --cpu option is provided, it will use the specified number of threads for inference.\n* The program uses a pre-trained neural network model for phage genome prediction.\n* The --getalllabels option will output predicted labels for Non-Viral contigs, which can be useful for further analysis.\nIt's recommended to use the output of this program in conjunction with other methods for phage genome identification.\n\n---\n\n#### Predicting prophages with Jaeger\n---\n\n```\njaeger run -p -i NC_002695.fna -o outdir \n```\nThe outdir will contain the following files\n```\n|____Escherichia_coli_O157-H7_prophages\n| |____plots\n| | |____NC_002695_Escherichia_coli_O157-H7_jaeger.pdf\n| |____prophages_jaeger.tsv\n|____Escherichia_coli_O157-H7_jaeger.log\n|____Escherichia_coli_O157-H7_default_jaeger.tsv\n```\n\nusers can find the following visulaization in the ```plots``` directory <br><br>\n\n<p align=\"center\">\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/Yasas1994/Jaeger/assets/34155351/3efcd886-e45a-454f-9f61-53f954932b84\"  width=\"500\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/Yasas1994/Jaeger/assets/34155351/6acc1561-2c36-42c5-94ba-523721e902a5\"  width=\"500\">\n  <img alt=\"dark mode\" src=\"https://github.com/Yasas1994/Jaeger/assets/34155351/3efcd886-e45a-454f-9f61-53f954932b84\">\n</picture>\n</p>\n\n <br><br>\n\n\nlist of prophage coordinates can be found in ```prophages_jaeger.tsv```\n```\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 contig_id   \u2506 alignment_ \u2506 identiti \u2506 identity \u2506 \u2026 \u2506 gc%      \u2506 reject \u2506 attL       \u2506 attR       \u2502\n\u2502             \u2506 length     \u2506 es       \u2506          \u2506   \u2506          \u2506        \u2506            \u2506            \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 NC_002695   \u2506 16.0       \u2506 16.0     \u2506 1.0      \u2506 \u2026 \u2506 0.435049 \u2506 false  \u2506 GCACCATTTA \u2506 GCACCATTTA \u2502\n\u2502 Escherichia \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506 AATCAA     \u2506 AATCAA     \u2502\n\u2502 coli O157-\u2026 \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506            \u2506            \u2502\n\u2502 NC_002695   \u2506 15.0       \u2506 15.0     \u2506 1.0      \u2506 \u2026 \u2506 0.493497 \u2506 false  \u2506 GCTTTTTTAT \u2506 GCTTTTTTAT \u2502\n\u2502 Escherichia \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506 ACTAA      \u2506 ACTAA      \u2502\n\u2502 coli O157-\u2026 \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506            \u2506            \u2502\n\u2502 NC_002695   \u2506 60.0       \u2506 60.0     \u2506 1.0      \u2506 \u2026 \u2506 0.511819 \u2506 false  \u2506 TGGCGGAAGC \u2506 TGGCGGAAGC \u2502\n\u2502 Escherichia \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506 GCAGAGATTC \u2506 GCAGAGATTC \u2502\n\u2502 coli O157-\u2026 \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506 GAACTCTGGA \u2506 GAACTCTGGA \u2502\n\u2502             \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506 AC\u2026        \u2506 AC\u2026        \u2502\n\u2502 NC_002695   \u2506 16.0       \u2506 16.0     \u2506 1.0      \u2506 \u2026 \u2506 0.499516 \u2506 false  \u2506 TTCTTTATTA \u2506 TTCTTTATTA \u2502\n\u2502 Escherichia \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506 CCGGCG     \u2506 CCGGCG     \u2502\n\u2502 coli O157-\u2026 \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506            \u2506            \u2502\n\u2502 NC_002695   \u2506 14.0       \u2506 14.0     \u2506 1.0      \u2506 \u2026 \u2506 0.529465 \u2506 false  \u2506 CGTCATCAAG \u2506 CGTCATCAAG \u2502\n\u2502 Escherichia \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506 TGCA       \u2506 TGCA       \u2502\n\u2502 coli O157-\u2026 \u2506            \u2506          \u2506          \u2506   \u2506          \u2506        \u2506            \u2506            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n```\n---\n#### Visualizing predictions \n---\n\nYou can use [phage_contig_annotator](https://github.com/Yasas1994/phage_contig_annotator) to annotate and visualize Jaeger predictions.\n\n---\n#### Acknowlegements\n---\n\nThis work was supported by the European Union\u2019s Horizon 2020 research and innovation program, under the Marie Sk\u0142odowska-Curie Actions Innovative Training Networks grant agreement no. 955974 ([VIROINF](https://viroinf.eu/)), the European Research Council (ERC) Consolidator grant 865694 \n\n<img src=https://github.com/Yasas1994/Jaeger/assets/34155351/0cad76c6-6e4d-4b89-8e73-257137cf73a8 width=\"210\" height=\"84\">  &nbsp;&nbsp;&nbsp;  <img src=https://github.com/Yasas1994/Jaeger/assets/34155351/fef3bc35-8a8c-44c9-85ca-35ab0c68130e width=\"100\" height=\"100\">  &nbsp;&nbsp;&nbsp;   <img src=https://github.com/Yasas1994/Jaeger/assets/34155351/f15ab9b6-cade-4315-941c-e897f753dad9 width=\"150\" height=\"100\">\n\nThe ascii art logo is from  <font size=\"3\"> https://ascii.co.uk/ </font>\n\n\n"
}