{
  "cache_date": "2025-03-17T02:21:34.307854",
  "data": "<p align=\"center\">\n  <img src=\"VStrains_logo.png\" width=\"500\" title=\"VStrains logo\" alt=\"VStrains logo\">\n</p>\n\n# VStrains: De Novo Reconstruction of Viral Strains via Iterative Path Extraction From Assembly Graphs\n\n![GitHub](https://img.shields.io/github/license/metagentools/VStrains)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nManual\n===========\n\nTable of Contents\n-----------------\n\n1. [About VStrains](#sec1) </br>\n2. [Updates](#sec2) </br>\n3. [Installation](#sec3) </br>\n   3.1. [Option 1. Quick Install](#sec3.1) </br>\n   3.2. [Option 2. Manual Install](#sec3.2) </br>\n   3.3. [Download & Install VStrains](#sec3.3) </br>\n4. [Running VStrains](#sec4) </br>\n   4.1. [Quick Usage](#sec4.1) </br>\n   4.2. [Support SPAdes](#sec4.2) </br>\n   4.3. [Output](#sec4.3) </br>\n5. [Stand-alone binaries](#sec5) </br>\n6. [Experiment](#sec6) </br>\n7. [Citation](#sec7) </br>\n8. [Feedback and bug reports](#sec8)</br>\n\n<a name=\"sec1\"></a>\n# About VStrains\n\nVStrains is a de novo approach for reconstructing strains from viral quasispecies.\n\n<!-- Please refer to our [paper](NULL) and [supplementary Material](NULL) for details methodology. -->\n\n<a name=\"sec2\"></a>\n# Updates\n\n## VStrains 1.1.0 Release (03 Feb 2023)\n* Replace the PE link inference module `VStrains_Alignment.py` with `VStrains_PE_Inference.py`\n   \n   `VStrains_PE_Inference.py` implements a hash table approach that produce efficient perfect match lookup, the new module leads to consistent evaluation results and substantially decrease the runtime and memory usage against previous alignment approach.\n\n<!-- * support direct install for Conda -->\n\n<a name=\"sec3\"></a>\n# Installation\n\nVStrains requires a 64-bit Linux system or Mac OS and python (supported versions are python3: 3.2 and higher).\n\n<a name=\"sec3.1\"></a>\n## Option 1. Quick Install (**recommended**)\n\nInstall [(mini)conda](https://conda.io/miniconda.html) as a light-weighted package management tool. Run the following commands to initialize and setup the conda environment for VStrains\n\n```bash\n# add channels\nconda config --add channels defaults\nconda config --add channels bioconda\nconda config --add channels conda-forge\n\n# create conda environment\nconda create --name VStrains-env\n\n# activate conda environment\nconda activate VStrains-env\n\nconda install -c bioconda -c conda-forge python=3 graph-tool minimap2 numpy gfapy matplotlib\n```\n\n<a name=\"sec3.2\"></a>\n## Option 2. Manual Install\n\nManually install dependencies: \n- [minimap2](https://github.com/lh3/minimap2)  \n\nAnd python modules:\n- [graph-tool](https://graph-tool.skewed.de)\n- [numpy](https://numpy.org)\n- [gfapy](https://github.com/ggonnella/gfapy)\n- [matplotlib](https://matplotlib.org)\n\n<a name=\"sec3.3\"></a>\n## Download & Install VStrains\n\nAfter successfully setup the environment and dependencies, clone the VStrains into your desirable place.\n\n```bash\ngit clone https://github.com/metagentools/VStrains.git\n```\n\nInstall the VStrains via `Pip`\n\n```bash\ncd VStrains; pip install .\n```\n\nRun the following commands to ensure VStrains is correctly setup & installed.\n\n```bash\nvstrains -h\n```\n\n<a name=\"sec4\"></a>\n# Running VStrains\n\nVStrains supports assembly results from [SPAdes](https://github.com/ablab/spades) (includes metaSPAdes and metaviralSPAdes) and may supports other graph-based assemblers in the future.\n\n<a name=\"sec4.1\"></a>\n## Quick Usage\n\n```\nusage: VStrains [-h] -a {spades} -g GFA_FILE [-p PATH_FILE] [-o OUTPUT_DIR] -fwd FWD -rve RVE\n\nConstruct full-length viral strains under de novo approach from contigs and assembly graph, currently supports\nSPAdes\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a {spades}, --assembler {spades}\n                        name of the assembler used. [spades]\n  -g GFA_FILE, --graph GFA_FILE\n                        path to the assembly graph, (.gfa format)\n  -p PATH_FILE, --path PATH_FILE\n                        contig file from SPAdes (.paths format), only required for SPAdes. e.g., contigs.paths\n  -o OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        path to the output directory [default: acc/]\n  -fwd FWD, --fwd_file FWD\n                        paired-end sequencing reads, forward strand (.fastq format)\n  -rve RVE, --rve_file RVE\n                        paired-end sequencing reads, reverse strand (.fastq format)\n```\n\nVStrains takes as input an assembly graph in Graphical Fragment Assembly (GFA) Format and associated contig information, together with the raw reads in paired-end format (e.g., forward.fastq, reverse.fastq).\n\n<a name=\"sec4.2\"></a>\n## Support SPAdes\n\nWhen running SPAdes, we recommend to use `--careful` option for more accurate assembly results. Do not modify any contig/node name from the SPAdes assembly results for consistency. Please refer to [SPAdes](https://github.com/ablab/spades) for further guideline. Example usage as below:\n\n```bash\n# SPAdes assembler example, pair-end reads\npython spades.py -1 forward.fastq -2 reverse.fastq --careful -t 16 -o output_dir\n```\n\nBoth assembly graph (`assembly_graph_after_simplification.gfa`) and contig information (`contigs.paths`) can be found in the output directory after running SPAdes assembler. Please use them together with raw reads as inputs for VStrains, and set `-a` flag to `spades`. Example usage as below:\n\n```bash\nvstrains -a spades -g assembly_graph_after_simplification.gfa -p contigs.paths -o output_dir -fwd forward.fastq -rve reverse.fastq\n```\n\n<a name=\"sec4.3\"></a>\n## Output\n\n\nVStrains stores all output files in `<output_dir>`, which is set by the user.\n\n* `<output_dir>/aln/` directory contains paired-end (PE) linkage information, which is stored in `pe_info` and `st_info`.\n* `<output_dir>/gfa/` directory contains iteratively simplified assembly graphs, where `graph_L0.gfa` contains the assembly graph produced by SPAdes after Strandedness Canonization, `split_graph_final.gfa` contains the assembly graph after Graph Disentanglement, and `graph_S_final.gfa` contains the assembly graph after Contig-based Path Extraction, the rests are intermediate results. All the assembly graphs are in [GFA 1.0 format](https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md).\n* `<output_dir>/paf/` and `<output_dir>/tmp/` are temporary directories, feel free to ignore them.\n* `<output_dir>/strain.fasta` contains resulting strains in `.fasta`, the headers for each strain has the form `NODE_<strain name>_<sequence length>_<coverage>` which is compatiable to SPAdes contigs format.\n* `<output_dir>/strain.paths` contains paths in the assembly graph (input `GFA_FILE`) corresponding to `strain.fasta` using [Bandage](https://github.com/rrwick/Bandage) for further downstream analysis.\n* `<output_dir>/vstrains.log` contains the VStrains log.\n<!-- <a name=\"sec3.3\"></a> -->\n<!-- ## Parameters -->\n\n<!-- ### Minimum Node Coverage\n\nThis sets the minimum node coverage for filtering the inaccurate nodes from initial assembly graph. By default, the node coverage is automatically set based on coverage distribution, which demonstrates good result among all tested datasets. Please use `-mc` flag to input the customized minimum node coverage if needed.\n\n### Minimum Contig Length\n\nSince SPAdes normally output all the nodes from assembly graph as contigs, short or low coverage contig may lead to less accuracy and confidence. By default, single node contig with length less than 250bp or coverage less then `--mc` (defined above) is filtered out. Please use `-ml` flag to input the customized minimum contig length if needed. -->\n\n<a name=\"sec5\"></a>\n# Stand-alone binaries\n\n`evals/quast_evaluation.py` is a wrapper script for strain-level experimental result analysis using [MetaQUAST](https://github.com/ablab/quast).\n\n```\nusage: quast_evaluation.py [-h] -quast QUAST [-cs FILES [FILES ...]] [-d IDIR] -ref REF_FILE -o OUTPUT_DIR\n\nUse MetaQUAST to evaluate assembly result\n\noptions:\n  -h, --help            show this help message and exit\n  -quast QUAST, --path_to_quast QUAST\n                        path to MetaQuast python script, version >= 5.2.0\n  -cs FILES [FILES ...], --contig_files FILES [FILES ...]\n                        contig files from different tools, separated by space\n  -d IDIR, --contig_dir IDIR\n                        contig files from different tools, stored in the directory, .fasta format\n  -ref REF_FILE, --ref_file REF_FILE\n                        ref file (single)\n  -o OUTPUT_DIR, --output_dir OUTPUT_DIR\n                        output directory\n```\n\n<a name=\"sec6\"></a>\n# Experiment\n\nVStrains is evaluated on both simulated and real datasets under default settings, and the source of the datasets can be found in the links listed below:\n1. Simulated Dataset, can be found at [savage-benchmark](https://bitbucket.org/jbaaijens/savage-benchmarks/src/master/) (No preprocessing is required)\n   - 6 Poliovirus (20,000x)\n   - 10 HCV (20,000x)\n   - 15 ZIKV (20,000x)\n2. Real Dataset (please refer to [Supplementary Material](https://www.biorxiv.org/content/10.1101/2022.10.21.513181v3.supplementary-material) for preprocessing the real datasets)\n   - 5 HIV labmix (20,000x) [SRR961514](https://www.ncbi.nlm.nih.gov/sra/?term=SRR961514), reference genome sequences are available at [5 HIV References](https://github.com/cbg-ethz/5-virus-mix/blob/master/data/REF.fasta)\n   - 2 SARS-COV-2 (4,000x) [SRR18009684](https://www.ncbi.nlm.nih.gov/sra/?term=SRR18009684), [SRR18009686](https://www.ncbi.nlm.nih.gov/sra/?term=SRR18009686), pre-processed reads and individually assemble ground-truth reference sequences can be found at [2 SARS-COV-2 Dataset](https://github.com/RunpengLuo/sarscov2-4000x)\n\n<a name=\"sec7\"></a>\n# Citation\nVStrains has been accepted at [RECOMB 2023](http://recomb2023.bilkent.edu.tr/program.html) and manuscript is publicly available at [here](https://link.springer.com/chapter/10.1007/978-3-031-29119-7_1).\n\nIf you use VStrains in your work, please cite the following publications.\n\nRunpeng Luo and Yu Lin, VStrains: De Novo Reconstruction of Viral Strains via Iterative Path Extraction From Assembly Graphs\n\n<a name=\"sec8\"></a>\n# Feedback and bug reports\n\nThanks for using VStrains. If any bugs be experienced during execution, please re-run the program with additional `-d` flag and provide the `vstains.log` together with user cases via `Issues`\n"
}