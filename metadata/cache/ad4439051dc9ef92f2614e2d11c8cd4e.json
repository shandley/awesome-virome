{
  "cache_date": "2025-03-17T02:12:11.554896",
  "data": "![header](imgs/header.jpg)\n\n# AlphaFold\n\nThis package provides an implementation of the inference pipeline of AlphaFold\nv2. For simplicity, we refer to this model as AlphaFold throughout the rest of\nthis document.\n\nWe also provide:\n\n1.  An implementation of AlphaFold-Multimer. This represents a work in progress\n    and AlphaFold-Multimer isn't expected to be as stable as our monomer\n    AlphaFold system. [Read the guide](#updating-existing-installation) for how\n    to upgrade and update code.\n2.  The [technical note](docs/technical_note_v2.3.0.md) containing the models\n    and inference procedure for an updated AlphaFold v2.3.0.\n3.  A [CASP15 baseline](docs/casp15_predictions.zip) set of predictions along\n    with documentation of any manual interventions performed.\n\nAny publication that discloses findings arising from using this source code or\nthe model parameters should [cite](#citing-this-work) the\n[AlphaFold paper](https://doi.org/10.1038/s41586-021-03819-2) and, if\napplicable, the\n[AlphaFold-Multimer paper](https://www.biorxiv.org/content/10.1101/2021.10.04.463034v1).\n\nPlease also refer to the\n[Supplementary Information](https://static-content.springer.com/esm/art%3A10.1038%2Fs41586-021-03819-2/MediaObjects/41586_2021_3819_MOESM1_ESM.pdf)\nfor a detailed description of the method.\n\n**You can use a slightly simplified version of AlphaFold with\ncommunity-supported versions (see below).\n\nIf you have any questions, please contact the AlphaFold team at\n[alphafold@deepmind.com](mailto:alphafold@deepmind.com).\n\n![CASP14 predictions](imgs/casp14_predictions.gif)\n\n## Installation and running your first prediction\n\nYou will need a machine running Linux, AlphaFold does not support other\noperating systems. Full installation requires up to 3 TB of disk space to keep\ngenetic databases (SSD storage is recommended) and a modern NVIDIA GPU (GPUs\nwith more memory can predict larger protein structures).\n\nPlease follow these steps:\n\n1.  Install [Docker](https://www.docker.com/).\n\n    *   Install\n        [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\n        for GPU support.\n    *   Setup running\n        [Docker as a non-root user](https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user).\n\n1.  Clone this repository and `cd` into it.\n\n    ```bash\n    git clone https://github.com/deepmind/alphafold.git\n    cd ./alphafold\n    ```\n\n1.  Download genetic databases and model parameters:\n\n    *   Install `aria2c`. On most Linux distributions it is available via the\n        package manager as the `aria2` package (on Debian-based distributions\n        this can be installed by running `sudo apt install aria2`).\n\n    *   Please use the script `scripts/download_all_data.sh` to download and set\n        up full databases. This may take substantial time (download size is 556\n        GB), so we recommend running this script in the background:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR> > download.log 2> download_all.log &\n    ```\n\n    *   **Note: The download directory `<DOWNLOAD_DIR>` should *not* be a\n        subdirectory in the AlphaFold repository directory.** If it is, the\n        Docker build will be slow as the large databases will be copied into the\n        docker build context.\n\n    *   It is possible to run AlphaFold with reduced databases; please refer to\n        the [complete documentation](#genetic-databases).\n\n1.  Check that AlphaFold will be able to use a GPU by running:\n\n    ```bash\n    docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi\n    ```\n\n    The output of this command should show a list of your GPUs. If it doesn't,\n    check if you followed all steps correctly when setting up the\n    [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html)\n    or take a look at the following\n    [NVIDIA Docker issue](https://github.com/NVIDIA/nvidia-docker/issues/1447#issuecomment-801479573).\n\n    If you wish to run AlphaFold using Singularity (a common containerization\n    platform on HPC systems) we recommend using some of the third party\n    Singularity setups as linked in\n    https://github.com/deepmind/alphafold/issues/10 or\n    https://github.com/deepmind/alphafold/issues/24.\n\n1.  Build the Docker image:\n\n    ```bash\n    docker build -f docker/Dockerfile -t alphafold .\n    ```\n\n    If you encounter the following error:\n\n    ```\n    W: GPG error: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC\n    E: The repository 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease' is not signed.\n    ```\n\n    use the workaround described in\n    https://github.com/deepmind/alphafold/issues/463#issuecomment-1124881779.\n\n1.  Install the `run_docker.py` dependencies. Note: You may optionally wish to\n    create a\n    [Python Virtual Environment](https://docs.python.org/3/tutorial/venv.html)\n    to prevent conflicts with your system's Python environment.\n\n    ```bash\n    pip3 install -r docker/requirements.txt\n    ```\n\n1.  Make sure that the output directory exists (the default is `/tmp/alphafold`)\n    and that you have sufficient permissions to write into it.\n\n1.  Run `run_docker.py` pointing to a FASTA file containing the protein\n    sequence(s) for which you wish to predict the structure (`--fasta_paths`\n    parameter). AlphaFold will search for the available templates before the\n    date specified by the `--max_template_date` parameter; this could be used to\n    avoid certain templates during modeling. `--data_dir` is the directory with\n    downloaded genetic databases and `--output_dir` is the absolute path to the\n    output directory.\n\n    ```bash\n    python3 docker/run_docker.py \\\n      --fasta_paths=your_protein.fasta \\\n      --max_template_date=2022-01-01 \\\n      --data_dir=$DOWNLOAD_DIR \\\n      --output_dir=/home/user/absolute_path_to_the_output_dir\n    ```\n\n1.  Once the run is over, the output directory shall contain predicted\n    structures of the target protein. Please check the documentation below for\n    additional options and troubleshooting tips.\n\n### Genetic databases\n\nThis step requires `aria2c` to be installed on your machine.\n\nAlphaFold needs multiple genetic (sequence) databases to run:\n\n*   [BFD](https://bfd.mmseqs.com/),\n*   [MGnify](https://www.ebi.ac.uk/metagenomics/),\n*   [PDB70](http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/),\n*   [PDB](https://www.rcsb.org/) (structures in the mmCIF format),\n*   [PDB seqres](https://www.rcsb.org/) \u2013 only for AlphaFold-Multimer,\n*   [UniRef30 (FKA UniClust30)](https://uniclust.mmseqs.com/),\n*   [UniProt](https://www.uniprot.org/uniprot/) \u2013 only for AlphaFold-Multimer,\n*   [UniRef90](https://www.uniprot.org/help/uniref).\n\nWe provide a script `scripts/download_all_data.sh` that can be used to download\nand set up all of these databases:\n\n*   Recommended default:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR>\n    ```\n\n    will download the full databases.\n\n*   With `reduced_dbs` parameter:\n\n    ```bash\n    scripts/download_all_data.sh <DOWNLOAD_DIR> reduced_dbs\n    ```\n\n    will download a reduced version of the databases to be used with the\n    `reduced_dbs` database preset. This shall be used with the corresponding\n    AlphaFold parameter `--db_preset=reduced_dbs` later during the AlphaFold run\n    (please see [AlphaFold parameters](#running-alphafold) section).\n\n:ledger: **Note: The download directory `<DOWNLOAD_DIR>` should *not* be a\nsubdirectory in the AlphaFold repository directory.** If it is, the Docker build\nwill be slow as the large databases will be copied during the image creation.\n\nWe don't provide exactly the database versions used in CASP14 \u2013 see the\n[note on reproducibility](#note-on-casp14-reproducibility). Some of the\ndatabases are mirrored for speed, see [mirrored databases](#mirrored-databases).\n\n:ledger: **Note: The total download size for the full databases is around 556 GB\nand the total size when unzipped is 2.62 TB. Please make sure you have a large\nenough hard drive space, bandwidth and time to download. We recommend using an\nSSD for better genetic search performance.**\n\n:ledger: **Note: If the download directory and datasets don't have full read and\nwrite permissions, it can cause errors with the MSA tools, with opaque\n(external) error messages. Please ensure the required permissions are applied,\ne.g. with the `sudo chmod 755 --recursive \"$DOWNLOAD_DIR\"` command.**\n\nThe `download_all_data.sh` script will also download the model parameter files.\nOnce the script has finished, you should have the following directory structure:\n\n```\n$DOWNLOAD_DIR/                             # Total: ~ 2.62 TB (download: 556 GB)\n    bfd/                                   # ~ 1.8 TB (download: 271.6 GB)\n        # 6 files.\n    mgnify/                                # ~ 120 GB (download: 67 GB)\n        mgy_clusters_2022_05.fa\n    params/                                # ~ 5.3 GB (download: 5.3 GB)\n        # 5 CASP14 models,\n        # 5 pTM models,\n        # 5 AlphaFold-Multimer models,\n        # LICENSE,\n        # = 16 files.\n    pdb70/                                 # ~ 56 GB (download: 19.5 GB)\n        # 9 files.\n    pdb_mmcif/                             # ~ 238 GB (download: 43 GB)\n        mmcif_files/\n            # About 199,000 .cif files.\n        obsolete.dat\n    pdb_seqres/                            # ~ 0.2 GB (download: 0.2 GB)\n        pdb_seqres.txt\n    small_bfd/                             # ~ 17 GB (download: 9.6 GB)\n        bfd-first_non_consensus_sequences.fasta\n    uniref30/                              # ~ 206 GB (download: 52.5 GB)\n        # 7 files.\n    uniprot/                               # ~ 105 GB (download: 53 GB)\n        uniprot.fasta\n    uniref90/                              # ~ 67 GB (download: 34 GB)\n        uniref90.fasta\n```\n\n`bfd/` is only downloaded if you download the full databases, and `small_bfd/`\nis only downloaded if you download the reduced databases.\n\n### Model parameters\n\nWhile the AlphaFold code is licensed under the Apache 2.0 License, the AlphaFold\nparameters and CASP15 prediction data are made available under the terms of the\nCC BY 4.0 license. Please see the [Disclaimer](#license-and-disclaimer) below\nfor more detail.\n\nThe AlphaFold parameters are available from\nhttps://storage.googleapis.com/alphafold/alphafold_params_2022-12-06.tar, and\nare downloaded as part of the `scripts/download_all_data.sh` script. This script\nwill download parameters for:\n\n*   5 models which were used during CASP14, and were extensively validated for\n    structure prediction quality (see Jumper et al. 2021, Suppl. Methods 1.12\n    for details).\n*   5 pTM models, which were fine-tuned to produce pTM (predicted TM-score) and\n    (PAE) predicted aligned error values alongside their structure predictions\n    (see Jumper et al. 2021, Suppl. Methods 1.9.7 for details).\n*   5 AlphaFold-Multimer models that produce pTM and PAE values alongside their\n    structure predictions.\n\n### Updating existing installation\n\nIf you have a previous version you can either reinstall fully from scratch\n(remove everything and run the setup from scratch) or you can do an incremental\nupdate that will be significantly faster but will require a bit more work. Make\nsure you follow these steps in the exact order they are listed below:\n\n1.  **Update the code.**\n    *   Go to the directory with the cloned AlphaFold repository and run `git\n        fetch origin main` to get all code updates.\n1.  **Update the UniProt, UniRef, MGnify and PDB seqres databases.**\n    *   Remove `<DOWNLOAD_DIR>/uniprot`.\n    *   Run `scripts/download_uniprot.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/uniclust30`.\n    *   Run `scripts/download_uniref30.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/uniref90`.\n    *   Run `scripts/download_uniref90.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/mgnify`.\n    *   Run `scripts/download_mgnify.sh <DOWNLOAD_DIR>`.\n    *   Remove `<DOWNLOAD_DIR>/pdb_mmcif`. It is needed to have PDB SeqRes and\n        PDB from exactly the same date. Failure to do this step will result in\n        potential errors when searching for templates when running\n        AlphaFold-Multimer.\n    *   Run `scripts/download_pdb_mmcif.sh <DOWNLOAD_DIR>`.\n    *   Run `scripts/download_pdb_seqres.sh <DOWNLOAD_DIR>`.\n1.  **Update the model parameters.**\n    *   Remove the old model parameters in `<DOWNLOAD_DIR>/params`.\n    *   Download new model parameters using\n        `scripts/download_alphafold_params.sh <DOWNLOAD_DIR>`.\n1.  **Follow [Running AlphaFold](#running-alphafold).**\n\n#### Using deprecated model weights\n\nTo use the deprecated v2.2.0 AlphaFold-Multimer model weights:\n\n1.  Change `SOURCE_URL` in `scripts/download_alphafold_params.sh` to\n    `https://storage.googleapis.com/alphafold/alphafold_params_2022-03-02.tar`,\n    and download the old parameters.\n2.  Change the `_v3` to `_v2` in the multimer `MODEL_PRESETS` in `config.py`.\n\nTo use the deprecated v2.1.0 AlphaFold-Multimer model weights:\n\n1.  Change `SOURCE_URL` in `scripts/download_alphafold_params.sh` to\n    `https://storage.googleapis.com/alphafold/alphafold_params_2022-01-19.tar`,\n    and download the old parameters.\n2.  Remove the `_v3` in the multimer `MODEL_PRESETS` in `config.py`.\n\n## Running AlphaFold\n\n**The simplest way to run AlphaFold is using the provided Docker script.** This\nwas tested on Google Cloud with a machine using the `nvidia-gpu-cloud-image`\nwith 12 vCPUs, 85 GB of RAM, a 100 GB boot disk, the databases on an additional\n3 TB disk, and an A100 GPU. For your first run, please follow the instructions\nfrom\n[Installation and running your first prediction](#installation-and-running-your-first-prediction)\nsection.\n\n1.  By default, Alphafold will attempt to use all visible GPU devices. To use a\n    subset, specify a comma-separated list of GPU UUID(s) or index(es) using the\n    `--gpu_devices` flag. See\n    [GPU enumeration](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#gpu-enumeration)\n    for more details.\n\n1.  You can control which AlphaFold model to run by adding the `--model_preset=`\n    flag. We provide the following models:\n\n    *   **monomer**: This is the original model used at CASP14 with no\n        ensembling.\n\n    *   **monomer\\_casp14**: This is the original model used at CASP14 with\n        `num_ensemble=8`, matching our CASP14 configuration. This is largely\n        provided for reproducibility as it is 8x more computationally expensive\n        for limited accuracy gain (+0.1 average GDT gain on CASP14 domains).\n\n    *   **monomer\\_ptm**: This is the original CASP14 model fine tuned with the\n        pTM head, providing a pairwise confidence measure. It is slightly less\n        accurate than the normal monomer model.\n\n    *   **multimer**: This is the [AlphaFold-Multimer](#citing-this-work) model.\n        To use this model, provide a multi-sequence FASTA file. In addition, the\n        UniProt database should have been downloaded.\n\n1.  You can control MSA speed/quality tradeoff by adding\n    `--db_preset=reduced_dbs` or `--db_preset=full_dbs` to the run command. We\n    provide the following presets:\n\n    *   **reduced\\_dbs**: This preset is optimized for speed and lower hardware\n        requirements. It runs with a reduced version of the BFD database. It\n        requires 8 CPU cores (vCPUs), 8 GB of RAM, and 600 GB of disk space.\n\n    *   **full\\_dbs**: This runs with all genetic databases used at CASP14.\n\n    Running the command above with the `monomer` model preset and the\n    `reduced_dbs` data preset would look like this:\n\n    ```bash\n    python3 docker/run_docker.py \\\n      --fasta_paths=T1050.fasta \\\n      --max_template_date=2020-05-14 \\\n      --model_preset=monomer \\\n      --db_preset=reduced_dbs \\\n      --data_dir=$DOWNLOAD_DIR \\\n      --output_dir=/home/user/absolute_path_to_the_output_dir\n    ```\n\n1.  After generating the predicted model, AlphaFold runs a relaxation step to\n    improve local geometry. By default, only the best model (by pLDDT) is\n    relaxed (`--models_to_relax=best`), but also all of the models\n    (`--models_to_relax=all`) or none of the models (`--models_to_relax=none`)\n    can be relaxed.\n\n1.  The relaxation step can be run on GPU (faster, but could be less stable) or\n    CPU (slow, but stable). This can be controlled with\n    `--enable_gpu_relax=true` (default) or `--enable_gpu_relax=false`.\n\n1.  AlphaFold can re-use MSAs (multiple sequence alignments) for the same\n    sequence via `--use_precomputed_msas=true` option; this can be useful for\n    trying different AlphaFold parameters. This option assumes that the\n    directory structure generated by the first AlphaFold run in the output\n    directory exists and that the protein sequence is the same.\n\n### Running AlphaFold-Multimer\n\nAll steps are the same as when running the monomer system, but you will have to\n\n*   provide an input fasta with multiple sequences,\n*   set `--model_preset=multimer`,\n\nAn example that folds a protein complex `multimer.fasta`:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=multimer.fasta \\\n  --max_template_date=2020-05-14 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n\nBy default the multimer system will run 5 seeds per model (25 total predictions)\nfor a small drop in accuracy you may wish to run a single seed per model. This\ncan be done via the `--num_multimer_predictions_per_model` flag, e.g. set it to\n`--num_multimer_predictions_per_model=1` to run a single seed per model.\n\n### AlphaFold prediction speed\n\nThe table below reports prediction runtimes for proteins of various lengths. We\nonly measure unrelaxed structure prediction with three recycles while excluding\nruntimes from MSA and template search. When running `docker/run_docker.py` with\n`--benchmark=true`, this runtime is stored in `timings.json`. All runtimes are\nfrom a single A100 NVIDIA GPU. Prediction speed on A100 for smaller structures\ncan be improved by increasing `global_config.subbatch_size` in\n`alphafold/model/config.py`.\n\nNo. residues | Prediction time (s)\n-----------: | ------------------:\n100          | 4.9\n200          | 7.7\n300          | 13\n400          | 18\n500          | 29\n600          | 36\n700          | 53\n800          | 60\n900          | 91\n1,000        | 96\n1,100        | 140\n1,500        | 280\n2,000        | 450\n2,500        | 969\n3,000        | 1,240\n3,500        | 2,465\n4,000        | 5,660\n4,500        | 12,475\n5,000        | 18,824\n\n### Examples\n\nBelow are examples on how to use AlphaFold in different scenarios.\n\n#### Folding a monomer\n\nSay we have a monomer with the sequence `<SEQUENCE>`. The input fasta should be:\n\n```fasta\n>sequence_name\n<SEQUENCE>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=monomer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=monomer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n\n#### Folding a homomer\n\nSay we have a homomer with 3 copies of the same sequence `<SEQUENCE>`. The input\nfasta should be:\n\n```fasta\n>sequence_1\n<SEQUENCE>\n>sequence_2\n<SEQUENCE>\n>sequence_3\n<SEQUENCE>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=homomer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n\n#### Folding a heteromer\n\nSay we have an A2B3 heteromer, i.e. with 2 copies of `<SEQUENCE A>` and 3 copies\nof `<SEQUENCE B>`. The input fasta should be:\n\n```fasta\n>sequence_1\n<SEQUENCE A>\n>sequence_2\n<SEQUENCE A>\n>sequence_3\n<SEQUENCE B>\n>sequence_4\n<SEQUENCE B>\n>sequence_5\n<SEQUENCE B>\n```\n\nThen run the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=heteromer.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n\n#### Folding multiple monomers one after another\n\nSay we have a two monomers, `monomer1.fasta` and `monomer2.fasta`.\n\nWe can fold both sequentially by using the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=monomer1.fasta,monomer2.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=monomer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n\n#### Folding multiple multimers one after another\n\nSay we have a two multimers, `multimer1.fasta` and `multimer2.fasta`.\n\nWe can fold both sequentially by using the following command:\n\n```bash\npython3 docker/run_docker.py \\\n  --fasta_paths=multimer1.fasta,multimer2.fasta \\\n  --max_template_date=2021-11-01 \\\n  --model_preset=multimer \\\n  --data_dir=$DOWNLOAD_DIR \\\n  --output_dir=/home/user/absolute_path_to_the_output_dir\n```\n\n### AlphaFold output\n\nThe outputs will be saved in a subdirectory of the directory provided via the\n`--output_dir` flag of `run_docker.py` (defaults to `/tmp/alphafold/`). The\noutputs include the computed MSAs, unrelaxed structures, relaxed structures,\nranked structures, raw model outputs, prediction metadata, and section timings.\nThe `--output_dir` directory will have the following structure:\n\n```\n<target_name>/\n    features.pkl\n    ranked_{0,1,2,3,4}.pdb\n    ranking_debug.json\n    relax_metrics.json\n    relaxed_model_{1,2,3,4,5}.pdb\n    result_model_{1,2,3,4,5}.pkl\n    timings.json\n    unrelaxed_model_{1,2,3,4,5}.pdb\n    msas/\n        bfd_uniref_hits.a3m\n        mgnify_hits.sto\n        uniref90_hits.sto\n```\n\nThe contents of each output file are as follows:\n\n*   `features.pkl` \u2013 A `pickle` file containing the input feature NumPy arrays\n    used by the models to produce the structures.\n*   `unrelaxed_model_*.pdb` \u2013 A PDB format text file containing the predicted\n    structure, exactly as outputted by the model.\n*   `relaxed_model_*.pdb` \u2013 A PDB format text file containing the predicted\n    structure, after performing an Amber relaxation procedure on the unrelaxed\n    structure prediction (see Jumper et al. 2021, Suppl. Methods 1.8.6 for\n    details).\n*   `ranked_*.pdb` \u2013 A PDB format text file containing the predicted structures,\n    after reordering by model confidence. Here `ranked_i.pdb` should contain the\n    prediction with the (`i + 1`)-th highest confidence (so that `ranked_0.pdb`\n    has the highest confidence). To rank model confidence, we use predicted LDDT\n    (pLDDT) scores (see Jumper et al. 2021, Suppl. Methods 1.9.6 for details).\n    If `--models_to_relax=all` then all ranked structures are relaxed. If\n    `--models_to_relax=best` then only `ranked_0.pdb` is relaxed (the rest are\n    unrelaxed). If `--models_to_relax=none`, then the ranked structures are all\n    unrelaxed.\n*   `ranking_debug.json` \u2013 A JSON format text file containing the pLDDT values\n    used to perform the model ranking, and a mapping back to the original model\n    names.\n*   `relax_metrics.json` \u2013 A JSON format text file containing relax metrics, for\n    instance remaining violations.\n*   `timings.json` \u2013 A JSON format text file containing the times taken to run\n    each section of the AlphaFold pipeline.\n*   `msas/` - A directory containing the files describing the various genetic\n    tool hits that were used to construct the input MSA.\n*   `result_model_*.pkl` \u2013 A `pickle` file containing a nested dictionary of the\n    various NumPy arrays directly produced by the model. In addition to the\n    output of the structure module, this includes auxiliary outputs such as:\n\n    *   Distograms (`distogram/logits` contains a NumPy array of shape [N_res,\n        N_res, N_bins] and `distogram/bin_edges` contains the definition of the\n        bins).\n    *   Per-residue pLDDT scores (`plddt` contains a NumPy array of shape\n        [N_res] with the range of possible values from `0` to `100`, where `100`\n        means most confident). This can serve to identify sequence regions\n        predicted with high confidence or as an overall per-target confidence\n        score when averaged across residues.\n    *   Present only if using pTM models: predicted TM-score (`ptm` field\n        contains a scalar). As a predictor of a global superposition metric,\n        this score is designed to also assess whether the model is confident in\n        the overall domain packing.\n    *   Present only if using pTM models: predicted pairwise aligned errors\n        (`predicted_aligned_error` contains a NumPy array of shape [N_res,\n        N_res] with the range of possible values from `0` to\n        `max_predicted_aligned_error`, where `0` means most confident). This can\n        serve for a visualisation of domain packing confidence within the\n        structure.\n\nThe pLDDT confidence measure is stored in the B-factor field of the output PDB\nfiles (although unlike a B-factor, higher pLDDT is better, so care must be taken\nwhen using for tasks such as molecular replacement).\n\nThis code has been tested to match mean top-1 accuracy on a CASP14 test set with\npLDDT ranking over 5 model predictions (some CASP targets were run with earlier\nversions of AlphaFold and some had manual interventions; see our forthcoming\npublication for details). Some targets such as T1064 may also have high\nindividual run variance over random seeds.\n\n## Inferencing many proteins\n\nThe provided inference script is optimized for predicting the structure of a\nsingle protein, and it will compile the neural network to be specialized to\nexactly the size of the sequence, MSA, and templates. For large proteins, the\ncompile time is a negligible fraction of the runtime, but it may become more\nsignificant for small proteins or if the multi-sequence alignments are already\nprecomputed. In the bulk inference case, it may make sense to use our\n`make_fixed_size` function to pad the inputs to a uniform size, thereby reducing\nthe number of compilations required.\n\nWe do not provide a bulk inference script, but it should be straightforward to\ndevelop on top of the `RunModel.predict` method with a parallel system for\nprecomputing multi-sequence alignments. Alternatively, this script can be run\nrepeatedly with only moderate overhead.\n\n## Note on CASP14 reproducibility\n\nAlphaFold's output for a small number of proteins has high inter-run variance,\nand may be affected by changes in the input data. The CASP14 target T1064 is a\nnotable example; the large number of SARS-CoV-2-related sequences recently\ndeposited changes its MSA significantly. This variability is somewhat mitigated\nby the model selection process; running 5 models and taking the most confident.\n\nTo reproduce the results of our CASP14 system as closely as possible you must\nuse the same database versions we used in CASP. These may not match the default\nversions downloaded by our scripts.\n\nFor genetics:\n\n*   UniRef90:\n    [v2020_01](https://ftp.uniprot.org/pub/databases/uniprot/previous_releases/release-2020_01/uniref/)\n*   MGnify:\n    [v2018_12](http://ftp.ebi.ac.uk/pub/databases/metagenomics/peptide_database/2018_12/)\n*   Uniclust30: [v2018_08](http://wwwuser.gwdg.de/~compbiol/uniclust/2018_08/)\n*   BFD: [only version available](https://bfd.mmseqs.com/)\n\nFor templates:\n\n*   PDB: (downloaded 2020-05-14)\n*   PDB70:\n    [2020-05-13](http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/old-releases/pdb70_from_mmcif_200513.tar.gz)\n\nAn alternative for templates is to use the latest PDB and PDB70, but pass the\nflag `--max_template_date=2020-05-14`, which restricts templates only to\nstructures that were available at the start of CASP14.\n\n## Citing this work\n\nIf you use the code or data in this package, please cite:\n\n```bibtex\n@Article{AlphaFold2021,\n  author  = {Jumper, John and Evans, Richard and Pritzel, Alexander and Green, Tim and Figurnov, Michael and Ronneberger, Olaf and Tunyasuvunakool, Kathryn and Bates, Russ and {\\v{Z}}{\\'\\i}dek, Augustin and Potapenko, Anna and Bridgland, Alex and Meyer, Clemens and Kohl, Simon A A and Ballard, Andrew J and Cowie, Andrew and Romera-Paredes, Bernardino and Nikolov, Stanislav and Jain, Rishub and Adler, Jonas and Back, Trevor and Petersen, Stig and Reiman, David and Clancy, Ellen and Zielinski, Michal and Steinegger, Martin and Pacholska, Michalina and Berghammer, Tamas and Bodenstein, Sebastian and Silver, David and Vinyals, Oriol and Senior, Andrew W and Kavukcuoglu, Koray and Kohli, Pushmeet and Hassabis, Demis},\n  journal = {Nature},\n  title   = {Highly accurate protein structure prediction with {AlphaFold}},\n  year    = {2021},\n  volume  = {596},\n  number  = {7873},\n  pages   = {583--589},\n  doi     = {10.1038/s41586-021-03819-2}\n}\n```\n\nIn addition, if you use the AlphaFold-Multimer mode, please cite:\n\n```bibtex\n@article {AlphaFold-Multimer2021,\n  author       = {Evans, Richard and O{\\textquoteright}Neill, Michael and Pritzel, Alexander and Antropova, Natasha and Senior, Andrew and Green, Tim and {\\v{Z}}{\\'\\i}dek, Augustin and Bates, Russ and Blackwell, Sam and Yim, Jason and Ronneberger, Olaf and Bodenstein, Sebastian and Zielinski, Michal and Bridgland, Alex and Potapenko, Anna and Cowie, Andrew and Tunyasuvunakool, Kathryn and Jain, Rishub and Clancy, Ellen and Kohli, Pushmeet and Jumper, John and Hassabis, Demis},\n  journal      = {bioRxiv},\n  title        = {Protein complex prediction with AlphaFold-Multimer},\n  year         = {2021},\n  elocation-id = {2021.10.04.463034},\n  doi          = {10.1101/2021.10.04.463034},\n  URL          = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034},\n  eprint       = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034.full.pdf},\n}\n```\n\n## Community contributions\n\nColab notebooks provided by the community (please note that these notebooks may\nvary from our full AlphaFold system and we did not validate their accuracy):\n\n*   The\n    [ColabFold AlphaFold2 notebook](https://colab.research.google.com/github/sokrypton/ColabFold/blob/main/AlphaFold2.ipynb)\n    by Martin Steinegger, Sergey Ovchinnikov and Milot Mirdita, which uses an\n    API hosted at the S\u00f6dinglab based on the MMseqs2 server\n    [(Mirdita et al. 2019, Bioinformatics)](https://academic.oup.com/bioinformatics/article/35/16/2856/5280135)\n    for the multiple sequence alignment creation.\n\n## Acknowledgements\n\nAlphaFold communicates with and/or references the following separate libraries\nand packages:\n\n*   [Abseil](https://github.com/abseil/abseil-py)\n*   [Biopython](https://biopython.org)\n*   [Chex](https://github.com/deepmind/chex)\n*   [Colab](https://research.google.com/colaboratory/)\n*   [Docker](https://www.docker.com)\n*   [HH Suite](https://github.com/soedinglab/hh-suite)\n*   [HMMER Suite](http://eddylab.org/software/hmmer)\n*   [Haiku](https://github.com/deepmind/dm-haiku)\n*   [Immutabledict](https://github.com/corenting/immutabledict)\n*   [JAX](https://github.com/google/jax/)\n*   [Kalign](https://msa.sbc.su.se/cgi-bin/msa.cgi)\n*   [matplotlib](https://matplotlib.org/)\n*   [ML Collections](https://github.com/google/ml_collections)\n*   [NumPy](https://numpy.org)\n*   [OpenMM](https://github.com/openmm/openmm)\n*   [OpenStructure](https://openstructure.org)\n*   [pandas](https://pandas.pydata.org/)\n*   [pymol3d](https://github.com/avirshup/py3dmol)\n*   [SciPy](https://scipy.org)\n*   [Sonnet](https://github.com/deepmind/sonnet)\n*   [TensorFlow](https://github.com/tensorflow/tensorflow)\n*   [Tree](https://github.com/deepmind/tree)\n*   [tqdm](https://github.com/tqdm/tqdm)\n\nWe thank all their contributors and maintainers!\n\n## Get in Touch\n\nIf you have any questions not covered in this overview, please contact the\nAlphaFold team at [alphafold@deepmind.com](mailto:alphafold@deepmind.com).\n\nWe would love to hear your feedback and understand how AlphaFold has been useful\nin your research. Share your stories with us at\n[alphafold@deepmind.com](mailto:alphafold@deepmind.com).\n\n## License and Disclaimer\n\nThis is not an officially supported Google product.\n\nCopyright 2022 DeepMind Technologies Limited.\n\nAlphaFold 2 and its output are for theoretical modeling only. They are not\nintended, validated, or approved for clinical use. You should not use the\nAlphaFold 2 or its output for clinical purposes or rely on them for medical or\nother professional advice. Any content regarding those topics is provided for\ninformational purposes only and is not a substitute for advice from a qualified\nprofessional.\n\nOutput of AlphaFold 2 are predictions with varying levels of confidence and\nshould be interpreted carefully. Use discretion before relying on, publishing,\ndownloading or otherwise using AlphaFold 2 and its output.\n\n### AlphaFold Code License\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at https://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n\n### Model Parameters License\n\nThe AlphaFold parameters are made available under the terms of the Creative\nCommons Attribution 4.0 International (CC BY 4.0) license. You can find details\nat: https://creativecommons.org/licenses/by/4.0/legalcode\n\n### Third-party software\n\nUse of the third-party software, libraries or code referred to in the\n[Acknowledgements](#acknowledgements) section above may be governed by separate\nterms and conditions or license provisions. Your use of the third-party\nsoftware, libraries or code is subject to any such terms and you should check\nthat you can comply with any applicable restrictions or terms and conditions\nbefore use.\n\n### Mirrored Databases\n\nThe following databases have been mirrored by DeepMind, and are available with\nreference to the following:\n\n*   [BFD](https://bfd.mmseqs.com/) (unmodified), by Steinegger M. and S\u00f6ding J.,\n    available under a\n    [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\n\n*   [BFD](https://bfd.mmseqs.com/) (modified), by Steinegger M. and S\u00f6ding J.,\n    modified by DeepMind, available under a\n    [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\n    See the Methods section of the\n    [AlphaFold proteome paper](https://www.nature.com/articles/s41586-021-03828-1)\n    for details.\n\n*   [Uniref30: v2021_03](http://wwwuser.gwdg.de/~compbiol/uniclust/2021_03/)\n    (unmodified), by Mirdita M. et al., available under a\n    [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/).\n\n*   [MGnify: v2022_05](http://ftp.ebi.ac.uk/pub/databases/metagenomics/peptide_database/2022_05/README.txt)\n    (unmodified), by Mitchell AL et al., available free of all copyright\n    restrictions and made fully and freely available for both non-commercial and\n    commercial use under\n    [CC0 1.0 Universal (CC0 1.0) Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/).\n"
}