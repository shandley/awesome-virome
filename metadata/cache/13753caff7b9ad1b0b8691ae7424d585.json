{
  "cache_date": "2025-03-17T02:17:55.164142",
  "data": "# ViralCC: leveraging metagenomic proximity-ligation to retrieve complete viral genomes\n\n- [Overview](#overview)\n- [System Requirements](#system-requirements)\n- [Installation Guide](#installation-guide)\n- [A test dataset to demo ViralCC](#a-test-dataset-to-demo-viralcc)\n- [Instruction to process raw data](#instruction-to-process-raw-data)\n- [Instruction to run ViralCC](#instruction-to-run-viralcc)\n- [Instruction of reproducing results in ViralCC paper](https://github.com/dyxstat/Reproduce_ViralCC)\n- [Contacts and bug reports](#contacts-and-bug-reports)\n- [Copyright and License Information](#copyright-and-license-information)\n- [Issues](https://github.com/dyxstat/ViralCC/issues)\n\n# Overview\n`ViralCC` is a new open-source metagenomic Hi-C-based binning pipeline to recover high-quality viral genomes. \n`ViralCC` not only considers the Hi-C interaction graph, but also puts forward a novel host proximity graph of viral contigs \nas a complementary source of information to the remarkably sparse Hi-C interaction map. The two graphs are then integrated together, \nfollowed by the Leiden graph clustering using the integrative graph to generate draft viral genomes.\n\n* **If you want to reproduce results in our ViralCC paper, please read our instructions [here](https://github.com/dyxstat/Reproduce_ViralCC).**\n\n* **Scripts to process the intermediate data and plot figures of our ViralCC paper are available [here](https://github.com/dyxstat/Reproduce_ViralCC/tree/main/Scripts).**\n\n# System Requirements\n## Hardware requirements\n`ViralCC` requires only a standard computer with enough RAM to support the in-memory operations.\n\n## Software requirements\n### OS Requirements\n`ViralCC` v1.0.0 is supported and tested in *MacOS* and *Linux* systems.\n\n### Python Dependencies\n`ViralCC` mainly depends on the Python scientific stack.\n\n```\nnumpy\nscipy\npysam\nscikit-learn\npandas\nBiopython\nleidenalg\n```\n\n\n# Installation Guide\nWe recommend using [**conda**](https://docs.conda.io/projects/conda/en/latest/user-guide/install/download.html) to install `ViralCC`. \nTypical installation time is 1-5 minutes depending on your system.\n\n### Clone the repository with git:\n```\ngit clone https://github.com/dyxstat/ViralCC.git\n```\n\nOnce complete, enter the repository folder and then create a `ViralCC` environment using conda.\n\n\n### Enter the ViralCC folder:\n```\ncd ViralCC\n```\n\n### Construct environment in the linux or MacOS system:\n```\nconda env create -f viralcc_linux_env.yaml\n```\nor\n```\nconda env create -f viralcc_osx_env.yaml\n```\n\n### Enter the environment:\n```\nconda activate ViralCC_env\n```\n\n# A test dataset to demo ViralCC\nWe provide a small simulated dataset, located under the Test directory, to demo and test the software:\n```\nTest/final.contigs.fa\nTest/MAP_SORTED.bam\nTest/viral_contigs.txt\n```\nRun `ViralCC` on the testing dataset:\n```\npython ./viralcc.py pipeline -v Test/final.contigs.fa Test/MAP_SORTED.bam Test/viral_contigs.txt Test/out_test\n```\n\nThe expected run time for demo is several seconds and the expected output are in the 'Test/out_test' directory:\n```\nTest/out_test/cluster_viral_contig.txt\nTest/out_test/prokaryotic_contig_info.csv\nTest/out_test/VIRAL_BIN/VIRAL_BIN0000.fa\nTest/out_test/VIRAL_BIN/VIRAL_BIN0001.fa\nTest/out_test/viralcc.log\nTest/out_test/viral_contig_info.csv\n```\n\n\n\n# Instruction to process raw data\nFollow the instructions in this section to process the raw shotgun and Hi-C data and generate the input for `ViralCC`:\n\n### Clean raw shotgun and Hi-C reads\n\nAdaptor sequences are removed by `bbduk` from the `BBTools` suite with parameter `ktrim=r k=23 mink=11 hdist=1 minlen=50 tpe tbo` and reads are quality-trimmed using `bbduk` with parameters `trimq=10 qtrim=r ftm=5 minlen=50`. Additionally, the first 10 nucleotides of Hi-C reads are trimmed by `bbduk` with parameter `ftl=10`. Identical PCR optical and tile-edge duplicates for Hi-C reads were removed by the script `clumpify.sh` from `BBTools` suite.\n\n### Assemble shotgun reads\n\nFor the shotgun library, de novo metagenome assembly is produced by an assembly software, such as MEGAHIT.\n```\nmegahit -1 SG1.fastq.gz -2 SG2.fastq.gz -o ASSEMBLY --min-contig-len 1000 --k-min 21 --k-max 141 --k-step 12 --merge-level 20,0.95\n```\n\n### Align Hi-C paired-end reads to assembled contigs\n\nHi-C paired-end reads are aligned to assembled contigs using a DNA mapping software, such as BWA MEM. Then, samtools with parameters \u2018view -F 0x904\u2019 is applied to remove unmapped reads, supplementary alignments, and secondary alignments. BAM file needs to be sorted **by name** using 'samtools sort'.\n```\nbwa index final.contigs.fa\nbwa mem -5SP final.contigs.fa hic_read1.fastq.gz hic_read2.fastq.gz > MAP.sam\nsamtools view -F 0x904 -bS MAP.sam > MAP_UNSORTED.bam\nsamtools sort -n MAP_UNSORTED.bam -o MAP_SORTED.bam\n```\n### Identify viral contigs from assembled contigs\n\nAssembled contigs were screened by a viral sequence detection software, such as VirSorter to identify viral contigs.\n```\nwrapper_phage_contigs_sorter_iPlant.pl -f final.contigs.fa --db 1 --wdir virsorter_output --data-dir virsorter-data\n```\n\n\n# Instruction to run ViralCC\n```\npython ./viralcc.py pipeline [Parameters] FASTA_file BAM_file VIRAL_file OUTPUT_directory\n```\n### Parameters\n```\n--min-len: Minimum acceptable contig length (default 1000)\n--min-mapq: Minimum acceptable alignment quality (default 30)\n--min-match: Accepted alignments must be at least N matches (default 30)\n--min-k: Lower bound of k for determining the host poximity graph (default 4)\n--random-seed: Random seed for the Leiden clustering (default 42)\n--cover (optional): Cover existing files. Otherwise, an error will be returned if the output file is detected to exist.\n-v (optional): Verbose output about more specific details of the ViralCC procedure.\n```\n### Input File\n\n* FASTA_file: a fasta file of the assembled contig (e.g. Test/final.contigs.fa)\n* BAM_file: a bam file of the Hi-C alignment (e.g. Test/MAP_SORTED.bam)\n* VIRAL_file: a txt file containing the names of identified viral contigs in one column **without header** (e.g. Test/viral_contigs.txt)\n\n\n### Output File\n\n* VIRAL_BIN: folder containing the fasta files of draft viral bins\n* cluster_viral_contig.txt: clustering results with 2 columns, the first is the viral contig name, and the second is the group number.\n* viral_contig_info.csv: information of viral contigs with three columns (contig name, contig length, and GC-content)\n* prokaryotic_contig_info.csv: information of non-viral contigs with three columns (contig name, contig length, and GC-content)\n* viralcc.log: log file of ViralCC\n\n### Example\n```\npython ./viralcc.py pipeline -v final.contigs.fa MAP_SORTED.bam viral_contigs.txt out_directory\n```\n\n# Contacts and bug reports\nIf you have any questions or suggestions, welcome to contact Yuxuan Du (yuxuandu@usc.edu).\n\n\n\n\n\n\n\n"
}