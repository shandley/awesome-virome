{
  "cache_date": "2025-09-01T11:14:37.556486",
  "data": "# vpf-tools\n\n## The tools\n\nCurrently, only `vpf-class` is implemented, but we have plans to include more tools\nin this framework.\n\n### vpf-class\n\n`vpf-class` attemps to classify viruses using Viral Protein Families.\n\nUsage example: Given a `.fna` file, obtain the proteins of each virus with\n`prodigal`, then perform a `hmmsearch` against the given `hmms` (VPFs) file to\nobtain a classification. This requires a working installation of\n[HMMER](http://hmmer.org/) (version 3.2+) and\n[Prodigal](https://github.com/hyattpd/Prodigal) (version 2.6.X). Both should be\neither available in your `$PATH` or specified using the `--hmmer-prefix` and\nthe `--prodigal` flags.\n\n```sh\nstack exec -- vpf-class --data-index ../data/index.yaml -i ../data/test.fna -o test-classified\n```\n\nThis will output a directory with a `.tsv` file for each specified classification\nlevel in the `index.yaml` file. Using the provided files, one thus obtains:\n\n- `test-classified/baltimore.tsv`\n- `test-classified/family.tsv`\n- `test-classified/genus.tsv`\n- `test-classified/host_domain.tsv`\n- `test-classified/host_family.tsv`\n- `test-classified/host_genus.tsv`\n\nPlease read to the end to find out where to obtain all the required data files.\nThe `--data-files` option may be skipped if the `VPF_CLASS_DATA_INDEX`\nenvironment variable is set to the path of `index.yaml`.\n\nConcurrency options can be specified with `--workers` (number of\nparallel workers running `prodigal` or `hmmsearch`) and `--chunk-size` (max\nnumber of genomes for each `prodigal`/`hmmsearch` process).\n\n## Installation\n\n### Method 1: Docker\n\nWe now provide a pre-configured docker image which contains all the required\ndependencies and automatically downloads supplementary data. See the detailed\ninstructions [here](DOCKER.md).\n\n### Method 2: Building from source\n\nSince there are no release binaries available, you will need to install\n[stack](haskellstack.org) and compile `vpf-tools` yourself. The instructions\nare the same for both Mac OS and Linux, the tool has not been tested on\nWindows.\n\nFirst, install stack using\n```sh\ncurl -sSL https://get.haskellstack.org/ | sh\n```\n\nThen run\n```sh\ngit clone https://github.com/biocom-uib/vpf-tools\ncd vpf-tools\nstack build\n```\nto clone the repository and compile all targets. The first time this can take a\nwhile as `stack` also needs to install GHC and compile all the dependencies.\nOnce it has finished, you should be able to run any of the tools from this\ndirectory by prefixing them with `stack exec --`, for instance,\n\n```sh\nstack exec -- vpf-class --help\n```\n\nThere is experimental support for OpenMPI. Add `--flag vpf-class:+mpi` when\nbuilding and then run the tool normally as any other program with `mpirun`.\n\n## Supplementary material\n\nYou can find our classification of VPFs either as a\ncompressed package (including `index.yaml`)\n[here](https://bioinfo.uib.es/~recerca/VPF-Class/vpf-class-data.tar.gz).\n\nAlternatively, you can download individual data files\n[here](https://bioinfo.uib.es/~recerca/VPF-Class/), at the \"VPF classification\"\ntab. The data files that `vpf-class` requires are in the rows \"Full data\"\n(`modelClassesFile`) and \"UViG Score samples\" (`scoreSamplesFile`).  This VPF\nclassification has been obtained as described in the paper, but the tool is\ndesigned to work with any user-provided classification files.\n\nThe most recent `hmms` file containing the HMMER models of VPFs (`vpfsFile` in\n`data-index.yml`) can be downloaded from\n[IMG/VR](https://img.jgi.doe.gov//docs/final_list.hmms.gz) (UPDATE: the link\nappears to be broken, you can find a copy\n[here](https://bioinfo.uib.es/~recerca/VPF-Class/vpf-class-data/final_list.hmms)).\nTo use it with the provided `index.yaml`, extract `final_list.hmms` into the\n`data` directory, next to `index.yaml`.\n\n## Troubleshooting\n\n- **HMMSearchNotFound**: First, make sure that you have a working installation\nof [HMMER](http://hmmer.org/). If it is not accessible from your `$PATH`, you\ncan specify the path to the installation (the directory that contains `bin` and\n`share`) using the `--hmmer-prefix` flag.\n\n- **ProdigalNotFound**: Make sure that you have\n[Prodigal](https://github.com/hyattpd/Prodigal) installed. If it is not\naccessible from your `$PATH`, you can specify the location to the executable\nusing the `--prodigal` flag.\n\n- **The first step (`curl -sSL https://get.haskellstack.org/ | sh`) requires\nroot access**: The default configuration in the Stack installer uses\n`/usr/local/` as the default prefix. Stack can also be installed in\n`$HOME/.local/` following their manual installation method.\n\n- **Stack build reports errors either while installing GHC or downloading package\nindices**: If you have any issues during the installation, please check out the [Stack\ndocumentation](https://docs.haskellstack.org/en/stable/install_and_upgrade/) to\nverify that all dependencies are satisfied.\n\n- **I have issues with conda**: Some users have reported issues with Stack and\nConda. Thus, installing it in a Conda-polluted environment is discouraged and\nunsupported.\n"
}