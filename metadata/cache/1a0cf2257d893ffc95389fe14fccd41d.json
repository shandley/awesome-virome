{
  "cache_date": "2025-08-01T12:50:14.610874",
  "data": "<!-- markdownlint-disable MD013 MD041 -->\n<picture>\n  <source\n    media=\"(prefers-color-scheme: light)\"  \n    srcset=\"https://cbg-ethz.github.io/V-pipe/assets/img/logo-vpipe.svg\">\n  <source\n    media=\"(prefers-color-scheme: dark)\"  \n    srcset=\"https://cbg-ethz.github.io/V-pipe/assets/img/logo-vpipe-dark.svg\">\n  <img alt=\"Logo\" src=\"https://cbg-ethz.github.io/V-pipe/assets/img/logo-vpipe.svg\" width=\"50%\" />\n</picture>\n\n[![bio.tools](https://img.shields.io/badge/bio-tools-blue.svg)](https://bio.tools/V-Pipe)\n[![Snakemake](https://img.shields.io/badge/snakemake-\u22657.11.0-blue.svg)](https://snakemake.github.io/snakemake-workflow-catalog/?usage=cbg-ethz/V-pipe)\n[![Deploy Docker image](https://github.com/cbg-ethz/V-pipe/actions/workflows/deploy-docker.yaml/badge.svg)](https://github.com/cbg-ethz/V-pipe/pkgs/container/v-pipe)\n[![Tests](https://github.com/cbg-ethz/V-pipe/actions/workflows/run_regression_tests.yaml/badge.svg)](https://github.com/cbg-ethz/V-pipe/actions/workflows/run_regression_tests.yaml)\n[![Mega-Linter](https://github.com/cbg-ethz/V-pipe/actions/workflows/mega-linter.yml/badge.svg)](https://github.com/cbg-ethz/V-pipe/actions/workflows/mega-linter.yml)\n[![License: Apache-2.0](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nV-pipe is a workflow designed for the analysis of next generation sequencing (NGS) data from viral pathogens. It produces a number of results in a curated format (e.g., consensus sequences, SNV calls, local/global haplotypes).\nV-pipe is written using the Snakemake workflow management system.\n\n## Usage\n\nDifferent ways of initializing V-pipe are presented below. We strongly encourage you to deploy it [using the quick install script](#using-quick-install-script), as this is our preferred method.\n\nTo configure V-pipe refer to the documentation present in [config/README.md](config/README.md).\n\nV-pipe expects the input samples to be organized in a [two-level](config/README.md#samples) directory hierarchy,\nand the sequencing reads must be provided in a sub-folder named `raw_data`. Further details can be found on the [website](https://cbg-ethz.github.io/V-pipe/usage/).\nCheck the utils subdirectory for [mass-importers tools](utils/README.md#samples-mass-importers) that can assist you in generating this hierarchy.\n\nWe provide [virus-specific base configuration files](config/README.md#virus-base-config) which contain handy defaults for, e.g., HIV and SARS-CoV-2. Set the virus in the general section of the configuration file:\n\n```yaml\ngeneral:\n  virus_base_config: hiv\n```\n\nAlso see [snakemake's documentation](https://snakemake.readthedocs.io/en/stable/executing/cli.html) to learn more about the command-line options available when executing the workflow.\n\n\n### Tutorials\n\nTutorials for your first steps with V-pipe for different scenarios are available in the [docs/](docs/README.md) subdirectory.\n\n\n### Using quick install script\n\nTo deploy V-pipe, use the [installation script](utils/README.md#quick-installer) with the following parameters:\n\n```bash\ncurl -O 'https://raw.githubusercontent.com/cbg-ethz/V-pipe/master/utils/quick_install.sh'\n./quick_install.sh -w work\n```\n\nThis script will download and install miniconda, checkout the V-pipe git repository (use `-b` to specify which branch/tag) and setup a work directory (specified with `-w`) with an executable script that will execute the workflow:\n\n```bash\ncd work\n# edit config.yaml and provide samples/ directory\n./vpipe --jobs 4 --printshellcmds --dry-run\n```\n\nTest data to test your installation is available with the tutorials provided in the [docs/](docs/README.md) subdirectory.\n\n### Using Docker\n\nNote: the [docker image](https://github.com/cbg-ethz/V-pipe/pkgs/container/v-pipe) is only setup with components to run the workflow for HIV and SARS-CoV-2 virus base configurations.\nUsing V-pipe with other viruses or configurations might require internet connectivity for additional software components.\n\nCreate `config.yaml` or `vpipe.config` and then populate the `samples/` directory.\nFor example, the following config file could be used:\n\n```yaml\ngeneral:\n  virus_base_config: hiv\n\noutput:\n  snv: true\n  local: true\n  global: false\n  visualization: true\n  QA: true\n```\n\nThen execute:\n\n```bash\ndocker run --rm -it -v $PWD:/work ghcr.io/cbg-ethz/v-pipe:master --jobs 4 --printshellcmds --dry-run\n```\n\n### Using Snakedeploy\n\nFirst install [mamba](https://github.com/conda-forge/miniforge#mambaforge), then create and activate an environment with Snakemake and Snakedeploy:\n\n```bash\nmamba create -c conda-forge -c bioconda --name snakemake snakemake snakedeploy\nconda activate snakemake\n```\n\nSnakemake's [official workflow installer Snakedeploy](https://snakemake.github.io/snakemake-workflow-catalog/?usage=cbg-ethz/V-pipe) can now be used:\n\n```bash\nsnakedeploy deploy-workflow https://github.com/cbg-ethz/V-pipe --tag master .\n# edit config/config.yaml and provide samples/ directory\nsnakemake --use-conda --jobs 4 --printshellcmds --dry-run\n```\n\n## Dependencies\n\n- **[Conda](https://conda.io/docs/index.html)**\n\n  Conda is a cross-platform package management system and an environment manager application. Snakemake uses mamba as a package manager.\n\n- **[Snakemake](https://snakemake.readthedocs.io/)**\n\n  Snakemake is the central workflow and dependency manager of V-pipe. It determines the order in which individual tools are invoked and checks that programs do not exit unexpectedly.\n\n- **[VICUNA](https://www.broadinstitute.org/viral-genomics/vicuna)**\n\n  VICUNA is a _de novo_ assembly software designed for populations with high mutation rates. It is used to build an initial reference for mapping reads with ngshmmalign aligner when a `references/cohort_consensus.fasta` file is not provided. Further details can be found in the [wiki](https://github.com/cbg-ethz/V-pipe/wiki/getting-started#input-files) pages.\n\n### Computational tools\n\nOther dependencies are managed by using isolated conda environments per rule, and below we list some of the computational tools integrated in V-pipe:\n\n- **[FastQC](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/)**\n\n  FastQC gives an overview of the raw sequencing data. Flowcells that have been overloaded or otherwise fail during sequencing can easily be determined with FastQC.\n\n- **[PRINSEQ](http://prinseq.sourceforge.net/)**\n\n  Trimming and clipping of reads is performed by PRINSEQ. It is currently the most versatile raw read processor with many customization options.\n\n- **[ngshmmalign](https://github.com/cbg-ethz/ngshmmalign)**\n\n  We perform the alignment of the curated NGS data using our custom ngshmmalign that takes structural variants into account. It produces multiple consensus sequences that include either majority bases or ambiguous bases.\n\n- **[bwa](https://github.com/lh3/bwa)**\n\n  In order to detect specific cross-contaminations with other probes, the Burrows-Wheeler aligner is used. It quickly yields estimates for foreign genomic material in an experiment.\n  Additionally, It can be used as an alternative aligner to ngshmmalign.\n\n- **[MAFFT](http://mafft.cbrc.jp/alignment/software/)**\n\n  To standardise multiple samples to the same reference genome (say HXB2 for HIV-1), the multiple sequence aligner MAFFT is employed. The multiple sequence alignment helps in determining regions of low conservation and thus makes standardisation of alignments more robust.\n\n- **[Samtools and bcftools](https://www.htslib.org/)**\n\n  The Swiss Army knife of alignment postprocessing and diagnostics. bcftools is also used to generate consensus sequence with indels.\n\n- **[SmallGenomeUtilities](https://github.com/cbg-ethz/smallgenomeutilities)**\n\n  We perform genomic liftovers to standardised reference genomes using our in-house developed python library of utilities for rewriting alignments.\n\n- **[ShoRAH](https://github.com/cbg-ethz/shorah)**\n\n  ShoRAh performs SNV calling and local haplotype reconstruction by using bayesian clustering.\n\n- **[LoFreq](https://csb5.github.io/lofreq/)**\n\n  LoFreq (version 2) is SNVs and indels caller from next-generation sequencing data, and can be used as an alternative engine for SNV calling.\n\n- **[SAVAGE](https://bitbucket.org/jbaaijens/savage) and [Haploclique](https://github.com/cbg-ethz/haploclique)**\n\n  We use HaploClique or SAVAGE to perform global haplotype reconstruction for heterogeneous viral populations by using an overlap graph.\n\n## Citation\n\nIf you use this software in your research, please cite:\n\nFuhrmann, L., Jablonski, K. P., Topolsky, I., Batavia, A. A., Borgsmueller, N., Icer Baykal, P., Carrara, M. ... & Beerenwinkel, (2023).\n\"V-Pipe 3.0: A Sustainable Pipeline for Within-Sample Viral Genetic Diversity Estimation.\"\n_bioRxiv_, doi:[10.1101/2023.10.16.562462](https://doi.org/10.1101/2023.10.16.562462).\n\n## Contributions\n\n- [Ivan Topolsky\\* ![orcid]](https://orcid.org/0000-0002-7561-0810), [![github]](https://github.com/dryak)\n- [Pelin Icer Baykal ![orcid]](https://orcid.org/0000-0002-9542-5292), [![github]](https://github.com/picerbaykal)\n- [Auguste Rimaite ![orcid]](https://orcid.org/0009-0004-6840-1668), [![github]](https://github.com/AugusteRi)\n- [Lara Fuhrmann ![orcid]](https://orcid.org/0000-0001-6405-0654), [![github]](https://github.com/LaraFuhrmann)\n- [Uwe Schmitt ![orcid]](https://orcid.org/0000-0002-4658-0616), [![github]](https://github.com/uweschmitt)\n- [Michal Okoniewski ![orcid]](https://orcid.org/0000-0003-4722-4506), [![github]](https://github.com/michalogit)\n- [Monica Dragan ![orcid]](https://orcid.org/0000-0002-7719-5892), [![github]](https://github.com/monicadragan)\n- [Kim Philipp Jablonski\\*\\*\\* ![orcid]](https://orcid.org/0000-0002-4166-4343), [![github]](https://github.com/kpj)\n- [Susana Posada C\u00e9spedes\\*\\*\\* ![orcid]](https://orcid.org/0000-0002-7459-8186), [![github]](https://github.com/sposadac)\n- [David Seifert\\*\\*\\* ![orcid]](https://orcid.org/0000-0003-4739-5110), [![github]](https://github.com/SoapZA)\n- Tobias Marschall\\*\\*\\*\n- [Niko Beerenwinkel\\*\\* ![orcid]](https://orcid.org/0000-0002-0573-6119)\n\n\\* software maintainer ;\n\\** group leader ;\n\\*\\*\\* group alumni and former contributors.\n\n[github]: https://cbg-ethz.github.io/V-pipe/assets/img/icon-github.svg\n[orcid]: https://cbg-ethz.github.io/V-pipe/assets/img/icon-ORICID.svg\n\n## Contact\n\nWe encourage users to use the [issue tracker](https://github.com/cbg-ethz/V-pipe/issues). For further enquiries, you can also contact the V-pipe Dev Team <v-pipe@bsse.ethz.ch>.\n"
}