{
  "cache_date": "2025-03-17T03:37:33.414176",
  "data": "What is ShoRAH?\n===============\n[![Build Status](https://travis-ci.org/cbg-ethz/shorah.svg?branch=master)](https://travis-ci.org/cbg-ethz/shorah)\n[![Bioconda package](https://img.shields.io/conda/dn/bioconda/shorah.svg?label=Bioconda)](https://bioconda.github.io/recipes/shorah/README.html)\n[![Docker container](https://quay.io/repository/biocontainers/shorah/status)](https://quay.io/repository/biocontainers/shorah)\n\n\nShoRAH is an open source project for the analysis of next generation sequencing\ndata. It is designed to analyse genetically heterogeneous samples. Its tools\nare written in different programming languages and provide error correction,\nhaplotype reconstruction and estimation of the frequency of the different\ngenetic variants present in a mixed sample.\n\nMore information [here](http://cbg-ethz.github.io/shorah).\n\n---\n\nThe software suite ShoRAH (Short Reads Assembly into Haplotypes) consists of\nseveral programs, the most imporant of which are:\n\n| Tool           | What it does                                                        |\n| -------------- | ------------------------------------------------------------------- |\n| `shorah`       | wrapper for everything                                              |\n|`shorah amplicon`| amplicon based analysis                                            |\n|`shorah shotgun`| shotgun sequencing analysis                                         |\n| `shorah snv`   | detects single nucleotide variants, taking strand bias into account |\n| `b2w`          | splitting shotgun sequencing .BAM into multiple overlapping windows |\n| `diri_sampler` | Gibbs sampling for error correction via Dirichlet process mixture   |\n| `fil`          | strand bias test                                                    |\n\n## Citation\nIf you use shorah, please cite the application note paper _Zagordi et al._ on\n[BMC Bioinformatics](http://www.biomedcentral.com/1471-2105/12/119).\n\n## General usage\n### Pre-built packages\nShoRAH and its dependencies are all\n[available in bioconda](https://bioconda.github.io/recipes/shorah/README.html).\nWe strongly advise you to install this package for a hassle-free experience.\n\n\tconda install shorah\n\n### Dependencies\nshorah requires the following pieces of software:\n\n1. **Python 3** The required dependencies are:\n\n   a) **Biopython**, and \n   b) **NumPy**.\n   These packages can be downloaded using pip or conda\n\n2. **HTSlib** which is used to access bam/cram/sam and fasta files.\n\n3. **zlib**, which is used by HTSlib for compressing bam files\n\n3. **pkg-config**, for discovering dependencies, which most Unix-like systems include\n\n4. **Boost C++ library**, for random number generation\n\nIn addition, if you want to bootstrap the git version of shorah instead of using the provided tarballs,\nyou will need the GNU Autotools:\n\n1. **Autoconf** 2.69\n\n2. **Automake** 1.15\n\n3. **m4**, which most Unix-like system include\n\n### Installation\nWe strongly recommend you use one of the versioned tarballs from the releases page. ShoRAH uses Autoconf\nand Automake, and these tarballs include all necessary scripts and files required for installation, whereas\nthe git tree only contains the bare minimum of files required for bootstrapping.\n\nFurther, we strongly recommend you use a virtualenv for python installation that shares the same directory\nroot as where you'd like to install shorah to. Not using a virtualenv means that the python dependencies will\nnot be located in the installation root, which will likely require you to specify `PYTHONPATH`, making the\ninstallation more brittle.\n\nSay for instance, you would like to install shorah to `/usr/local/shorah`. The first step consists of installing\nthe required python dependencies. Create a virtualenv:\n\n\t/opt/local/bin/virtualenv-3.6 /usr/local/shorah\n\nwhere `/opt/local/bin/virtualenv-3.6` is the virtualenv command for python 3.6 on MacPorts. Now install\nthe python dependencies:\n\n\t/usr/local/shorah/bin/pip install Biopython numpy\n\nNow call the `configure` script from the shorah tarball, taking care to specify the **absolute** path of the\npython interpreter (or the relative one if it is in your `PATH`), as this gets inserted into the shebang line of all python scripts:\n\n\t./configure --prefix=/usr/local/shorah PYTHON=/usr/local/shorah/bin/python3.6\n\nThe configure script finds the dependencies using pkg-config. Once it completes, run:\n\n\tmake -j4\n\nwhere `4` specifies the number of compilation threads to use. Finally, after compilation, install using:\n\n\tmake install\n\nAll the programs should now be located in `/usr/local/shorah/bin`.\n\n#### Boostrapping from git\nIf you opted to clone the git repository instead of downloading a prepared tarball, you will need to bootstrap\nthe configure script:\n\n\tautoreconf -vif -I m4\n\nAfter this, you can run the `configure` script as described previously.\n\n#### Meson\n\nFor the developers who prefer this, it is alternatively possible to compile the C++ components with Meson and then install ShoRAH with pip in development mode using :\n\n```bash\nmkdir -p build\ncd build\nmeson ../\nninja\ncd ..\npip3 install -e .\n```\n\n#### Windows users\nSince Windows 10, Microsoft provides the \n[Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/about) \nwhich enables a linux environment under Windows.\n\nUsers of older versions of Windows can can install and run `shorah` with [Cygwin](http://www.cygwin.com).\nPlease see the relevant paragraph on the\n[documentation page](http://cbg-ethz.github.io/shorah/).\n\n### Run\nThe input is a sorted bam file. Analysis can be performed in local mode.\n\n**Note:** Currently in ShoRAH2 global haplotype reconstruction is disabled.\nThe last version of ShoRAH1 with global mode is\n[v1.1.3](https://github.com/cbg-ethz/shorah/tree/v1.1.3)\nand can easily be obtained from\n[bioconda](https://bioconda.github.io/recipes/shorah/README.html).\nIf you wish to perform global reconstruction, we suggest that you consider the\n[global haplotype options](https://github.com/cbg-ethz/V-pipe/wiki/options#haplotype_reconstruction)\navailable in [V-pipe](https://cbg-ethz.github.io/V-pipe/)\n\n#### Local analysis\nThe local analysis alone can be run invoking `shorah shotgun` or `shorah amplicon` (program\nfor the amplicon mode). They work by cutting window from the multiple sequence\nalignment, invoking `diri_sampler` on the windows and calling `shorah snv` for the\nSNV calling. See the\n[`README`](https://github.com/cbg-ethz/shorah/blob/master/examples/shotgun_test/README.md)\nfile in directory\n[`shotgun_test`](https://github.com/cbg-ethz/shorah/blob/master/examples/shotgun_test/)\nand the\n[`README`](https://github.com/cbg-ethz/shorah/blob/master/examples/amplicon_test/README.md)\nfile in directory\n[`amplicon_test`](https://github.com/cbg-ethz/shorah/blob/master/examples/amplicon_test/).\n\n\n## Coding style\nAll changes to the C++ code in `src/cpp` should always be formatted according to the included `.clang-format` style by doing\n\n\tclang-format -style=file -i src/cpp/*.[ch]pp\n\nin the root of the repository.\n\nAll changes to the python code in `src/shorah` should always be formatted conforming to the [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guide. To this end, we advise to use [autopep8](https://pypi.python.org/pypi/autopep8).\n\n## Contact\n\nShoRAH is maintained as part of the [V-pipe virus NGS pipeline](https://cbg-ethz.github.io/V-pipe/)\nand you can [easily reach out the developers on its website](https://cbg-ethz.github.io/V-pipe/contact).\n\nYou can also report your problems in the [issue tracker on GitHub](https://github.com/cbg-ethz/shorah/issues).\n"
}