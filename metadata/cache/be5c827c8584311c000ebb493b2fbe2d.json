{
  "cache_date": "2025-03-17T02:27:52.623933",
  "data": "Mine phages from metagenomes in the form of bins and contigs  \n============================================================\nVFM is developed for identifing phages from metagenomic bins or contigs, which has two versions\uff1a bin-VFM for metagenomic bins and unbin-VFM for metagenomic contigs.  \nThis project is composed of predicting and training scripts.The details are as follows.\n* Predicting scripts - Predict bins or contigs as phages or bacteria    \nbin-VFM_predict.py    \nunbin-VFM_pred.py\n* Training scripts - Train a new model using user's own data  \ntrain_bin-VFM.py  \ntrain_unbin-VFM.py  \n## Reference\nVFM: Identification of Bacteriophages From Metagenomic Bins and Contigs Based on Features Related to Gene and Genome Composition(https://ieeexplore.ieee.org/document/8924706)\n## Requirement and Dependency\nThe system must be Linux, with Python3 installed on. Some python packages and modules should be installed in this way:  \n```\npip3 install numpy pandas scipy biopython scikit-learn\n``` \nVFM depends on some bioinformatic tools which should be installed properly: \n* [Prokka](https://github.com/tseemann/prokka) - For gene prediction\n* [HMM tools](http://www.hmmer.org/) - For hidden Markov models associated with gene/protein families\n* [BLAST+](https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download) - For sequence alignments\n## Setup\nVFM can be set up by:\n```\ngit clone https://github.com/liuql2019/VFM\n```\nPressing the download button can fix it too. The gene databases pVOG and COG must be downloaded from the link: https://www.jianguoyun.com/p/Ddnq2oQQ7I_kBxi4kvUB  \nUnzip the file using the command:  \n```\nunzip database.zip -d /{the path to VFM}/VFM/models\n```\n## Binning\nIn order to generate metagenomic bins, binning tools such as [COCACOLA](https://github.com/younglululu/COCACOLA) should be applied to metagenomic contigs.Then run the script bin-VFM_predict.py to predict the bins.\n## Usage\nTo predct metagenomic bins as phages or bacteria, bin-VFM is used as follows:\n```\npython3 bin-VFM_predict.py -d BINS_DIR [-t THREADS] [-m MODEL]\n```\nwhere the parameter -d means the directory of the bins, -t means cpu number and -m means user-trained model for predicting. If the parameter -t is omitted, default value 1 will be used. Omitting parameter -m means choosing the default model that has been stored in VFM before release.  \nSimilarly, unbin-VFM is used to predict metagenomic contigs by:\n```\npython3 unbin-VFM_pred.py -f FA_FILE [-t THREADS] [-m MODEL]\n```\nwhere the parameter -f means the fasta file in which the contigs are stored. The meanings of -t and -m are the same as above. \n## Example\nThe data in the folder data/test is used to demenstrate how to run VFM.  \nRun bin-VFM as follows:\n```\npython3 bin-VFM_predict.py -d ./data/demo/bins -t 4\n```\nRun unbin-VFM as follows:\n```\npython3 unbin-VFM_pred.py -f ./data/demo/contigs.fasta -t 4\n```\n## Train user's model\nUsers could train their own model(s) by scripts train_bin-VFM.py and train_unbin-VFM.py.   \nRun train_bin-VFM.py as follows:\n```\npython3 train_bin-VFM.py -vir VIR_DIR -bac BAC_DIR [-cpus THREADS] -model MODEL_NAME\n```\nwhere the parameters -vir and -bac are folders of phage and bacterium bins for training, -model is the model name. The paremeter -cpus is cpu number which may be omitted.  \nUse train_unbin-VFM.py as follows:\n```\npython3 train_unbin-VFM.py -vir VIR_FILE -bac BAC_FILE [-cpus THREADS] -model MODEL_NAME\n```\nwhere the parameters -vir and -bac are fasta files of phage and bacterium contigs for training.The other parameters are the same as above.  \nThe training sets and test sets used by VFM can be downloaded from https://www.jianguoyun.com/p/DYIe6QgQ7I_kBxihkPUB.  \nUnzip the package by  \n```\nunzip train_test_data.zip \n```\n## Acknowledgement\nWe are extremely grateful to the authors of [MARVEL](https://github.com/LaboratorioBioinformatica/MARVEL) and [virFinder](https://github.com/jessieren/VirFinder) for the contribution of their open source code\uff0csome of which was used in VFM.\n## Licence\nCodes here may be modified and used for any purpose.This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"
}