{
  "cache_date": "2025-03-17T02:18:39.299944",
  "data": "[![Edwards Lab](https://img.shields.io/badge/Bioinformatics-EdwardsLab-03A9F4)](https://edwards.flinders.edu.au/)\n[![DOI](https://www.zenodo.org/badge/60999054.svg)](https://www.zenodo.org/badge/latestdoi/60999054)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![GitHub language count](https://img.shields.io/github/languages/count/linsalrob/PhiSpy)\n[![Build Status](https://travis-ci.org/linsalrob/PhiSpy.svg?branch=master&label=Travis%20Build)](https://travis-ci.org/linsalrob/PhiSpy)\n[![PyPi](https://img.shields.io/pypi/pyversions/phispy.svg?style=flat-square&label=PyPi%20Versions)](https://pypi.org/project/PhiSpy/)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/phispy/badges/version.svg)](https://anaconda.org/bioconda/phispy)\n[![BioConda Install](https://img.shields.io/conda/dn/bioconda/phispy.svg?style=flat-square&label=BioConda%20install)](https://anaconda.org/bioconda/phispy)\n[![Anaconda-Server Badge](https://anaconda.org/bioconda/phispy/badges/installer/conda.svg)](https://conda.anaconda.org/bioconda)\n\n# What is PhiSpy?\n\nPhiSpy identifies prophages in Bacterial (and probably Archaeal) genomes. Given an annotated genome it will use several approaches to identify the most likely prophage regions.\n\nInitial versions of PhiSpy were written by\n\nSajia Akhter (sajia@stanford.edu)\n[Edwards Bioinformatics Lab](http://edwards.sdsu.edu/research/)\n\nImprovements, bug fixes, and other changes were made by\n\nKatelyn McNair\n[Edwards Bioinformatics Lab](http://edwards.sdsu.edu/research/)\nand Przemyslaw Decewicz\n[DEMB at the University of Warsaw](http://ddlemb.com/)\n\n\n\n# Installation\n\n## Conda\n\nThe easiest way to install for all users is to use `bioconda`.\n\n```bash\nconda install -c bioconda phispy\n```\n\n\n## PIP\n\n`python-pip` requires a C++ compiler and the Python header files. You should be able to install it like this:\n\n\n```bash\nsudo apt install -y build-essential python3-dev python3-pip\npython3 -m pip install --user PhiSpy\n```\nThis will install `PhiSpy.py` in `~/.local/bin` which should be in your `$PATH` but might not be (see [this](https://bugs.launchpad.net/ubuntu/+source/bash/+bug/1588562) detailed discussion). See the tips and tricks below for a solution to this.\n\n\n## Advanced Users\n\nFor advanced users, you can clone the git repository and use that (though `pip` is the recommended install method).\n```bash\ngit clone https://github.com/linsalrob/PhiSpy.git\ncd PhiSpy\npython3 setup.py install --user --record installed_files.txt\n```\n\nNote that we recommend using --record to save a list of all the files that were installed by `PhiSpy`. If you ever want to uninstall it, or to remove everything to reinstall e.g. from `pip`, you can simply use the contents of that file:\n\n```\ncat installed_files.txt | xargs rm -f\n```\n\n\n\nIf you have root and you want to install globally, you can change the setup command.\n\n```bash\ngit clone https://github.com/linsalrob/PhiSpy.git\ncd PhiSpy\npython3 setup.py install\n```\n\nFor ease of use, you may wish to add the location of PhiSpy.py to your $PATH.\n\n## Software Requirements\n\nPhiSpy requires following programs to be installed in the system. Most of these are likely already on your system or will be installed using the mechanisms above.\n\n1. `Python` - version 3.4 or later\n2. `Biopython` - version 1.58 or later\n3. `gcc` - GNU project C and C++ compiler - version 4.4.1 or later\n4. The `Python.h` header file. This is included in `python3-dev` that is available on most systems.\n\n# Testing PhiSpy.py\n\nDownload the [Streptococcus pyogenes M1 genome](https://raw.githubusercontent.com/linsalrob/PhiSpy/master/tests/Streptococcus_pyogenes_M1_GAS.gb)\n\n```bash\ncurl -Lo Streptococcus_pyogenes_M1_GAS.gb https://bit.ly/37qFArb\nPhiSpy.py -o Streptococcus.phages Streptococcus_pyogenes_M1_GAS.gb\n```\n\nor to run it with the `Streptococcus` training set:\n\n```bash\nPhiSpy.py -o Streptococcus.phages -t data/trainSet_160490.61.txt Streptococcus_pyogenes_M1_GAS.gb\n```\n\nThis uses the `GenBank` format file for *Streptococcus pyogenes* M1 GAS that we provide in the [tests/](tests/) directory, and we use the training set for *S. pyogenes* M1 GAS that we have pre-calculated. This quickly identifies the four prophages in this genome, runs the repeat finder on all of them, and outputs the answers.\n\nYou will find the output files from this query in `output_directory`.\n\n## Download more testing data\n\nYou can also download all the genomes in [tests/](tests). These are not installed with PhiSpy if you use pip/conda, but will be if you clone the repository.\nPlease note that these are stored on [git lfs](https://git-lfs.github.com/), and so if you notice an error that the files are small and don't ungzip, you may need to (i) install\n`git lfs` and (ii) use `git lfs fetch` to update this data.\n\n# Running PhiSpy.py\n\nThe simplest command is:\n\n```bash\nPhiSpy.py genbank_file -o output_directory\n```\n\nwhere:\n- `genbank file`: The input DNA sequence file in GenBank format.\n- `output directory`: The output directory is the directory where the final output file will be created.\n\nIf you have new genome, we recommend annotating it using the [RAST server](http://rast.nmpdr.org/rast.cgi) or [PROKKA](https://github.com/tseemann/prokka). RAST has a server that allows you to upload and download the genome (and can handle lots of genomes), while PROKKA is stand-alone software.\n\n### phage_genes\n\nBy default, `PhiSpy.py` uses *strict* mode, where we look for two or more genes that are likely to be a phage in each prophage region. If you increase the value of `--phage_genes` that will reduce the number of prophages that are predicted. Conversely, if you reduce this, or set it to `0` we will overcall mobile elements.\n\nWhen `--phage_genes` is set to `0`, `PhiSpy.py` will identify other mobile elements like plasmids, integrons, and pathogenicity islands. Somewhat unexpectedly, it will also identify the ribosomal RNA operons as likely being mobile since they are unlike the host's backbone!\n\n### color\n\nIf you add the `--color` flag, we will color the CDS based on their function. The colors are primarily used in [artemis](https://sanger-pathogens.github.io/Artemis/) for visualizing phage regions.\n\n### file name prefixes\n\nBy default the outputs from `PhiSpy.py` have standard names. If you supply a file name prefix it will be prepended to all the file so that you can run `PhiSpy.py` on multiple genomes and have the outputs in the same directory without overwriting each other.\n\n### gzip support\n\n`PhiSpy.py` natively supports both reading and writing files in `gzip` format. If you provide a `gzipped` input file, we will write a `gzipped` output file.\n\n### HMM Searches\n\nWhen also considering the signal from HMM profile search:\n```bash\nPhiSpy.py genbank_file -o output_directory --phmms hmm_db --threads 4 --color\n```\nwhere:\n- `hmm_db`: reference HMM profiles database to search with genome-encoded proteins (at the moment)\n\nTraining sets were searched with [pVOG database](http://dmk-brain.ecn.uiowa.edu/pVOGs) HMM profiles: [AllvogHMMprofiles.tar.gz](http://dmk-brain.ecn.uiowa.edu/pVOGs/downloads/All/AllvogHMMprofiles.tar.gz).\nTo use it:\n```bash\nwget http://dmk-brain.ecn.uiowa.edu/pVOGs/downloads/All/AllvogHMMprofiles.tar.gz\ntar -zxvf AllvogHMMprofiles.tar.gz\ncat AllvogHMMprofiles/* > pVOGs.hmm\n```\nThen use `pVOGs.hmm` as `hmm_db`.\n\nSince extra step before the regular processing of PhiSpy is performed, input `genbank file` is updated and saved in `output_directory`.\nWhen `--color` flag is used, additional qualifier `/color` will be added in the updated GenBank file so that the user could easily distinguished proteins with hits to `hmm_db` while viewing the file in [Artemis](https://www.sanger.ac.uk/science/tools/artemis)\n\nWhen running PhiSpy again on the same input data and with `--phmms` option you can skip the search step by `--skip_search` flag.\n\nAnother database that maybe of interest is the [VOGdb](http://vogdb.org/) database. You can download all their VOGs, and the press them into a compiled format for `hmmer`:\n\n```bash\ncurl -LO http://fileshare.csb.univie.ac.at/vog/latest/vog.hmm.tar.gz\nmkdir vog\ntar -C vog -xf vog.hmm.tar.gz\ncat vog/* > VOGs.hmms\nhmmpress VOGs.hmms\n```\n\n### Metrics\n\nWe use several different metrics to predict regions that are prophages, and there are some optional metrics you can add. The default set of metrics are:\n\n - `orf_length_med`: median ORF length\n - `shannon_slope`: the slope of Shannon's diversity of _k_-mers across the window under consideration. You can also expand this with the `--expand_slope` option.\n - `at_skew`: the normalized AT skew across the window under consideration\n - `gc_skew`: the normalized GC skew across the window under consideration\n - `max_direction`: The maximum number of genes in the same direction\n\nYou can specify each of these options with the `--metrics` flag, for example:\n\n```\nPhiSpy.py --metrics shannon_slope\n```\n\nor\n\n```\nPhiSpy.py --metrics gc_skew\n```\n\nIf you wish to specify more than one metric, you can either use one `--metrics` flag and list your options, e.g.\n\n```\nPhiSpy.py --metrics shannon_slope gc_skew\n```\n\nor provide each one, e.g.:\n\n```\nPhiSpy.py --metrics shannon_slope --metrics gc_skew\n```\n\nThe default is all of these, and so ommitting a `--metrics` flag is equivalent to \n\n```\nPhiSpy.py --metrics orf_length_med shannon_slope at_skew gc_skew max_direction\n```\n\nThe choice(s) you provide are recorded in the log file.\n\n\nYou can also add  a few other options\n\n - `phmms`: The [phmm](#HMM-Searches) search results\n - `phage_genes`: The number of genes that must be annotated as phage in the region\n - `nonprophage_genegaps` : The maximum number of non-phage genes between two phage-like regions that will enable them to be merged\n\n# Help\n\nFor the help menu use the `-h` option:\n```bash\npython PhiSpy.py -h\n```\n\n# Output Files\n\n`PhiSpy` has the option of creating multiple output files with the prophage data:\n\n1. **prophage_coordinates.tsv** (code: 1)\n\nThis is the coordinates of each prophage identified in the genome, and their _att_ sites (if found) in tab\nseparated text format.\n\nThe columns of the file are:\n  - 1. Prophage number\n  - 2. The contig upon which the prophage resides\n  - 3. The start location of the prophage\n  - 4. The stop location of the prophage\nIf we can detect the _att_ sites, the additional columns are:\n  - 11. start of _attL_;\n  - 12. end of _attL_;\n  - 13. start of _attR_;\n  - 14. end of _attR_;\n  - 15. sequence of _attL_;\n  - 16. sequence of _attR_;\n  - 17. The explanation of why this _att_ site was chosen for this prophage.\n\n2. **GenBank format output** (code: 2)\n\nWe provide a duplicate GenBank record that is the same as the input record, but we have inserted the\nprophage information, including _att_ sites into the record.\n\nIf the original GenBank file was provided in `gzip` format this file will also be created in gzip format.\n\n3. **prophage and bacterial sequences**  (code: 4)\n\n`PhiSpy` can automatically separate the DNA sequences into prophage and bacterial components. If this output is chosen, we generate both fasta and\nGenBank format outputs:\n - _GenBank files_: Two files are made, one for the bacteria and one for the phages. Each contains the appropriate fragments of the genome annotated as in the original.\n - _fasta files_: Two files are made, the first contains the entire genome, but the prophage regions have been masked with `N`s. We explicitly chose this format for a\nfew reasons: (i) it is trivial to convert this format into separate contigs without the Ns but it is more complex to go from separate contigs\nback to a single joined contig; (ii) when read mapping against the genome, understanding that reads map either side of a prophage maybe\nimportant; (iii) when looking at insertion points this allows you to visualize the where the prophage was lying.\n\n4. **prophage_information.tsv**  (code: 8)\n\n This is a tab separated file, and is the key file to assess prophages in genomes (see [assessing predictions](#assessing-predictions), below). The file contains all the genes of the genome, one per line.\n The tenth colum represents the status of a gene. If this column is 0 then we consider this a bacterial gene.\n If it is non-zero it is probably a phage gene, and the higher the score the more likely we believe it is a phage\n  gene. This is the raw data that we use to identify the prophages in your genome.\n\nThis file has 16 columns:\n  - 1. The id of each gene;\n  - 2. function: function of the gene (or `product` from a GenBank file);\n  - 3. contig;\n  - 4. start: start location of the gene;\n  - 5. stop: end location of the gene;\n  - 6. position: a sequential number of the gene (starting at 1);\n  - 7. rank: rank of each gene provided by random forest;\n  - 8. my_status: status of each gene based on random forest;\n  - 9. pp: classification of each gene based on their function;\n  - 10. Final_status: the status of each gene. For prophages, this column has the number of the prophage as listed in prophage.tbl above;\n   If the column contains a 0 we believe that it is a bacterial gene. Otherwise we believe that it is possibly a phage gene.\n\nIf we can detect the _att_ sites, the additional columns are:\n  - 11. start of _attL_;\n  - 12. end of _attL_;\n  - 13. start of _attR_;\n  - 14. end of _attR_;\n  - 15. sequence of _attL_;\n  - 16. sequence of _attR_;\n\n\n5. **prophage.tsv**  (code: 16)\n\nThis is a simpler version of the _prophage_coordinates.tsv_ file that only has prophage number, contig, start, and stop.\n\n6. **GFF3 format**  (code: 32)\n\nThis is the prophage information suitable for insertion into a [GFF3](https://m.ensembl.org/info/website/upload/gff3.html).\nThis is a legacy file format, however, since GFF3 is no longer widely supported, this only has the prophage coordinates.\nPlease post an issue on GitHub if more complete GFF3 files are required.\n\n7. **prophage.tbl**  (code: 64)\n\nThis file has two columns separated by tabs [prophage_number, location]. This is a also a\nlegacy file that is not generated by default. The prophage number is a sequential number of the\nprophage (starting at 1), and the location is in the format: contig_start_stop that encompasses the prophage.\n\n8. **test data** (code: 128)\n\nThis file has the data used in the random forest. The columns are:\n - Identifier\n - Median ORF length\n - Shannon slope\n - Adjusted AT skew\n - Adjusted GC skew\n - The maxiumum number of ORFs in the same direction\n - PHMM matches\n - Status\n\nThe numbers are averaged across a window of size specified by `--window_size`\n\n## Choosing which output files are created.\n\nWe have provided the option (`--output_choice`) to choose which output files are created. Each file above has a code associated with it,\nand to include that file add up the codes:\n\nCode | File\n--- | ---\n1 | prophage_coordinates.tsv\n2 | GenBank format output\n4 | prophage and bacterial sequences\n8 | prophage_information.tsv\n16 | prophage.tsv\n32 | GFF3 format output of just the prophages\n64 | prophage.tbl\n128 | test data used in the random forest\n256 | GFF3 format output for the annotated genomic contigs\n\nSo for example, if you want to get `GenBank format output` (2) and `prophage_information.tsv` (8), then\nenter an `--output_choice` of 10.\n\nThe default is 3: you will get both the `prophage_coordinates.tsv` and `GenBank format output` files.\n\n_Note:_ Choice `32` will only output the prophages themselves in GFF3 format. In contrast, choice `256` outputs\nannotated genomes. This is probably the best choice to bring the genome into Artemis as it will handle multiple\ncontigs correctly.\n\nIf you want _all_ files output, use `--output_choice 512`.\n\n# Example Data\n\n* _Streptococcus pyogenes_ M1 GAS which has a single genome contig. The genome contains four prophages.\n\nTo analyze this data, you can use:\n\n```\nPhiSpy.py -o output_directory -t data/trainSet_160490.61.txt tests/Streptococcus_pyogenes_M1_GAS.gb.gz\n```\n\nAnd you should get a prophage table that has this information (for example, take a look at `output_directory/prophage.tbl`).\n\n| Prophage number | Contig | Start | Stop |\n| --- | --- | --- | --- |\npp_1 | NC_002737 | 529631 | 569288\npp_2 | NC_002737 | 778642 | 820599\npp_3 | NC_002737 | 1192630 | 1222549\npp_4 | NC_002737 | 1775862 | 1782822\n\n# Assessing predictions\n\nAs with any software, it is critical that you assess the output from `phispy` to see if it actually makes sense! We start be ensuring we have the `prophage_information.tsv` file output (this is not output by default, and requires adding 8 to the `--output-choice` flag).\n\nThat is a tab-separated text file that you can import into Microsoft Excel, LibreOffice Calc, Google Sheets, or your favorite spreadsheet viewing program.\n\nThere are a few columns that you should pay attention to:\n- _position_ (the 6<sup>th</sup> column) is the position of the gene in the genome. If you sort by this column you will always return the genome to the original order.\n- _Final status_ (the 10<sup>th</sup> column) is whether this region is predicted to be a prophage or not. The number is the prophage number. If the entry is 0 it is not a prophage.\n- _pp_ and _my status_ (the 8<sup>th</sup> and 9<sup>th</sup> columns) are interim indicators about whether this gene is potentially part of a phage.\n\nWe recommend:\n1. Freeze the first row of the spreadsheet so you can see the column headers\n2. Sort the spreadsheet by the _my status_ column and color any row red where the value in this column is greater than 0\n3. Sort the spreadsheet by the _final status_ column and color those rows identified as a prophage green.\n4. Sort the spreadsheet by the _position_ column.\n\nNow all the prophages are colored green, while all the potential prophage genes that are not included as part of a prophage are colored red. You can easily review those non-prophage regions and determine whether _you_ think they should be included in prophages. Note that in most cases you can adjust the `phispy` parameters to include regions you think are prophages.\n\n**Note:** Ensure that while you are reviewing the results, you pay particular attention to the _contig_ column. In partial genomes, contig breaks are very often located in prophages. This is usual because prophages often contain sequences that are repeated around the genome. We have an [open issue](https://github.com/linsalrob/PhiSpy/issues/33) open issue to try and resolve this in a meaningful way.\n\n# Interactive PhiSpy\n\nWe have created a [jupyter notebook](https://github.com/linsalrob/PhiSpy/blob/master/jupyter_notebooks/PhiSpy.ipynb)\nexample where you can run `PhiSpy` to test the effect of the different parameters\non your prophage predictions. Change the name of the genbank file to point to your genome, and\nchange the values in `parameters` and see how the prophage predictions vary!\n\n# Tips, Tricks, and Errors\n\nIf you are feeling lazy, you actually only need to use `sudo apt install -y python3-pip; python3 -m pip install phispy`\nsince python3-pip requires `build-essential` and `python3-dev`!\n\nIf you try `PhiSpy.py -v` and get an error like this:\n\n```bash\n$ PhiSpy.py -v\n-bash: PhiSpy.py: command not found\n```\n\nThen you can either use the full path:\n\n```bash\n~/.local/bin/PhiSpy.py -v\n```\n\nor add that location to your `$PATH`:\n\n```bash\necho \"export PATH=\\$HOME/.local/bin:\\$PATH\" >> ~/.bashrc\nsource ~/.bashrc\nPhiSpy.py -v\n```\n\n# Exit (error) codes\n\nWe use a few different error codes to signify things that we could not compute. So far, we have:\n\nExit Code | Meaning | Suggested solution\n--- | --- | ---\n2 | No input file provided | We need a file to work with!\n3 | No output directory provided | We need somewhere to write the results to!\n10 | No training sets available | This should be in the default install. Please check your installation\n11 | The specific training set is not available | Check the argument passed to the `--training_set` parameter\n13 | No kmers file found | This should be in the default install. Please check your installation\n20 | IO Error | There was an error reading your input file.\n25 | Non nucleotide base found | Check for a non-standard base in your sequence\n26 | An ORF with no bases | This is probably a really short ORF and should be deleted.\n30 | No contigs | We filter contigs by length, and so try adjusting the `--min_contig_size` parameter, though the default is 5,000 bp and you will need some adjacent genes!\n40 | No ORFs in your genbank file | Please annotate your genome, e.g. using [RAST](http://rast.nmpdr.org/) or [PROKKA](https://github.com/tseemann/prokka)\n41 | Less than 100 ORFs are in your annotated genome. This is not enough to find a prophage | Please annotate your genome, e.g. using [RAST](http://rast.nmpdr.org/) or [PROKKA](https://github.com/tseemann/prokka)\n\n# Making your own training sets\n\nIf within reference datasets, close relatives to bacteria of your interest are missing, you can make your own training sets by providing at least a single genome in which you indicate prophage proteins. This is done by adding a new qualifier to GenBank annotation for each CDS feature within a prophage region: `/is_phage=\"1\"`. This allows PhiSpy to distinguish the signal from bacterial/phage regions and make a training set to use afterwards during classification with random forest algorithm.\n\nWe provide a script - `mark_prophage_features.py`, to automate that process. It updates GenBank files based on PhiSpy's prophage_predictions.tsv file format or user's tab-delimited table with the following information in columns for each prophage region:\n1. path to GenBank file\n2. replicon id\n3. prophage start coordinate\n4. prophage end coordinate\n\nTo make training sets out of your files use `make_training_sets.py` script. It allows you to update/extend PhiSpy's default training sets or overwrite them with just your data.\n\n`make_training_sets.py` prepares all required input files, i.e. it makes phage/bacteria-specific kmers sets based on `/is_phage=\"1\"` qualifiers, reads information about taxonomy (if requested for grouping with `--use_taxonomy`), calls PhiSpy in a training mode and prepares training sets.\n\n```bash\nmake_training_sets.py -d input_directory -g groups_file --use_taxonomy -k kmer_size -t kmers_type --phmms hmm_db --threads num_threads --retrain\n```\nwhere:\n- `input_directory`: a directory where all GenBank files for training are stored. Note that provided path will be added to file names in `groups_file`.\n- `groups_file`: a file mapping GenBank file names with extension and the name of group they will make; each file can be assigned to more than one group - take a look at how the reference data grouping file was constructed at `test_genbank_files/groups.txt`.\n- `use_taxonomy`: this option creates groups of training sets based on taxonomy within analyzed GenBank files. If taxonomy information is missing, genome is assigned to _Bacteria_ group.\n- `kmer_size`: is the size of kmers that will be produces. By default it's 12. If changed, remember to also change that parameter while running PhiSpy with produced training sets.\n- `kmers_type`: type of generated kmers. By default 'all' means generating kmers by 1 nt. If changed, remember to also change that parameter while running PhiSpy with produced training sets.\n\nBeside the flags that allow training with phmm signal, there are also `--retrain` and `--absolute_retrain` flags. Each of them triggers complete reanalysis of input files but were added for different reasons.\nThe first should be used whenever any file previously used for training has changed, e.g. more/less phage proteins were marked with `/is_phage=\"1\"`, as it triggers preparation of new kmers files.\nThe second additionally ignores `trainingGenome_list.txt` file and therefore allows to ommit PhiSpy's default reference genomes. The same will happen when `trainingGenome_list.txt` is missing in PhiSpy's installation directory.\n\nAll files created while training, i.e. phage/bacteria kmers and testSet for each GenBank file are stored in `PhiSpyModules/data/testSets/` directory in PhiSpy's installation directory. This allows to save a bit of time when adding new genomes and retraining.\n\n## Preparing GenBank files\n- it is recommended to mark prophage proteins even from prophage remnants/disrupted regions composed of a few proteins with `/is_phage=\"1\"` to minimize the loss of good signal, kmers in particular,\n- don't use too many genomes (e.g. a 100) as you may end up with a small set of phage-specific kmers,\n- try to pick several genomes with different prophages to increase the diversity.\n"
}