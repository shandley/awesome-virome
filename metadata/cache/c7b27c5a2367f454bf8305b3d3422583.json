{
  "cache_date": "2025-03-17T03:32:48.868085",
  "data": "# DeepVirFinder: Identifying viruses from metagenomic data by deep learning\n\nVersion: 1.0\n\nAuthors: Jie Ren, Kai Song, Chao Deng, Nathan Ahlgren, Jed Fuhrman, Yi Li, Xiaohui Xie, Ryan Poplin, Fengzhu Sun\n\nMaintainer: Jie Ren renj@usc.edu, Chao Deng chaodeng@usc.edu\n\n\n## Description\n\nDeepVirFinder predicts viral sequences using deep learning method. \nThe method has good prediction accuracy for short viral sequences, \nso it can be used to predict sequences from the metagenomic data.\n\nDeepVirFinder significantly improves the prediction accuracy compared to our k-mer based method VirFinder by using convolutional neural networks (CNN).\nCNN can automatically learn genomic patterns from the viral and prokaryotic sequences and simultaneously build a predictive model based on the learned genomic patterns. \nThe learned patterns are represented in the form of weight matrices of size 4 by k, where k is the length of the pattern. \nThis representation is similar to the position weight matrix (PWM), the commonly used representation of biological motifs, \nwhich are also of size 4 by k and each column specifies the probabilities of having the 4 nucleotides at that position.\nWhen only one type of nucleotide can be chosen at each position with probability 1, the motif degenerates to a k-mer. \nThus, the CNN is a natural generalization of k-mer based model. \nThe more flexible CNN model indeed outperforms the k-mer based model on viral sequence prediction problem.\n\n\n## Dependencies\n\nDeepVirFinder requires Python 3.6 with the packages of numpy, theano, keras, scikit-learn, and Biopython.\nWe recommand the use [Miniconda](https://conda.io/miniconda.html) to install all dependencies. \nAfter installing Miniconda, simply run (this may take about 5-10 minutes),\n\n\n    conda install python=3.6 numpy theano=1.0.3 keras=2.2.4 scikit-learn Biopython h5py\n    \nor create a virtual environment \n\n    conda create --name dvf python=3.6 numpy theano=1.0.3 keras=2.2.4 scikit-learn Biopython h5py\n    source activate dvf\n\n\n\n## Installation\n\nDownload the package by \n\n    git clone https://github.com/jessieren/DeepVirFinder\n    cd DeepVirFinder\n    \n    \n## Usage\n\nThe input of DeepVirFinder is the fasta file containing the sequences to predict, \nand the output is a .txt file containing the predicted score and p-value for each of the input sequences. \nThe higher score or lower p-value indicate higher likelihood of being a viral sequence. \nThe p-value is compuated by comparing the predicted score with the null distribution for prokaryotic sequences. \n\nThe output file will be in the same directory as the input file by default. Users can also specify the output directory by the option [-o].\nThe option [-l] is for setting a minimun sequence length threshold so that sequences shorter than this threshold will not be predicted.\nThe program also supports parallel computing. Using [-c] to specify the number of threads to use. \nThe option [-m] is for specifying the directory to the models. The default model directory is ./models, which contains the models we trained and used in the paper.\n\n\n    python dvf.py [-i INPUT_FA] [-o OUTPUT_DIR] [-l CUTOFF_LEN] [-c CORE_NUM]\n\n\n#### Options\n      -h, --help            show this help message and exit\n      -i INPUT_FA, --in=INPUT_FA\n                            input fasta file\n      -m MODDIR, --mod=MODDIR\n                            model directory (default ./models)\n      -o OUTPUT_DIR, --out=OUTPUT_DIR\n                            output directory\n      -l CUTOFF_LEN, --len=CUTOFF_LEN\n                            predict only for sequence >= L bp (default 1)\n      -c CORE_NUM, --core=CORE_NUM\n                            number of parallel cores (default 1)\n\n\n## Examples\n\n#### Predicting the crAssphage genome\n\n    python dvf.py -i ./test/crAssphage.fa -o ./test/ -l 300\n    \nThe program takes about 1 minute, and the output of the program should be something like,\n\n    > python dvf.py -i ./test/crAssphage.fa -o ./test/ -l 300\n    Using Theano backend.\n    1. Loading Models.\n       model directory /auto/cmb-panasas2/renj/software/DeepVirFinder/models\n    2. Encoding and Predicting Sequences.\n       processing line 1\n       processing line 1389\n    3. Done. Thank you for using DeepVirFinder.\n       output in ./test/crAssphage.fa_gt300bp_dvfpred.txt\n     \n     \n#### Predicting a set of metagenomically assembled contigs\n    \n    python dvf.py -i ./test/CRC_meta.fa -l 1000 -c 2\n    \n    \n    \n\n#### If you would like to compute q-values (false discovery rate), please use the R package \"qvalue\". \n\n  To install the package \"qvalue\" in R:\n\n  ```\n  # try http:// if https:// URLs are not supported; it also checks for out-of-date packages\n  source(\"https://bioconductor.org/biocLite.R\")\n  biocLite(\"qvalue\")\n  ```\n  \n  To compute the q-values, load the package and call the function 'qvalue'. For example, \n\n  ```\n  # load the package qvalue\n  library(qvalue)\n\n  # read the prediction results\n  result <- read.csv(\"./test/CRC_meta.fa_gt1000bp_dvfpred.txt\", sep='\\t')\n\n  # estimate q-values (false discovery rates) based on p-values\n  result$qvalue <- qvalue(result$pvalue)$qvalues\n\n  # sort sequences by q-value in ascending order\n  result[order(result$qvalue),]\n  ```\n\n## Training the model using customized dataset\n\nIf users are interested in training a new deep learning model using their own dataset, \nwe provide the scripts for processing the genomic data and training the model. \nFour fasta files are needed for training the model: \n  1. the host genomic sequences for training, \n  2. the host genomic sequences for validation, \n  3. the virus genomic sequences for training, and \n  4. the virus genomic sequences for validation.\n \nThe script encode.py processes the input genomic sequences by fragmenting them into fixed length sequences [-l], \nand encoding them by one-hot encoding method. The contig type [-p] indicates the type of the sequences, virus or host. \nThis indicator will be encoded into the file name and will be used in the following steps for data type recognition.\n\n#### Options\n      -h, --help            show this help message and exit\n      -i FILENAME, --fileName=FILENAME\n                            fileName\n      -l CONTIGLENGTH, --contigLength=CONTIGLENGTH\n                            contigLength\n      -p CONTIGTYPE, --contigType=CONTIGTYPE\n                            contigType, virus or host\n\nThe script training.py takes the encoded sequences and trains a deep learning model for classifying viruses from hosts. \nThe directory of the encoded training data [-i] and the directory of the encoded validation data [-j] need to be specified. \nHyperparameters of the deep learning model include the number of filters in the convolutional layer [-n], the length of the filter [-f], and the number of neurons in the dense layer [-d]. \nSince viral sequences in real data can be of various lengths, we train multiple models using sequences of different lengths, say 150, 300, 500, 1000 bp for predicting sequences of different length range. The option [-l] specifies the length of the sequences used for training. \n\n#### Options\n      -h, --help            show this help message and exit\n      -l CONTIGLENGTH, --len=CONTIGLENGTH\n                            contig Length\n      -i INDIRTR, --intr=INDIRTR\n                            input directory for training data\n      -j INDIRVAL, --inval=INDIRVAL\n                            input directory for validation data\n      -o OUTDIR, --out=OUTDIR\n                            output directory\n      -f FILTER_LEN1, --fLen1=FILTER_LEN1\n                            the length of the filter\n      -n NB_FILTER1, --fNum1=NB_FILTER1\n                            number of filters in the convolutional layer\n      -d NB_DENSE, --dense=NB_DENSE\n                            number of neurons in the dense layer\n      -e EPOCHS, --epochs=EPOCHS\n                            number of epochs\n\n### Example\n\nWe prepared an example for a test. We strongly suggest to use GPU for training otherwise the training will take very long time. \n\n    # Fragmenting sequences into fixed lengths, and encoding them using one-hot encoding (may take about 5 minutes)\n    for l in 150 300 500 1000 \n    do \n    # for training \n    python encode.py -i ./train_example/tr/host_tr.fa -l $l -p host\n    python encode.py -i ./train_example/tr/virus_tr.fa -l $l -p virus\n    # for validation\n    python encode.py -i ./train_example/val/host_val.fa -l $l -p host\n    python encode.py -i ./train_example/val/virus_val.fa -l $l -p virus\n    done\n\n    # Training multiple models for different contig lengths\n    # The following deep neural networks is with 500 filters of length 10 in the convolutional layer, \n    # and 500 dense neurons in the dense layer. Training for 10 epochs.\n    # Users may add THEANO_FLAGS='mode=FAST_RUN,device=cuda0,floatX=float32,GPUARRAY_CUDA_VERSION=80' in front of the python command to set GPU and cuda.\n    # Using GPU (k40), the training process takes about 20 minutes\n    source /<path_to_cuda_setup>/setup.sh\n    source /<path_to_cuDNN_setup>/setup.sh\n    for l in 150 300 500 1000 \n    do \n    python training.py -l $l -i ./train_example/tr/encode -j ./train_example/val/encode -o ./train_example/models -f 10 -n 500 -d 500 -e 10\n    done\n    \nThe trained models will be saved in the output directory. To predict sequences using the newly trained model, specify the model directory using the option -m,\n    \n    python dvf.py -i ./test/crAssphage.fa -o ./train_example/test -l 300 -m ./train_example/models\n\n\n\nCopyright and License Information\n-----------------------------------\n\nCopyright (C) 2019 University of Southern California\n\nAuthors: Jie Ren, Kai Song, Chao Deng, Nathan Ahlgren, Jed Fuhrman, Yi Li, Xiaohui Xie, Ryan Poplin, Fengzhu Sun\n\nThis program is available under the terms of USC-RL v1.0. \n\nCommercial users should contact Dr. Sun at fsun@usc.edu, copyright at the University of Southern California.\n\n<!--You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.-->\n\n"
}