name: Citation Data Validation Workflow

on:
  # Run after dashboard update workflow completes
  workflow_run:
    workflows:
      - "Dashboard Data Update"
    types:
      - completed
    branches:
      - main
  
  # Run weekly
  schedule:
    # Run every Sunday at 12:00 UTC (after basic repository updates)
    - cron: "0 12 * * 0"
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      skip_doi_check:
        description: 'Skip DOI online validation (faster)'
        type: boolean
        default: false
      auto_fix:
        description: 'Automatically fix DOI format issues'
        type: boolean
        default: true
      no_auto_fix:
        description: 'Disable automatic fixing of DOI format issues'
        type: boolean
        default: false

# Permissions needed for creating and managing PRs
permissions:
  contents: write
  pull-requests: write

jobs:
  validate-citations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch all history for proper branch creation
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Setup GitHub CLI
        run: |
          # Authenticate with GitHub CLI
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
      
      - name: Run citation validation
        run: |
          # Build command with appropriate arguments
          CMD="python scripts/validate_citations.py --report"
          
          # Add skip DOI check if specified
          if [[ "${{ github.event.inputs.skip_doi_check }}" == "true" ]]; then
            CMD="$CMD --skip-doi-check"
          fi
          
          # Add auto-fix if specified and not disabled
          if [[ "${{ github.event.inputs.auto_fix }}" == "true" && "${{ github.event.inputs.no_auto_fix }}" != "true" ]]; then
            CMD="$CMD --auto-fix"
          fi
          
          # Add no-auto-fix if specified
          if [[ "${{ github.event.inputs.no_auto_fix }}" == "true" ]]; then
            CMD="$CMD --no-auto-fix"
          fi
          
          # For scheduled or workflow_run events, use default settings (auto-fix enabled)
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_run" ]]; then
            CMD="$CMD --auto-fix"
          fi
          
          # Run the command
          echo "Running: $CMD"
          $CMD
          
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: citation-validation-report
          path: |
            reports/citation_validation.json
            reports/citation_validation_report.md
      
      - name: Check for critical issues
        id: check_issues
        run: |
          # Check if the file exists and is valid JSON
          if [ ! -f reports/citation_validation.json ]; then
            echo "Citation validation report file not found"
            echo "issues_count=0" >> $GITHUB_OUTPUT
            echo "inconsistent_dois=0" >> $GITHUB_OUTPUT
            echo "fixed_dois=0" >> $GITHUB_OUTPUT
            echo "CRITICAL_ISSUES=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for valid JSON
          if ! jq empty reports/citation_validation.json 2>/dev/null; then
            echo "Invalid JSON in citation validation report"
            echo "issues_count=0" >> $GITHUB_OUTPUT
            echo "inconsistent_dois=0" >> $GITHUB_OUTPUT
            echo "fixed_dois=0" >> $GITHUB_OUTPUT
            echo "CRITICAL_ISSUES=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Process the file when it exists and is valid
          ISSUES_COUNT=$(jq '.all_issues | length // 0' reports/citation_validation.json)
          TOOLS_WITH_DOI=$(jq '.tools_with_doi // 0' reports/citation_validation.json)
          CONSISTENT_DOIS=$(jq '.consistent_dois // 0' reports/citation_validation.json)
          FIXED_DOIS=$(jq '.total_dois_fixed // 0' reports/citation_validation.json)
          INCONSISTENT_DOIS=$(jq "($TOOLS_WITH_DOI - $CONSISTENT_DOIS)" 2>/dev/null || echo 0)
          
          # Handle potential arithmetic errors
          if [[ ! "$INCONSISTENT_DOIS" =~ ^[0-9]+$ ]]; then
            INCONSISTENT_DOIS=0
          fi
          
          echo "Total issues found: $ISSUES_COUNT"
          echo "Inconsistent DOIs: $INCONSISTENT_DOIS"
          echo "DOIs auto-fixed: $FIXED_DOIS"
          
          # Set outputs for next steps
          echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
          echo "inconsistent_dois=$INCONSISTENT_DOIS" >> $GITHUB_OUTPUT
          echo "fixed_dois=$FIXED_DOIS" >> $GITHUB_OUTPUT
          
          # Check if there are critical issues that need notification
          if [[ $INCONSISTENT_DOIS -gt 5 ]]; then
            echo "CRITICAL_ISSUES=true" >> $GITHUB_OUTPUT
          else
            echo "CRITICAL_ISSUES=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub issue for critical problems
        if: steps.check_issues.outputs.CRITICAL_ISSUES == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('reports/citation_validation_report.md', 'utf8');
            const fixedDois = ${{ steps.check_issues.outputs.fixed_dois }};
            
            let title = 'Citation Data Validation Critical Issues';
            let bodyIntro = '## Citation Validation Report has identified critical issues';
            
            if (fixedDois > 0) {
              title = `Citation Data Validation: ${fixedDois} DOIs fixed, but critical issues remain`;
              bodyIntro = `## Citation Validation Report\n\n**${fixedDois} DOI format issues were automatically fixed**, but there are still critical consistency issues that need manual review.`;
            }
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: `${bodyIntro}\n\n${reportContent.substring(0, 3000)}...\n\nSee the full report in the workflow artifacts.`,
              labels: ['citation-data', 'data-quality']
            });
      
      - name: Update data quality summary
        run: |
          # Create a directory for citation validation metrics
          mkdir -p reports/citations
          
          # Check if the file exists and is valid JSON
          if [ ! -f reports/citation_validation.json ]; then
            echo "Creating empty citation validation metrics file"
            echo '{
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "total_tools": 0,
              "tools_with_doi": 0,
              "doi_percentage": 0,
              "valid_doi_percentage": 0,
              "consistent_doi_percentage": 0,
              "tools_with_pubmed_data": 0,
              "pubmed_percentage": 0,
              "tools_with_academic_impact": 0,
              "academic_impact_percentage": 0,
              "citation_format_counts": {"bibtex": 0, "apa": 0, "mla": 0},
              "issues_count": 1,
              "error": "No validation data available"
            }' > reports/citations/citation_validation_metrics.json
            exit 0
          fi
          
          # Verify JSON is valid
          if ! jq empty reports/citation_validation.json 2>/dev/null; then
            echo "Invalid JSON in citation validation report, creating error metrics"
            echo '{
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "total_tools": 0,
              "tools_with_doi": 0,
              "doi_percentage": 0,
              "valid_doi_percentage": 0,
              "consistent_doi_percentage": 0,
              "tools_with_pubmed_data": 0,
              "pubmed_percentage": 0,
              "tools_with_academic_impact": 0,
              "academic_impact_percentage": 0,
              "citation_format_counts": {"bibtex": 0, "apa": 0, "mla": 0},
              "issues_count": 1,
              "error": "Invalid JSON in validation report"
            }' > reports/citations/citation_validation_metrics.json
            exit 0
          fi
          
          # Extract key metrics with safe defaults for missing values
          jq '{
            timestamp: (.timestamp // "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"),
            total_tools: (.total_tools // 0),
            tools_with_doi: (.tools_with_doi // 0),
            doi_percentage: (.doi_percentage // 0),
            valid_doi_percentage: (.valid_doi_percentage // 0),
            consistent_doi_percentage: (.consistent_doi_percentage // 0),
            tools_with_pubmed_data: (.tools_with_pubmed_data // 0),
            pubmed_percentage: (.pubmed_percentage // 0),
            tools_with_academic_impact: (.tools_with_academic_impact // 0),
            academic_impact_percentage: (.academic_impact_percentage // 0),
            citation_format_counts: (.citation_format_counts // {"bibtex": 0, "apa": 0, "mla": 0}),
            issues_count: ((.all_issues | length) // 0),
            total_dois_fixed: (.total_dois_fixed // 0)
          }' reports/citation_validation.json > reports/citations/citation_validation_metrics.json
      
      - name: Prepare changes
        id: prepare
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create a unique branch name with timestamp
          BRANCH_NAME="citation-validation-$(date +%Y%m%d-%H%M%S)"
          
          # Create branch from the current HEAD
          git checkout -B $BRANCH_NAME
          
          # Add any DOI fixes from auto-fix process
          git add metadata/**/*.json || true
          
          # Add metadata reports
          git add reports/citations/citation_validation_metrics.json || true
          
          # Check if there are staged changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
            
            # Create commit message based on changes
            FIXED_DOIS=${{ steps.check_issues.outputs.fixed_dois }}
            if [[ $FIXED_DOIS -gt 0 ]]; then
              git commit -m "Update citation validation metrics and fix $FIXED_DOIS DOI format issues"
            else
              git commit -m "Update citation validation metrics"
            fi
            
            # Push the branch
            git push origin $BRANCH_NAME
          fi
          
      - name: Create Pull Request
        if: steps.prepare.outputs.changes_detected == 'true'
        id: create-pr
        run: |
          # Create a PR directly using the GitHub CLI
          FIXED_DOIS=${{ steps.check_issues.outputs.fixed_dois }}
          if [[ $FIXED_DOIS -gt 0 ]]; then
            TITLE="Update citation validation metrics and fix $FIXED_DOIS DOI format issues"
            
            # Create a file for the PR body
            cat > pr_body.md << 'EOL'
## Automated PR with citation validation results

This PR includes:
- Updated citation validation metrics in `reports/citations/citation_validation_metrics.json`
- Automatically fixed FIXED_DOIS_PLACEHOLDER DOI formatting issues in metadata files

Generated automatically by the Citation Data Validation workflow.
EOL
            # Replace the placeholder with actual value
            sed "s/FIXED_DOIS_PLACEHOLDER/$FIXED_DOIS/g" pr_body.md > pr_body_fixed.md
            mv pr_body_fixed.md pr_body.md
            BODY=$(cat pr_body.md)
          else
            TITLE="Update citation validation metrics"
            
            # Create a file for the PR body
            cat > pr_body.md << 'EOL'
## Automated PR with citation validation results

This PR includes:
- Updated citation validation metrics in `reports/citations/citation_validation_metrics.json`

Generated automatically by the Citation Data Validation workflow.
EOL
            BODY=$(cat pr_body.md)
          fi
          
          gh pr create --base main --head ${{ steps.prepare.outputs.branch_name }} --title "$TITLE" --body "$BODY" || true
          echo "PR creation completed"