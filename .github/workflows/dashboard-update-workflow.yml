name: Dashboard Data Update

on:
  # Run after the main data update workflow completes
  workflow_run:
    workflows: ["Simplified Data Update Workflow"]
    types:
      - completed
    branches:
      - main
  # Allow manual trigger
  workflow_dispatch:

# Ensure workflow has permissions to commit changes
permissions:
  contents: write

jobs:
  update-dashboard-data:
    runs-on: ubuntu-latest
    # Only run if the simplified workflow succeeded or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install additional packages needed for dashboard data processing
          pip install networkx matplotlib requests pandas
      
      - name: Update impact data
        run: |
          echo "Generating dashboard impact data..."
          python scripts/generate_citation_data.py
          
      - name: Collect direct citation relationships
        run: |
          echo "Collecting direct citation relationships from CrossRef..."
          python scripts/direct_citation_collector.py
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull the latest changes first to avoid push conflicts
          git pull --rebase origin main
          
          # Add the updated impact data file and citation network visualization
          git add impact_data.json debug_urls.html
          
          # Commit only if there are changes
          git diff --staged --quiet || git commit -m "Update dashboard visualization data and citation relationships"
          
          # Try to push, with retry logic in case of conflicts
          for i in {1..3}; do
            echo "Push attempt $i"
            if git push; then
              echo "Push successful"
              break
            else
              echo "Push failed, retrying after pulling latest changes"
              git pull --rebase origin main
              # Exit with failure if this was the last attempt
              if [ $i -eq 3 ]; then
                echo "All push attempts failed"
                exit 1
              fi
            fi
          done