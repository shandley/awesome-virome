name: Comprehensive Repository Testing

on:
  schedule:
    # Weekly full check - Runs at 01:00 UTC on Sunday
    - cron: '0 1 * * 0'
    # Daily quick check - Run at staggered times to avoid concurrent load
    - cron: '0 4 * * 1'  # Monday at 4:00 UTC
    - cron: '30 4 * * 2'  # Tuesday at 4:30 UTC
    - cron: '0 5 * * 3'  # Wednesday at 5:00 UTC
    - cron: '30 5 * * 4'  # Thursday at 5:30 UTC
    - cron: '0 6 * * 5'  # Friday at 6:00 UTC
    - cron: '30 6 * * 6'  # Saturday at 6:30 UTC
  workflow_dispatch: # Allows manual triggering
    inputs:
      full_test:
        description: 'Run full test suite'
        required: false
        default: false
        type: boolean

jobs:
  link-checker:
    name: Check Links
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Link Checker
        uses: lycheeverse/lychee-action@v1.9.0
        with:
          args: --verbose --no-progress --exclude-mail README.md
          fail: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Link Check Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-check-report
          path: ./lychee/out.md

  validate-data:
    name: Validate Data Structure
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow this job to succeed even with schema issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Check if schema file exists
        id: check_schema
        run: |
          if [ -f "scripts/schema.json" ]; then
            echo "schema_exists=true" >> $GITHUB_OUTPUT
          else
            echo "schema_exists=false" >> $GITHUB_OUTPUT
            echo "Schema file not found, skipping validation"
          fi

      - name: Validate data.json against schema
        if: steps.check_schema.outputs.schema_exists == 'true'
        run: |
          python -c "import jsonschema, json; jsonschema.validate(json.load(open('data.json')), json.load(open('scripts/schema.json')))" || echo "Schema validation issues found but continuing"

  content-verification:
    name: Verify README Content
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Verify README content matches data.json
        run: python scripts/verify_readme_content.py
        
      - name: Check for duplicates in README
        run: python scripts/verify_readme_content.py --check-duplicates

  repo-metadata:
    name: Check Repository Metadata
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Verify repository metadata
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python scripts/verify_repo_metadata.py

  version-check:
    name: Check Version Information
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Check version formatting
        run: python scripts/check_version_info.py

  workflow-validation:
    name: Validate Workflow Definitions
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' && github.event.schedule == '0 0 * * 0' || github.event.inputs.full_test == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Validate workflow definitions
        run: python scripts/validate_workflow_definitions.py

  cross-platform-checks:
    name: Cross-Platform Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.10']
    
    if: ${{ github.event_name == 'schedule' && github.event.schedule == '0 0 * * 0' || github.event.inputs.full_test == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests jsonschema

      - name: Run basic tests
        run: |
          python -c "import json; json.load(open('data.json', encoding='utf-8'))"
          python -c "import re; import os; content = open('README.md', encoding='utf-8').read(); assert 'Awesome-Virome' in content, 'README missing title'"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow this job to succeed even with code quality issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Run flake8
        run: flake8 --max-line-length=100 --exclude=.git,__pycache__,*.md,*.json --ignore=E501,E203,W503,E402 update_check.py scripts/ || echo "Flake8 issues found but continuing"

      - name: Check formatting with black
        run: black --check --diff update_check.py scripts/ || echo "Black formatting issues found but continuing"