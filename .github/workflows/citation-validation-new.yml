name: Citation Data Validation

on:
  # Run after dashboard update workflow completes
  workflow_run:
    workflows:
      - "Dashboard Data Update"
    types:
      - completed
    branches:
      - main
  
  # Run weekly
  schedule:
    # Run every Sunday at 12:00 UTC (after basic repository updates)
    - cron: "0 12 * * 0"
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      skip_doi_check:
        description: 'Skip DOI online validation (faster)'
        type: boolean
        default: false
      auto_fix:
        description: 'Automatically fix DOI format issues'
        type: boolean
        default: true

# Permissions needed for creating and managing PRs
permissions:
  contents: write
  pull-requests: write

jobs:
  validate-citations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch all history for proper branch creation
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install PyGithub
      
      - name: Setup GitHub CLI
        run: |
          # Authenticate with GitHub CLI
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
      
      - name: Run citation validation
        id: validate
        run: |
          # Build command with appropriate arguments
          CMD="python scripts/validate_citations.py --report"
          
          # Add skip DOI check if specified
          if [[ "${{ github.event.inputs.skip_doi_check }}" == "true" ]]; then
            CMD="$CMD --skip-doi-check"
          fi
          
          # Add auto-fix if specified
          if [[ "${{ github.event.inputs.auto_fix }}" == "true" ]]; then
            CMD="$CMD --auto-fix"
          fi
          
          # For scheduled or workflow_run events, use default settings (auto-fix enabled)
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_run" ]]; then
            CMD="$CMD --auto-fix"
          fi
          
          # Run the command
          echo "Running: $CMD"
          $CMD
      
      - name: Upload validation report
        uses: actions/upload-artifact@v4
        with:
          name: citation-validation-report
          path: |
            reports/citation_validation.json
            reports/citation_validation_report.md
      
      - name: Process validation results and commit directly
        if: success()
        run: |
          # Set up git configuration
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Prepare directories
          mkdir -p reports/citations
          
          # Extract metrics from validation results
          if [ -f reports/citation_validation.json ]; then
            # Get total DOIs fixed
            FIXED_DOIS=$(jq '.total_dois_fixed // 0' reports/citation_validation.json)
            
            # Generate metrics file
            jq '{
              timestamp: (.timestamp // "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"),
              total_tools: (.total_tools // 0),
              tools_with_doi: (.tools_with_doi // 0),
              doi_percentage: (.doi_percentage // 0),
              valid_doi_percentage: (.valid_doi_percentage // 0),
              consistent_doi_percentage: (.consistent_doi_percentage // 0),
              tools_with_pubmed_data: (.tools_with_pubmed_data // 0),
              pubmed_percentage: (.pubmed_percentage // 0),
              tools_with_academic_impact: (.tools_with_academic_impact // 0),
              academic_impact_percentage: (.academic_impact_percentage // 0),
              citation_format_counts: (.citation_format_counts // {"bibtex": 0, "apa": 0, "mla": 0}),
              issues_count: ((.all_issues | length) // 0),
              total_dois_fixed: (.total_dois_fixed // 0)
            }' reports/citation_validation.json > reports/citations/citation_validation_metrics.json
          else
            # Create empty metrics file if validation results don't exist
            echo '{
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "total_tools": 0,
              "tools_with_doi": 0,
              "doi_percentage": 0,
              "valid_doi_percentage": 0,
              "consistent_doi_percentage": 0,
              "tools_with_pubmed_data": 0,
              "pubmed_percentage": 0,
              "tools_with_academic_impact": 0,
              "academic_impact_percentage": 0,
              "citation_format_counts": {"bibtex": 0, "apa": 0, "mla": 0},
              "issues_count": 1,
              "error": "No validation data available"
            }' > reports/citations/citation_validation_metrics.json
            FIXED_DOIS=0
          fi
          
          # Stage changes
          git add metadata/**/*.json || true
          git add reports/citations/citation_validation_metrics.json || true
          
          # Commit if there are changes
          if ! git diff --staged --quiet; then
            if [ "$FIXED_DOIS" -gt 0 ]; then
              git commit -m "Update citation validation metrics and fix $FIXED_DOIS DOI format issues"
            else
              git commit -m "Update citation validation metrics"
            fi
            
            # Push directly to main
            git push origin HEAD:main
          else
            echo "No changes to commit"
          fi